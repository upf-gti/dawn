#include <metal_stdlib>
using namespace metal;

struct S {
  int before;
  float3x3 m;
  int after;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad_1;
};

struct S_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad;
  /* 0x0010 */ tint_array<tint_packed_vec3_f32_array_element, 3> m;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_2;
};

struct tint_module_vars_struct {
  const constant tint_array<S_packed_vec3, 4>* u;
  threadgroup tint_array<S, 4>* w;
};

struct tint_symbol_1 {
  tint_array<S, 4> tint_symbol;
};

S tint_load_struct_packed_vec3(const constant S_packed_vec3* const from) {
  int const v = (*from).before;
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_1 = (*from).m;
  float3 const v_2 = float3(v_1[0u].packed);
  float3 const v_3 = float3(v_1[1u].packed);
  float3x3 const v_4 = float3x3(v_2, v_3, float3(v_1[2u].packed));
  return S{.before=v, .m=v_4, .after=(*from).after};
}

tint_array<S, 4> tint_load_array_packed_vec3(const constant tint_array<S_packed_vec3, 4>* const from) {
  S const v_5 = tint_load_struct_packed_vec3((&(*from)[0u]));
  S const v_6 = tint_load_struct_packed_vec3((&(*from)[1u]));
  S const v_7 = tint_load_struct_packed_vec3((&(*from)[2u]));
  return tint_array<S, 4>{v_5, v_6, v_7, tint_load_struct_packed_vec3((&(*from)[3u]))};
}

void f_inner(uint tint_local_index, tint_module_vars_struct tint_module_vars) {
  {
    uint v_8 = 0u;
    v_8 = tint_local_index;
    while(true) {
      uint const v_9 = v_8;
      if ((v_9 >= 4u)) {
        break;
      }
      (*tint_module_vars.w)[v_9] = S{};
      {
        v_8 = (v_9 + 1u);
      }
      continue;
    }
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  (*tint_module_vars.w) = tint_load_array_packed_vec3(tint_module_vars.u);
  (*tint_module_vars.w)[1] = tint_load_struct_packed_vec3((&(*tint_module_vars.u)[2]));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_10 = (*tint_module_vars.u)[2].m;
  float3 const v_11 = float3(v_10[0u].packed);
  float3 const v_12 = float3(v_10[1u].packed);
  (*tint_module_vars.w)[3].m = float3x3(v_11, v_12, float3(v_10[2u].packed));
  (*tint_module_vars.w)[1].m[0] = float3((*tint_module_vars.u)[0].m[1].packed).zxy;
}

kernel void f(uint tint_local_index [[thread_index_in_threadgroup]], const constant tint_array<S_packed_vec3, 4>* u [[buffer(0)]], threadgroup tint_symbol_1* v_13 [[threadgroup(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .w=(&(*v_13).tint_symbol)};
  f_inner(tint_local_index, tint_module_vars);
}
