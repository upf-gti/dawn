#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

uint foo(device uint* const tint_symbol_6) {
  tint_array<uint, 4> const tint_symbol_4 = tint_array<uint, 4>{0u, 1u, 2u, 4u};
  return tint_symbol_4[*(tint_symbol_6)];
}

kernel void tint_symbol_1(device uint* tint_symbol_7 [[buffer(0)]]) {
  tint_array<uint, 4> const tint_symbol_5 = tint_array<uint, 4>{0u, 1u, 2u, 4u};
  uint const v = tint_symbol_5[*(tint_symbol_7)];
  uint const tint_symbol_2 = v;
  uint const tint_symbol_3 = foo(tint_symbol_7);
  *(tint_symbol_7) = (tint_symbol_2 + tint_symbol_3);
  return;
}

