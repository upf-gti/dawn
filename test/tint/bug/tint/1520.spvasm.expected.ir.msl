SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: UniformBuffer = struct @align(16) {
  unknownInput_S1_c0:f32 @offset(16)
  ucolorRed_S1_c0:vec4<f32> @offset(32)
  ucolorGreen_S1_c0:vec4<f32> @offset(48)
  umatrix_S1:mat3x3<f32> @offset(64)
}

main_out = struct @align(16) {
  sk_FragColor_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_4:ptr<uniform, UniformBuffer, read> = var @binding_point(0, 0)
  %sk_FragColor:ptr<private, vec4<f32>, read_write> = var
  %sk_Clockwise:ptr<private, bool, read_write> = var
  %vcolor_S0:ptr<private, vec4<f32>, read_write> = var
}

%test_int_S1_c0_b = func():bool {
  $B2: {
    %unknown:ptr<function, i32, read_write> = var
    %ok:ptr<function, bool, read_write> = var
    %val:ptr<function, vec4<i32>, read_write> = var
    %x_40:ptr<function, bool, read_write> = var
    %x_41:ptr<function, bool, read_write> = var
    %x_54:ptr<function, bool, read_write> = var
    %x_55:ptr<function, bool, read_write> = var
    %x_65:ptr<function, bool, read_write> = var
    %x_66:ptr<function, bool, read_write> = var
    %15:ptr<uniform, f32, read> = access %x_4, 0u
    %16:f32 = load %15
    %17:i32 = call %tint_f32_to_i32, %16
    %x_27:i32 = let %17
    store %unknown, %x_27
    store %ok, true
    store %x_41, false
    if true [t: $B3] {  # if_1
      $B3: {  # true
        %20:vec4<i32> = construct %x_27
        %21:vec4<i32> = call %tint_div_v4i32, vec4<i32>(0i), %20
        %23:vec4<bool> = eq %21, vec4<i32>(0i)
        %24:bool = all %23
        store %x_40, %24
        %25:bool = load %x_40
        store %x_41, %25
        exit_if  # if_1
      }
    }
    %26:bool = load %x_41
    store %ok, %26
    %27:vec4<i32> = construct %x_27
    %x_44:vec4<i32> = let %27
    store %val, %x_44
    %29:vec4<i32> = add %x_44, vec4<i32>(1i)
    %x_47:vec4<i32> = let %29
    store %val, %x_47
    %31:vec4<i32> = sub %x_47, vec4<i32>(1i)
    %x_48:vec4<i32> = let %31
    store %val, %x_48
    %33:vec4<i32> = add %x_48, vec4<i32>(1i)
    %x_49:vec4<i32> = let %33
    store %val, %x_49
    %35:vec4<i32> = sub %x_49, vec4<i32>(1i)
    %x_50:vec4<i32> = let %35
    store %val, %x_50
    store %x_55, false
    %37:bool = load %x_41
    if %37 [t: $B4] {  # if_2
      $B4: {  # true
        %38:vec4<bool> = eq %x_50, %x_44
        %39:bool = all %38
        store %x_54, %39
        %40:bool = load %x_54
        store %x_55, %40
        exit_if  # if_2
      }
    }
    %41:bool = load %x_55
    store %ok, %41
    %42:vec4<i32> = mul %x_50, vec4<i32>(2i)
    %x_58:vec4<i32> = let %42
    store %val, %x_58
    %44:vec4<i32> = call %tint_div_v4i32, %x_58, vec4<i32>(2i)
    %x_59:vec4<i32> = let %44
    store %val, %x_59
    %46:vec4<i32> = mul %x_59, vec4<i32>(2i)
    %x_60:vec4<i32> = let %46
    store %val, %x_60
    %48:vec4<i32> = call %tint_div_v4i32, %x_60, vec4<i32>(2i)
    %x_61:vec4<i32> = let %48
    store %val, %x_61
    store %x_66, false
    %50:bool = load %x_55
    if %50 [t: $B5] {  # if_3
      $B5: {  # true
        %51:vec4<bool> = eq %x_61, %x_44
        %52:bool = all %51
        store %x_65, %52
        %53:bool = load %x_65
        store %x_66, %53
        exit_if  # if_3
      }
    }
    %54:bool = load %x_66
    store %ok, %54
    %55:bool = load %x_66
    ret %55
  }
}
%main_1 = func():void {
  $B6: {
    %outputColor_S0:ptr<function, vec4<f32>, read_write> = var
    %output_S1:ptr<function, vec4<f32>, read_write> = var
    %x_8_unknown:ptr<function, f32, read_write> = var
    %x_9_ok:ptr<function, bool, read_write> = var
    %x_10_val:ptr<function, vec4<f32>, read_write> = var
    %x_116:ptr<function, vec4<f32>, read_write> = var
    %x_86:ptr<function, bool, read_write> = var
    %x_87:ptr<function, bool, read_write> = var
    %x_99:ptr<function, bool, read_write> = var
    %x_100:ptr<function, bool, read_write> = var
    %x_110:ptr<function, bool, read_write> = var
    %x_111:ptr<function, bool, read_write> = var
    %x_114:ptr<function, bool, read_write> = var
    %x_115:ptr<function, bool, read_write> = var
    %71:vec4<f32> = load %vcolor_S0
    store %outputColor_S0, %71
    %72:ptr<uniform, f32, read> = access %x_4, 0u
    %73:f32 = load %72
    %x_77:f32 = let %73
    store %x_8_unknown, %x_77
    store %x_9_ok, true
    store %x_87, false
    if true [t: $B7] {  # if_4
      $B7: {  # true
        %75:vec4<f32> = construct %x_77
        %76:vec4<f32> = div vec4<f32>(0.0f), %75
        %77:vec4<bool> = eq %76, vec4<f32>(0.0f)
        %78:bool = all %77
        store %x_86, %78
        %79:bool = load %x_86
        store %x_87, %79
        exit_if  # if_4
      }
    }
    %80:bool = load %x_87
    store %x_9_ok, %80
    %81:vec4<f32> = construct %x_77
    %x_89:vec4<f32> = let %81
    store %x_10_val, %x_89
    %83:vec4<f32> = add %x_89, vec4<f32>(1.0f)
    %x_92:vec4<f32> = let %83
    store %x_10_val, %x_92
    %85:vec4<f32> = sub %x_92, vec4<f32>(1.0f)
    %x_93:vec4<f32> = let %85
    store %x_10_val, %x_93
    %87:vec4<f32> = add %x_93, vec4<f32>(1.0f)
    %x_94:vec4<f32> = let %87
    store %x_10_val, %x_94
    %89:vec4<f32> = sub %x_94, vec4<f32>(1.0f)
    %x_95:vec4<f32> = let %89
    store %x_10_val, %x_95
    store %x_100, false
    %91:bool = load %x_87
    if %91 [t: $B8] {  # if_5
      $B8: {  # true
        %92:vec4<bool> = eq %x_95, %x_89
        %93:bool = all %92
        store %x_99, %93
        %94:bool = load %x_99
        store %x_100, %94
        exit_if  # if_5
      }
    }
    %95:bool = load %x_100
    store %x_9_ok, %95
    %96:vec4<f32> = mul %x_95, vec4<f32>(2.0f)
    %x_103:vec4<f32> = let %96
    store %x_10_val, %x_103
    %98:vec4<f32> = div %x_103, vec4<f32>(2.0f)
    %x_104:vec4<f32> = let %98
    store %x_10_val, %x_104
    %100:vec4<f32> = mul %x_104, vec4<f32>(2.0f)
    %x_105:vec4<f32> = let %100
    store %x_10_val, %x_105
    %102:vec4<f32> = div %x_105, vec4<f32>(2.0f)
    %x_106:vec4<f32> = let %102
    store %x_10_val, %x_106
    store %x_111, false
    %104:bool = load %x_100
    if %104 [t: $B9] {  # if_6
      $B9: {  # true
        %105:vec4<bool> = eq %x_106, %x_89
        %106:bool = all %105
        store %x_110, %106
        %107:bool = load %x_110
        store %x_111, %107
        exit_if  # if_6
      }
    }
    %108:bool = load %x_111
    store %x_9_ok, %108
    store %x_115, false
    %109:bool = load %x_111
    if %109 [t: $B10] {  # if_7
      $B10: {  # true
        %110:bool = call %test_int_S1_c0_b
        store %x_114, %110
        %111:bool = load %x_114
        store %x_115, %111
        exit_if  # if_7
      }
    }
    %112:bool = load %x_115
    if %112 [t: $B11, f: $B12] {  # if_8
      $B11: {  # true
        %113:ptr<uniform, vec4<f32>, read> = access %x_4, 2u
        %114:vec4<f32> = load %113
        store %x_116, %114
        exit_if  # if_8
      }
      $B12: {  # false
        %115:ptr<uniform, vec4<f32>, read> = access %x_4, 1u
        %116:vec4<f32> = load %115
        store %x_116, %116
        exit_if  # if_8
      }
    }
    %117:vec4<f32> = load %x_116
    %x_125:vec4<f32> = let %117
    %119:vec4<f32> = load %x_116
    store %output_S1, %119
    store %sk_FragColor, %x_125
    ret
  }
}
%tint_symbol = @fragment func(%sk_Clockwise_param:bool [@front_facing], %vcolor_S0_param:vec4<f32> [@location(0)]):main_out {
  $B13: {
    store %sk_Clockwise, %sk_Clockwise_param
    store %vcolor_S0, %vcolor_S0_param
    %123:void = call %main_1
    %124:vec4<f32> = load %sk_FragColor
    %125:main_out = construct %124
    ret %125
  }
}
%tint_div_v4i32 = func(%lhs:vec4<i32>, %rhs:vec4<i32>):vec4<i32> {
  $B14: {
    %128:vec4<bool> = eq %rhs, vec4<i32>(0i)
    %129:vec4<bool> = eq %lhs, vec4<i32>(-2147483648i)
    %130:vec4<bool> = eq %rhs, vec4<i32>(-1i)
    %131:vec4<bool> = and %129, %130
    %132:vec4<bool> = or %128, %131
    %133:vec4<i32> = select %rhs, vec4<i32>(1i), %132
    %134:vec4<i32> = div %lhs, %133
    ret %134
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B15: {
    %136:i32 = convert %value
    %137:bool = gte %value, -2147483648.0f
    %138:i32 = select -2147483648i, %136, %137
    %139:bool = lte %value, 2147483520.0f
    %140:i32 = select 2147483647i, %138, %139
    ret %140
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
