SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: Uniforms = struct @align(8) {
  u_scale:vec2<f32> @offset(0)
  u_offset:vec2<f32> @offset(8)
}

VertexOutputs = struct @align(16) {
  texcoords:vec2<f32> @offset(0), @location(0)
  position:vec4<f32> @offset(16), @builtin(position)
}

$B1: {  # root
  %uniforms:ptr<uniform, Uniforms, read> = var @binding_point(0, 0)
  %mySampler:ptr<handle, sampler, read> = var @binding_point(0, 1)
  %myTexture:ptr<handle, texture_2d<f32>, read> = var @binding_point(0, 2)
  %continue_execution:ptr<private, bool, read_write> = var, true
}

%vs_main = @vertex func(%VertexIndex:u32 [@vertex_index]):VertexOutputs {
  $B2: {
    %texcoord:ptr<function, array<vec2<f32>, 3>, read_write> = var, array<vec2<f32>, 3>(vec2<f32>(-0.5f, 0.0f), vec2<f32>(1.5f, 0.0f), vec2<f32>(0.5f, 2.0f))
    %output:ptr<function, VertexOutputs, read_write> = var
    %9:ptr<function, vec4<f32>, read_write> = access %output, 1u
    %10:ptr<function, vec2<f32>, read_write> = access %texcoord, %VertexIndex
    %11:vec2<f32> = load %10
    %12:vec2<f32> = mul %11, 2.0f
    %13:vec2<f32> = sub %12, vec2<f32>(1.0f)
    %14:vec4<f32> = construct %13, 0.0f, 1.0f
    store %9, %14
    %15:ptr<uniform, vec2<f32>, read> = access %uniforms, 0u
    %16:f32 = load_vector_element %15, 1u
    %17:bool = lt %16, 0.0f
    %flipY:ptr<function, bool, read_write> = var, %17
    %19:bool = load %flipY
    if %19 [t: $B3, f: $B4] {  # if_1
      $B3: {  # true
        %20:ptr<function, vec2<f32>, read_write> = access %output, 0u
        %21:ptr<function, vec2<f32>, read_write> = access %texcoord, %VertexIndex
        %22:vec2<f32> = load %21
        %23:ptr<uniform, vec2<f32>, read> = access %uniforms, 0u
        %24:vec2<f32> = load %23
        %25:vec2<f32> = mul %22, %24
        %26:ptr<uniform, vec2<f32>, read> = access %uniforms, 1u
        %27:vec2<f32> = load %26
        %28:vec2<f32> = add %25, %27
        %29:vec2<f32> = mul %28, vec2<f32>(1.0f, -1.0f)
        %30:vec2<f32> = add %29, vec2<f32>(0.0f, 1.0f)
        store %20, %30
        exit_if  # if_1
      }
      $B4: {  # false
        %31:ptr<function, vec2<f32>, read_write> = access %output, 0u
        %32:ptr<function, vec2<f32>, read_write> = access %texcoord, %VertexIndex
        %33:vec2<f32> = load %32
        %34:vec2<f32> = mul %33, vec2<f32>(1.0f, -1.0f)
        %35:vec2<f32> = add %34, vec2<f32>(0.0f, 1.0f)
        %36:ptr<uniform, vec2<f32>, read> = access %uniforms, 0u
        %37:vec2<f32> = load %36
        %38:vec2<f32> = mul %35, %37
        %39:ptr<uniform, vec2<f32>, read> = access %uniforms, 1u
        %40:vec2<f32> = load %39
        %41:vec2<f32> = add %38, %40
        store %31, %41
        exit_if  # if_1
      }
    }
    %42:VertexOutputs = load %output
    ret %42
  }
}
%fs_main = @fragment func(%texcoord_1:vec2<f32> [@location(0)]):vec4<f32> [@location(0)] {  # %texcoord_1: 'texcoord'
  $B5: {
    %45:vec2<f32> = clamp %texcoord_1, vec2<f32>(0.0f), vec2<f32>(1.0f)
    %clampedTexcoord:ptr<function, vec2<f32>, read_write> = var, %45
    %47:vec2<f32> = load %clampedTexcoord
    %48:vec2<bool> = eq %47, %texcoord_1
    %49:bool = all %48
    %50:bool = eq %49, false
    if %50 [t: $B6] {  # if_2
      $B6: {  # true
        store %continue_execution, false
        exit_if  # if_2
      }
    }
    %srcColor:ptr<function, vec4<f32>, read_write> = var, vec4<f32>(0.0f)
    %52:vec4<f32> = load %srcColor
    %53:bool = load %continue_execution
    %54:bool = eq %53, false
    if %54 [t: $B7] {  # if_3
      $B7: {  # true
        terminate_invocation
      }
    }
    ret %52
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
