SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %data:ptr<private, array<i32, 10>, read_write> = var
  %temp:ptr<private, array<i32, 10>, read_write> = var
  %x_28:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %continue_execution:ptr<private, bool, read_write> = var, true
}

%merge_i1_i1_i1_ = func(%f:ptr<function, i32, read_write>, %mid:ptr<function, i32, read_write>, %to:ptr<function, i32, read_write>):void {
  $B2: {
    %k:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %15:i32 = load %f
    %x_303:i32 = let %15
    store %k, %x_303
    %17:i32 = load %f
    %x_304:i32 = let %17
    store %i, %x_304
    %19:i32 = load %mid
    %x_305:i32 = let %19
    %21:i32 = add %x_305, 1i
    store %j, %21
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %22:i32 = load %i
        %x_311:i32 = let %22
        %24:i32 = load %mid
        %x_312:i32 = let %24
        %26:i32 = load %j
        %x_314:i32 = let %26
        %28:i32 = load %to
        %x_315:i32 = let %28
        %30:bool = lte %x_311, %x_312
        %31:bool = lte %x_314, %x_315
        %32:bool = and %30, %31
        if %32 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %33:i32 = load %i
        %x_319:i32 = let %33
        %35:ptr<private, i32, read_write> = access %data, %x_319
        %36:i32 = load %35
        %x_321:i32 = let %36
        %38:i32 = load %j
        %x_322:i32 = let %38
        %40:ptr<private, i32, read_write> = access %data, %x_322
        %41:i32 = load %40
        %x_324:i32 = let %41
        %43:bool = lt %x_321, %x_324
        if %43 [t: $B7, f: $B8] {  # if_2
          $B7: {  # true
            %44:i32 = load %k
            %x_329:i32 = let %44
            %46:i32 = add %x_329, 1i
            store %k, %46
            %47:i32 = load %i
            %x_331:i32 = let %47
            %49:i32 = add %x_331, 1i
            store %i, %49
            %50:ptr<private, i32, read_write> = access %data, %x_331
            %51:i32 = load %50
            %x_334:i32 = let %51
            %53:ptr<private, i32, read_write> = access %temp, %x_329
            store %53, %x_334
            exit_if  # if_2
          }
          $B8: {  # false
            %54:i32 = load %k
            %x_336:i32 = let %54
            %56:i32 = add %x_336, 1i
            store %k, %56
            %57:i32 = load %j
            %x_338:i32 = let %57
            %59:i32 = add %x_338, 1i
            store %j, %59
            %60:ptr<private, i32, read_write> = access %data, %x_338
            %61:i32 = load %60
            %x_341:i32 = let %61
            %63:ptr<private, i32, read_write> = access %temp, %x_336
            store %63, %x_341
            exit_if  # if_2
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        next_iteration  # -> $B3
      }
    }
    loop [b: $B9, c: $B10] {  # loop_2
      $B9: {  # body
        %64:i32 = load %i
        %x_347:i32 = let %64
        %66:i32 = load %i
        %x_349:i32 = let %66
        %68:i32 = load %mid
        %x_350:i32 = let %68
        %70:bool = lt %x_347, 10i
        %71:bool = lte %x_349, %x_350
        %72:bool = and %70, %71
        if %72 [t: $B11, f: $B12] {  # if_3
          $B11: {  # true
            exit_if  # if_3
          }
          $B12: {  # false
            exit_loop  # loop_2
          }
        }
        %73:i32 = load %k
        %x_354:i32 = let %73
        %75:i32 = add %x_354, 1i
        store %k, %75
        %76:i32 = load %i
        %x_356:i32 = let %76
        %78:i32 = add %x_356, 1i
        store %i, %78
        %79:ptr<private, i32, read_write> = access %data, %x_356
        %80:i32 = load %79
        %x_359:i32 = let %80
        %82:ptr<private, i32, read_write> = access %temp, %x_354
        store %82, %x_359
        continue  # -> $B10
      }
      $B10: {  # continuing
        next_iteration  # -> $B9
      }
    }
    %83:i32 = load %f
    %x_361:i32 = let %83
    store %i_1, %x_361
    loop [b: $B13, c: $B14] {  # loop_3
      $B13: {  # body
        %85:i32 = load %i_1
        %x_366:i32 = let %85
        %87:i32 = load %to
        %x_367:i32 = let %87
        %89:bool = lte %x_366, %x_367
        if %89 [t: $B15, f: $B16] {  # if_4
          $B15: {  # true
            exit_if  # if_4
          }
          $B16: {  # false
            exit_loop  # loop_3
          }
        }
        %90:i32 = load %i_1
        %x_370:i32 = let %90
        %92:i32 = load %i_1
        %x_371:i32 = let %92
        %94:ptr<private, i32, read_write> = access %temp, %x_371
        %95:i32 = load %94
        %x_373:i32 = let %95
        %97:ptr<private, i32, read_write> = access %data, %x_370
        store %97, %x_373
        continue  # -> $B14
      }
      $B14: {  # continuing
        %98:i32 = load %i_1
        %x_375:i32 = let %98
        %100:i32 = add %x_375, 1i
        store %i_1, %100
        next_iteration  # -> $B13
      }
    }
    ret
  }
}
%main_1 = func():void {
  $B17: {
    %x_85:ptr<function, i32, read_write> = var
    %x_86:ptr<function, i32, read_write> = var
    %x_87:ptr<function, i32, read_write> = var
    %x_88:ptr<function, i32, read_write> = var
    %x_89:ptr<function, i32, read_write> = var
    %x_90:ptr<function, i32, read_write> = var
    %x_91:ptr<function, i32, read_write> = var
    %x_92:ptr<function, i32, read_write> = var
    %x_93:ptr<function, i32, read_write> = var
    %x_94:ptr<function, i32, read_write> = var
    %i_3:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %grey:ptr<function, f32, read_write> = var
    %115:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
    %116:f32 = load_vector_element %115, 0u
    %x_96:f32 = let %116
    %118:i32 = call %tint_f32_to_i32, %x_96
    store %i_3, %118
    loop [b: $B18, c: $B19] {  # loop_4
      $B18: {  # body
        %120:i32 = load %i_3
        %x_102:i32 = let %120
        switch %x_102 [c: (9i, $B20), c: (8i, $B21), c: (7i, $B22), c: (6i, $B23), c: (5i, $B24), c: (4i, $B25), c: (3i, $B26), c: (2i, $B27), c: (1i, $B28), c: (0i, $B29), c: (default, $B30)] {  # switch_1
          $B20: {  # case
            %122:i32 = load %i_3
            %x_132:i32 = let %122
            %124:ptr<private, i32, read_write> = access %data, %x_132
            store %124, -5i
            exit_switch  # switch_1
          }
          $B21: {  # case
            %125:i32 = load %i_3
            %x_130:i32 = let %125
            %127:ptr<private, i32, read_write> = access %data, %x_130
            store %127, -4i
            exit_switch  # switch_1
          }
          $B22: {  # case
            %128:i32 = load %i_3
            %x_128:i32 = let %128
            %130:ptr<private, i32, read_write> = access %data, %x_128
            store %130, -3i
            exit_switch  # switch_1
          }
          $B23: {  # case
            %131:i32 = load %i_3
            %x_126:i32 = let %131
            %133:ptr<private, i32, read_write> = access %data, %x_126
            store %133, -2i
            exit_switch  # switch_1
          }
          $B24: {  # case
            %134:i32 = load %i_3
            %x_124:i32 = let %134
            %136:ptr<private, i32, read_write> = access %data, %x_124
            store %136, -1i
            exit_switch  # switch_1
          }
          $B25: {  # case
            %137:i32 = load %i_3
            %x_122:i32 = let %137
            %139:ptr<private, i32, read_write> = access %data, %x_122
            store %139, 0i
            exit_switch  # switch_1
          }
          $B26: {  # case
            %140:i32 = load %i_3
            %x_120:i32 = let %140
            %142:ptr<private, i32, read_write> = access %data, %x_120
            store %142, 1i
            exit_switch  # switch_1
          }
          $B27: {  # case
            %143:i32 = load %i_3
            %x_118:i32 = let %143
            %145:ptr<private, i32, read_write> = access %data, %x_118
            store %145, 2i
            exit_switch  # switch_1
          }
          $B28: {  # case
            %146:i32 = load %i_3
            %x_116:i32 = let %146
            %148:ptr<private, i32, read_write> = access %data, %x_116
            store %148, 3i
            exit_switch  # switch_1
          }
          $B29: {  # case
            %149:i32 = load %i_3
            %x_114:i32 = let %149
            %151:ptr<private, i32, read_write> = access %data, %x_114
            store %151, 4i
            exit_switch  # switch_1
          }
          $B30: {  # case
            exit_switch  # switch_1
          }
        }
        %152:i32 = load %i_3
        %x_134:i32 = let %152
        %154:i32 = add %x_134, 1i
        store %i_3, %154
        continue  # -> $B19
      }
      $B19: {  # continuing
        %155:i32 = load %i_3
        %x_136:i32 = let %155
        %157:bool = lt %x_136, 10i
        %158:bool = eq %157, false
        break_if %158  # -> [t: exit_loop loop_4, f: $B18]
      }
    }
    store %j_1, 0i
    loop [b: $B31, c: $B32] {  # loop_5
      $B31: {  # body
        %159:i32 = load %j_1
        %x_142:i32 = let %159
        %161:bool = lt %x_142, 10i
        if %161 [t: $B33, f: $B34] {  # if_5
          $B33: {  # true
            exit_if  # if_5
          }
          $B34: {  # false
            exit_loop  # loop_5
          }
        }
        %162:i32 = load %j_1
        %x_145:i32 = let %162
        %164:i32 = load %j_1
        %x_146:i32 = let %164
        %166:ptr<private, i32, read_write> = access %data, %x_146
        %167:i32 = load %166
        %x_148:i32 = let %167
        %169:ptr<private, i32, read_write> = access %temp, %x_145
        store %169, %x_148
        continue  # -> $B32
      }
      $B32: {  # continuing
        %170:i32 = load %j_1
        %x_150:i32 = let %170
        %172:i32 = add %x_150, 1i
        store %j_1, %172
        next_iteration  # -> $B31
      }
    }
    store %x_94, 0i
    store %x_93, 9i
    store %x_92, 1i
    loop [b: $B35, c: $B36] {  # loop_6
      $B35: {  # body
        %173:i32 = load %x_92
        %x_156:i32 = let %173
        %175:i32 = load %x_93
        %x_157:i32 = let %175
        %177:bool = lte %x_156, %x_157
        if %177 [t: $B37, f: $B38] {  # if_6
          $B37: {  # true
            exit_if  # if_6
          }
          $B38: {  # false
            exit_loop  # loop_6
          }
        }
        %178:i32 = load %x_94
        %x_160:i32 = let %178
        store %x_91, %x_160
        loop [b: $B39, c: $B40] {  # loop_7
          $B39: {  # body
            %180:i32 = load %x_91
            %x_165:i32 = let %180
            %182:i32 = load %x_93
            %x_166:i32 = let %182
            %184:bool = lt %x_165, %x_166
            if %184 [t: $B41, f: $B42] {  # if_7
              $B41: {  # true
                exit_if  # if_7
              }
              $B42: {  # false
                exit_loop  # loop_7
              }
            }
            %185:i32 = load %x_91
            %x_169:i32 = let %185
            store %x_90, %x_169
            %187:i32 = load %x_91
            %x_170:i32 = let %187
            %189:i32 = load %x_92
            %x_171:i32 = let %189
            %191:array<i32, 10> = load %data
            %x_173:array<i32, 10> = let %191
            store %data, array<i32, 10>(0i)
            store %data, %x_173
            %193:i32 = add %x_170, %x_171
            %194:i32 = sub %193, 1i
            store %x_89, %194
            %195:i32 = load %x_91
            %x_175:i32 = let %195
            %197:i32 = load %x_92
            %x_176:i32 = let %197
            %199:i32 = load %x_93
            %x_180:i32 = let %199
            %201:i32 = mul 2i, %x_176
            %202:i32 = add %x_175, %201
            %203:i32 = sub %202, 1i
            %204:i32 = min %203, %x_180
            store %x_88, %204
            %205:i32 = load %x_90
            %x_182:i32 = let %205
            store %x_87, %x_182
            %207:i32 = load %x_89
            %x_183:i32 = let %207
            store %x_86, %x_183
            %209:i32 = load %x_88
            %x_184:i32 = let %209
            store %x_85, %x_184
            %211:void = call %merge_i1_i1_i1_, %x_87, %x_86, %x_85
            continue  # -> $B40
          }
          $B40: {  # continuing
            %212:i32 = load %x_92
            %x_186:i32 = let %212
            %214:i32 = load %x_91
            %x_188:i32 = let %214
            %216:i32 = mul 2i, %x_186
            %217:i32 = add %x_188, %216
            store %x_91, %217
            next_iteration  # -> $B39
          }
        }
        continue  # -> $B36
      }
      $B36: {  # continuing
        %218:i32 = load %x_92
        %x_190:i32 = let %218
        %220:i32 = mul 2i, %x_190
        store %x_92, %220
        next_iteration  # -> $B35
      }
    }
    %221:f32 = load_vector_element %gl_FragCoord, 1u
    %x_194:f32 = let %221
    %223:i32 = call %tint_f32_to_i32, %x_194
    %224:bool = lt %223, 30i
    if %224 [t: $B43, f: $B44] {  # if_8
      $B43: {  # true
        %225:ptr<private, i32, read_write> = access %data, 0i
        %226:i32 = load %225
        %x_201:i32 = let %226
        %228:f32 = convert %x_201
        %229:f32 = div %228, 10.0f
        %230:f32 = add 0.5f, %229
        store %grey, %230
        exit_if  # if_8
      }
      $B44: {  # false
        %231:f32 = load_vector_element %gl_FragCoord, 1u
        %x_206:f32 = let %231
        %233:i32 = call %tint_f32_to_i32, %x_206
        %234:bool = lt %233, 60i
        if %234 [t: $B45, f: $B46] {  # if_9
          $B45: {  # true
            %235:ptr<private, i32, read_write> = access %data, 1i
            %236:i32 = load %235
            %x_213:i32 = let %236
            %238:f32 = convert %x_213
            %239:f32 = div %238, 10.0f
            %240:f32 = add 0.5f, %239
            store %grey, %240
            exit_if  # if_9
          }
          $B46: {  # false
            %241:f32 = load_vector_element %gl_FragCoord, 1u
            %x_218:f32 = let %241
            %243:i32 = call %tint_f32_to_i32, %x_218
            %244:bool = lt %243, 90i
            if %244 [t: $B47, f: $B48] {  # if_10
              $B47: {  # true
                %245:ptr<private, i32, read_write> = access %data, 2i
                %246:i32 = load %245
                %x_225:i32 = let %246
                %248:f32 = convert %x_225
                %249:f32 = div %248, 10.0f
                %250:f32 = add 0.5f, %249
                store %grey, %250
                exit_if  # if_10
              }
              $B48: {  # false
                %251:f32 = load_vector_element %gl_FragCoord, 1u
                %x_230:f32 = let %251
                %253:i32 = call %tint_f32_to_i32, %x_230
                %254:bool = lt %253, 120i
                if %254 [t: $B49, f: $B50] {  # if_11
                  $B49: {  # true
                    %255:ptr<private, i32, read_write> = access %data, 3i
                    %256:i32 = load %255
                    %x_237:i32 = let %256
                    %258:f32 = convert %x_237
                    %259:f32 = div %258, 10.0f
                    %260:f32 = add 0.5f, %259
                    store %grey, %260
                    exit_if  # if_11
                  }
                  $B50: {  # false
                    %261:f32 = load_vector_element %gl_FragCoord, 1u
                    %x_242:f32 = let %261
                    %263:i32 = call %tint_f32_to_i32, %x_242
                    %264:bool = lt %263, 150i
                    if %264 [t: $B51, f: $B52] {  # if_12
                      $B51: {  # true
                        store %continue_execution, false
                        exit_if  # if_12
                      }
                      $B52: {  # false
                        %265:f32 = load_vector_element %gl_FragCoord, 1u
                        %x_249:f32 = let %265
                        %267:i32 = call %tint_f32_to_i32, %x_249
                        %268:bool = lt %267, 180i
                        if %268 [t: $B53, f: $B54] {  # if_13
                          $B53: {  # true
                            %269:ptr<private, i32, read_write> = access %data, 5i
                            %270:i32 = load %269
                            %x_256:i32 = let %270
                            %272:f32 = convert %x_256
                            %273:f32 = div %272, 10.0f
                            %274:f32 = add 0.5f, %273
                            store %grey, %274
                            exit_if  # if_13
                          }
                          $B54: {  # false
                            %275:f32 = load_vector_element %gl_FragCoord, 1u
                            %x_261:f32 = let %275
                            %277:i32 = call %tint_f32_to_i32, %x_261
                            %278:bool = lt %277, 210i
                            if %278 [t: $B55, f: $B56] {  # if_14
                              $B55: {  # true
                                %279:ptr<private, i32, read_write> = access %data, 6i
                                %280:i32 = load %279
                                %x_268:i32 = let %280
                                %282:f32 = convert %x_268
                                %283:f32 = div %282, 10.0f
                                %284:f32 = add 0.5f, %283
                                store %grey, %284
                                exit_if  # if_14
                              }
                              $B56: {  # false
                                %285:f32 = load_vector_element %gl_FragCoord, 1u
                                %x_273:f32 = let %285
                                %287:i32 = call %tint_f32_to_i32, %x_273
                                %288:bool = lt %287, 240i
                                if %288 [t: $B57, f: $B58] {  # if_15
                                  $B57: {  # true
                                    %289:ptr<private, i32, read_write> = access %data, 7i
                                    %290:i32 = load %289
                                    %x_280:i32 = let %290
                                    %292:f32 = convert %x_280
                                    %293:f32 = div %292, 10.0f
                                    %294:f32 = add 0.5f, %293
                                    store %grey, %294
                                    exit_if  # if_15
                                  }
                                  $B58: {  # false
                                    %295:f32 = load_vector_element %gl_FragCoord, 1u
                                    %x_285:f32 = let %295
                                    %297:i32 = call %tint_f32_to_i32, %x_285
                                    %298:bool = lt %297, 270i
                                    if %298 [t: $B59, f: $B60] {  # if_16
                                      $B59: {  # true
                                        %299:ptr<private, i32, read_write> = access %data, 8i
                                        %300:i32 = load %299
                                        %x_292:i32 = let %300
                                        %302:f32 = convert %x_292
                                        %303:f32 = div %302, 10.0f
                                        %304:f32 = add 0.5f, %303
                                        store %grey, %304
                                        exit_if  # if_16
                                      }
                                      $B60: {  # false
                                        store %continue_execution, false
                                        exit_if  # if_16
                                      }
                                    }
                                    exit_if  # if_15
                                  }
                                }
                                exit_if  # if_14
                              }
                            }
                            exit_if  # if_13
                          }
                        }
                        exit_if  # if_12
                      }
                    }
                    exit_if  # if_11
                  }
                }
                exit_if  # if_10
              }
            }
            exit_if  # if_9
          }
        }
        exit_if  # if_8
      }
    }
    %305:f32 = load %grey
    %x_296:f32 = let %305
    %307:vec3<f32> = construct %x_296, %x_296, %x_296
    %x_297:vec3<f32> = let %307
    %309:f32 = access %x_297, 0u
    %310:f32 = access %x_297, 1u
    %311:f32 = access %x_297, 2u
    %312:vec4<f32> = construct %309, %310, %311, 1.0f
    store %x_GLF_color, %312
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B61: {
    store %gl_FragCoord, %gl_FragCoord_param
    %315:void = call %main_1
    %316:vec4<f32> = load %x_GLF_color
    %317:main_out = construct %316
    %318:bool = load %continue_execution
    %319:bool = eq %318, false
    if %319 [t: $B62] {  # if_17
      $B62: {  # true
        terminate_invocation
      }
    }
    ret %317
  }
}
%mergeSort_ = func():void {
  $B63: {
    %low:ptr<function, i32, read_write> = var
    %high:ptr<function, i32, read_write> = var
    %m:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %f_1:ptr<function, i32, read_write> = var
    %mid_1:ptr<function, i32, read_write> = var
    %to_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    store %low, 0i
    store %high, 9i
    store %m, 1i
    loop [b: $B64, c: $B65] {  # loop_8
      $B64: {  # body
        %331:i32 = load %m
        %x_382:i32 = let %331
        %333:i32 = load %high
        %x_383:i32 = let %333
        %335:bool = lte %x_382, %x_383
        if %335 [t: $B66, f: $B67] {  # if_18
          $B66: {  # true
            exit_if  # if_18
          }
          $B67: {  # false
            exit_loop  # loop_8
          }
        }
        %336:i32 = load %low
        %x_386:i32 = let %336
        store %i_2, %x_386
        loop [b: $B68, c: $B69] {  # loop_9
          $B68: {  # body
            %338:i32 = load %i_2
            %x_391:i32 = let %338
            %340:i32 = load %high
            %x_392:i32 = let %340
            %342:bool = lt %x_391, %x_392
            if %342 [t: $B70, f: $B71] {  # if_19
              $B70: {  # true
                exit_if  # if_19
              }
              $B71: {  # false
                exit_loop  # loop_9
              }
            }
            %343:i32 = load %i_2
            %x_395:i32 = let %343
            store %f_1, %x_395
            %345:i32 = load %i_2
            %x_396:i32 = let %345
            %347:i32 = load %m
            %x_397:i32 = let %347
            %349:i32 = add %x_396, %x_397
            %350:i32 = sub %349, 1i
            store %mid_1, %350
            %351:i32 = load %i_2
            %x_400:i32 = let %351
            %353:i32 = load %m
            %x_401:i32 = let %353
            %355:i32 = load %high
            %x_405:i32 = let %355
            %357:i32 = mul 2i, %x_401
            %358:i32 = add %x_400, %357
            %359:i32 = sub %358, 1i
            %360:i32 = min %359, %x_405
            store %to_1, %360
            %361:i32 = load %f_1
            %x_407:i32 = let %361
            store %param, %x_407
            %363:i32 = load %mid_1
            %x_408:i32 = let %363
            store %param_1, %x_408
            %365:i32 = load %to_1
            %x_409:i32 = let %365
            store %param_2, %x_409
            %367:void = call %merge_i1_i1_i1_, %param, %param_1, %param_2
            continue  # -> $B69
          }
          $B69: {  # continuing
            %368:i32 = load %m
            %x_411:i32 = let %368
            %370:i32 = load %i_2
            %x_413:i32 = let %370
            %372:i32 = mul 2i, %x_411
            %373:i32 = add %x_413, %372
            store %i_2, %373
            next_iteration  # -> $B68
          }
        }
        continue  # -> $B65
      }
      $B65: {  # continuing
        %374:i32 = load %m
        %x_415:i32 = let %374
        %376:i32 = mul 2i, %x_415
        store %m, %376
        next_iteration  # -> $B64
      }
    }
    ret
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B72: {
    %378:i32 = convert %value
    %379:bool = gte %value, -2147483648.0f
    %380:i32 = select -2147483648i, %378, %379
    %381:bool = lte %value, 2147483520.0f
    %382:i32 = select 2147483647i, %380, %381
    ret %382
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
