SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_15:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%cross2d_vf2_vf2_ = func(%a:ptr<function, vec2<f32>, read_write>, %b:ptr<function, vec2<f32>, read_write>):f32 {
  $B2: {
    %7:f32 = load_vector_element %a, 0u
    %x_85:f32 = let %7
    %9:f32 = load_vector_element %b, 1u
    %x_87:f32 = let %9
    %11:f32 = load_vector_element %b, 0u
    %x_90:f32 = let %11
    %13:f32 = load_vector_element %a, 1u
    %x_92:f32 = let %13
    %15:f32 = mul %x_85, %x_87
    %16:f32 = mul %x_90, %x_92
    %17:f32 = sub %15, %16
    ret %17
  }
}
%pointInTriangle_vf2_vf2_vf2_vf2_ = func(%p:ptr<function, vec2<f32>, read_write>, %a_1:ptr<function, vec2<f32>, read_write>, %b_1:ptr<function, vec2<f32>, read_write>, %c:ptr<function, vec2<f32>, read_write>):i32 {
  $B3: {
    %var_y:ptr<function, f32, read_write> = var
    %x_96:ptr<function, f32, read_write> = var
    %x_97:ptr<function, f32, read_write> = var
    %clamp_y:ptr<function, f32, read_write> = var
    %pab:ptr<function, f32, read_write> = var
    %param:ptr<function, vec2<f32>, read_write> = var
    %param_1:ptr<function, vec2<f32>, read_write> = var
    %pbc:ptr<function, f32, read_write> = var
    %param_2:ptr<function, vec2<f32>, read_write> = var
    %param_3:ptr<function, vec2<f32>, read_write> = var
    %pca:ptr<function, f32, read_write> = var
    %param_4:ptr<function, vec2<f32>, read_write> = var
    %param_5:ptr<function, vec2<f32>, read_write> = var
    %x_173:ptr<function, bool, read_write> = var
    %x_174:ptr<function, bool, read_write> = var
    %x_205:ptr<function, bool, read_write> = var
    %x_206:ptr<function, bool, read_write> = var
    %40:ptr<uniform, vec2<f32>, read> = access %x_15, 0u
    %41:f32 = load_vector_element %40, 0u
    %42:ptr<uniform, vec2<f32>, read> = access %x_15, 0u
    %43:f32 = load_vector_element %42, 1u
    %44:bool = eq %41, %43
    if %44 [t: $B4, f: $B5] {  # if_1
      $B4: {  # true
        %45:f32 = load_vector_element %c, 1u
        %x_107:f32 = let %45
        %47:vec2<f32> = construct 0.0f, %x_107
        %x_108:vec2<f32> = let %47
        if true [t: $B6, f: $B7] {  # if_2
          $B6: {  # true
            %49:f32 = load_vector_element %c, 1u
            store %x_97, %49
            exit_if  # if_2
          }
          $B7: {  # false
            store %x_97, 1.0f
            exit_if  # if_2
          }
        }
        %50:f32 = load %x_97
        %51:f32 = load_vector_element %c, 1u
        %52:f32 = max %50, %51
        %53:vec2<f32> = construct 1.0f, %52
        %x_116:vec2<f32> = let %53
        %55:vec2<f32> = swizzle %x_108, xy
        %x_117:vec2<f32> = let %55
        store %x_96, %x_107
        exit_if  # if_1
      }
      $B5: {  # false
        store %x_96, -1.0f
        exit_if  # if_1
      }
    }
    %57:f32 = load %x_96
    store %var_y, %57
    %58:f32 = load_vector_element %c, 1u
    %59:f32 = load_vector_element %c, 1u
    %60:f32 = load %var_y
    %61:f32 = clamp %58, %59, %60
    store %clamp_y, %61
    %62:f32 = load_vector_element %b_1, 0u
    %x_136:f32 = let %62
    %64:f32 = load_vector_element %a_1, 0u
    %x_137:f32 = let %64
    %66:f32 = load_vector_element %b_1, 1u
    %x_140:f32 = let %66
    %68:f32 = load_vector_element %a_1, 1u
    %x_141:f32 = let %68
    %70:f32 = load_vector_element %p, 0u
    %71:f32 = load_vector_element %a_1, 0u
    %72:f32 = sub %70, %71
    %73:f32 = load_vector_element %p, 1u
    %74:f32 = load_vector_element %a_1, 1u
    %75:f32 = sub %73, %74
    %76:vec2<f32> = construct %72, %75
    store %param, %76
    %77:f32 = sub %x_136, %x_137
    %78:f32 = sub %x_140, %x_141
    %79:vec2<f32> = construct %77, %78
    store %param_1, %79
    %80:f32 = call %cross2d_vf2_vf2_, %param, %param_1
    %x_144:f32 = let %80
    store %pab, %x_144
    %82:f32 = load_vector_element %c, 0u
    %x_153:f32 = let %82
    %84:f32 = load_vector_element %b_1, 0u
    %x_154:f32 = let %84
    %86:f32 = load %clamp_y
    %x_156:f32 = let %86
    %88:f32 = load_vector_element %b_1, 1u
    %x_157:f32 = let %88
    %90:f32 = load_vector_element %p, 0u
    %91:f32 = load_vector_element %b_1, 0u
    %92:f32 = sub %90, %91
    %93:f32 = load_vector_element %p, 1u
    %94:f32 = load_vector_element %b_1, 1u
    %95:f32 = sub %93, %94
    %96:vec2<f32> = construct %92, %95
    store %param_2, %96
    %97:f32 = sub %x_153, %x_154
    %98:f32 = sub %x_156, %x_157
    %99:vec2<f32> = construct %97, %98
    store %param_3, %99
    %100:f32 = call %cross2d_vf2_vf2_, %param_2, %param_3
    %x_160:f32 = let %100
    store %pbc, %x_160
    %102:f32 = load %pab
    %103:bool = lt %102, 0.0f
    %104:f32 = load %pbc
    %105:bool = lt %104, 0.0f
    %106:bool = and %103, %105
    %x_165:bool = let %106
    store %x_174, %x_165
    %108:bool = eq %x_165, false
    if %108 [t: $B8] {  # if_3
      $B8: {  # true
        %109:f32 = load %pab
        %110:bool = gte %109, 0.0f
        %111:f32 = load %pbc
        %112:bool = gte %111, 0.0f
        %113:bool = and %110, %112
        store %x_173, %113
        %114:bool = load %x_173
        store %x_174, %114
        exit_if  # if_3
      }
    }
    %115:bool = load %x_174
    %116:bool = eq %115, false
    if %116 [t: $B9] {  # if_4
      $B9: {  # true
        ret 0i
      }
    }
    %117:f32 = load_vector_element %a_1, 0u
    %x_185:f32 = let %117
    %119:f32 = load_vector_element %c, 0u
    %x_186:f32 = let %119
    %121:f32 = load_vector_element %a_1, 1u
    %x_188:f32 = let %121
    %123:f32 = load_vector_element %c, 1u
    %x_189:f32 = let %123
    %125:f32 = load_vector_element %p, 0u
    %126:f32 = load_vector_element %c, 0u
    %127:f32 = sub %125, %126
    %128:f32 = load_vector_element %p, 1u
    %129:f32 = load_vector_element %c, 1u
    %130:f32 = sub %128, %129
    %131:vec2<f32> = construct %127, %130
    store %param_4, %131
    %132:f32 = sub %x_185, %x_186
    %133:f32 = sub %x_188, %x_189
    %134:vec2<f32> = construct %132, %133
    store %param_5, %134
    %135:f32 = call %cross2d_vf2_vf2_, %param_4, %param_5
    %x_192:f32 = let %135
    store %pca, %x_192
    %137:f32 = load %pab
    %138:bool = lt %137, 0.0f
    %139:f32 = load %pca
    %140:bool = lt %139, 0.0f
    %141:bool = and %138, %140
    %x_197:bool = let %141
    store %x_206, %x_197
    %143:bool = eq %x_197, false
    if %143 [t: $B10] {  # if_5
      $B10: {  # true
        %144:f32 = load %pab
        %145:bool = gte %144, 0.0f
        %146:f32 = load %pca
        %147:bool = gte %146, 0.0f
        %148:bool = and %145, %147
        store %x_205, %148
        %149:bool = load %x_205
        store %x_206, %149
        exit_if  # if_5
      }
    }
    %150:bool = load %x_206
    %151:bool = eq %150, false
    if %151 [t: $B11] {  # if_6
      $B11: {  # true
        ret 0i
      }
    }
    ret 1i
  }
}
%main_1 = func():void {
  $B12: {
    %pos:ptr<function, vec2<f32>, read_write> = var
    %param_6:ptr<function, vec2<f32>, read_write> = var
    %param_7:ptr<function, vec2<f32>, read_write> = var
    %param_8:ptr<function, vec2<f32>, read_write> = var
    %param_9:ptr<function, vec2<f32>, read_write> = var
    %158:vec4<f32> = load %gl_FragCoord
    %159:vec2<f32> = swizzle %158, xy
    %160:ptr<uniform, vec2<f32>, read> = access %x_15, 0u
    %161:vec2<f32> = load %160
    %162:vec2<f32> = div %159, %161
    store %pos, %162
    %163:vec2<f32> = load %pos
    store %param_6, %163
    store %param_7, vec2<f32>(0.69999998807907104492f, 0.30000001192092895508f)
    store %param_8, vec2<f32>(0.5f, 0.89999997615814208984f)
    store %param_9, vec2<f32>(0.10000000149011611938f, 0.40000000596046447754f)
    %164:i32 = call %pointInTriangle_vf2_vf2_vf2_vf2_, %param_6, %param_7, %param_8, %param_9
    %x_78:i32 = let %164
    %166:bool = eq %x_78, 1i
    if %166 [t: $B13, f: $B14] {  # if_7
      $B13: {  # true
        store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
        exit_if  # if_7
      }
      $B14: {  # false
        store %x_GLF_color, vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f)
        exit_if  # if_7
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B15: {
    store %gl_FragCoord, %gl_FragCoord_param
    %169:void = call %main_1
    %170:vec4<f32> = load %x_GLF_color
    %171:main_out = construct %170
    ret %171
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
