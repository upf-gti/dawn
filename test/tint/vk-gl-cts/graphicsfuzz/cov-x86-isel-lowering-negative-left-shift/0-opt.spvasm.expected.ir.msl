SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 3> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 4> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_9:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %A:ptr<function, array<f32, 2>, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %x_101:ptr<function, bool, read_write> = var
    %x_102:ptr<function, bool, read_write> = var
    %10:ptr<function, f32, read_write> = access %A, 0i
    %11:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
    %12:f32 = load %11
    store %10, %12
    %13:ptr<function, f32, read_write> = access %A, 1i
    %14:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
    %15:f32 = load %14
    store %13, %15
    %16:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
    %17:i32 = load %16
    store %i, %17
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %18:i32 = load %i
        %19:ptr<uniform, i32, read> = access %x_9, 0u, 3i, 0u
        %20:i32 = load %19
        %21:bool = lt %18, %20
        if %21 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %22:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
        %23:i32 = load %22
        store %j, %23
        loop [b: $B7, c: $B8] {  # loop_2
          $B7: {  # body
            %24:i32 = load %j
            %25:ptr<uniform, i32, read> = access %x_9, 0u, 2i, 0u
            %26:i32 = load %25
            %27:bool = lt %24, %26
            if %27 [t: $B9, f: $B10] {  # if_2
              $B9: {  # true
                exit_if  # if_2
              }
              $B10: {  # false
                exit_loop  # loop_2
              }
            }
            %28:i32 = load %j
            %x_66:i32 = let %28
            switch %x_66 [c: (1i, $B11), c: (0i, $B12), c: (default, $B13)] {  # switch_1
              $B11: {  # case
                %30:i32 = load %i
                %x_78:i32 = let %30
                %32:ptr<function, f32, read_write> = access %A, %x_78
                %33:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
                %34:f32 = load %33
                store %32, %34
                exit_switch  # switch_1
              }
              $B12: {  # case
                %35:i32 = load %i
                %36:bool = lt -2147483648i, %35
                if %36 [t: $B14] {  # if_3
                  $B14: {  # true
                    continue  # -> $B8
                  }
                }
                %37:i32 = load %i
                %x_74:i32 = let %37
                %39:ptr<function, f32, read_write> = access %A, %x_74
                %40:ptr<uniform, f32, read> = access %x_6, 0u, 2i, 0u
                %41:f32 = load %40
                store %39, %41
                exit_switch  # switch_1
              }
              $B13: {  # case
                exit_switch  # switch_1
              }
            }
            continue  # -> $B8
          }
          $B8: {  # continuing
            %42:i32 = load %j
            %43:i32 = add %42, 1i
            store %j, %43
            next_iteration  # -> $B7
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %44:i32 = load %i
        %45:i32 = add %44, 1i
        store %i, %45
        next_iteration  # -> $B3
      }
    }
    %46:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
    %47:i32 = load %46
    %48:ptr<function, f32, read_write> = access %A, %47
    %49:f32 = load %48
    %50:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
    %51:f32 = load %50
    %52:bool = eq %49, %51
    %x_92:bool = let %52
    store %x_102, %x_92
    if %x_92 [t: $B15] {  # if_4
      $B15: {  # true
        %54:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
        %55:i32 = load %54
        %56:ptr<function, f32, read_write> = access %A, %55
        %57:f32 = load %56
        %58:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
        %59:f32 = load %58
        %60:bool = eq %57, %59
        store %x_101, %60
        %61:bool = load %x_101
        store %x_102, %61
        exit_if  # if_4
      }
    }
    %62:bool = load %x_102
    if %62 [t: $B16, f: $B17] {  # if_5
      $B16: {  # true
        %63:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
        %64:i32 = load %63
        %65:f32 = convert %64
        %66:f32 = let %65
        %67:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
        %68:i32 = load %67
        %69:f32 = convert %68
        %70:f32 = let %69
        %71:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
        %72:i32 = load %71
        %73:f32 = convert %72
        %74:f32 = let %73
        %75:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
        %76:i32 = load %75
        %77:f32 = convert %76
        %78:vec4<f32> = construct %66, %70, %74, %77
        store %x_GLF_color, %78
        exit_if  # if_5
      }
      $B17: {  # false
        %79:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
        %80:i32 = load %79
        %81:f32 = convert %80
        %82:vec4<f32> = construct %81
        store %x_GLF_color, %82
        exit_if  # if_5
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B18: {
    %84:void = call %main_1
    %85:vec4<f32> = load %x_GLF_color
    %86:main_out = construct %85
    ret %86
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
