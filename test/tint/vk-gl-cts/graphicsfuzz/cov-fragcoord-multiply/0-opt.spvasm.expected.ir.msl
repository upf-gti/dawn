SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 4> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_6:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_9:ptr<uniform, buf0, read> = var @binding_point(0, 0)
}

%main_1 = func():void {
  $B2: {
    %icoord:ptr<function, vec2<i32>, read_write> = var
    %x_40:ptr<function, f32, read_write> = var
    %icoord_1:ptr<function, vec2<i32>, read_write> = var
    %9:f32 = load_vector_element %gl_FragCoord, 0u
    %10:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
    %11:f32 = load %10
    %12:f32 = mul %9, %11
    %13:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
    %14:f32 = load %13
    %15:bool = gt %12, %14
    if %15 [t: $B3, f: $B4] {  # if_1
      $B3: {  # true
        %16:vec4<f32> = load %gl_FragCoord
        %17:vec2<f32> = swizzle %16, xy
        %18:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
        %19:f32 = load %18
        %20:vec2<f32> = mul %17, %19
        %21:vec2<f32> = let %20
        %22:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
        %23:f32 = load %22
        %24:ptr<uniform, f32, read> = access %x_6, 0u, 2i, 0u
        %25:f32 = load %24
        %26:vec2<f32> = construct %23, %25
        %27:vec2<f32> = sub %21, %26
        %28:vec2<i32> = call %tint_v2f32_to_v2i32, %27
        store %icoord, %28
        %30:ptr<uniform, f32, read> = access %x_6, 0u, 2i, 0u
        %31:f32 = load %30
        %x_65:f32 = let %31
        %33:ptr<uniform, f32, read> = access %x_6, 0u, 3i, 0u
        %34:f32 = load %33
        %x_67:f32 = let %34
        %36:i32 = load_vector_element %icoord, 0u
        %37:i32 = load_vector_element %icoord, 1u
        %38:i32 = mul %36, %37
        %39:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
        %40:i32 = load %39
        %41:bool = neq %38, %40
        if %41 [t: $B5, f: $B6] {  # if_2
          $B5: {  # true
            %42:ptr<uniform, f32, read> = access %x_6, 0u, 3i, 0u
            %43:f32 = load %42
            store %x_40, %43
            exit_if  # if_2
          }
          $B6: {  # false
            %44:ptr<uniform, f32, read> = access %x_6, 0u, 2i, 0u
            %45:f32 = load %44
            store %x_40, %45
            exit_if  # if_2
          }
        }
        %46:f32 = load %x_40
        %47:f32 = let %46
        %48:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
        %49:i32 = load %48
        %50:f32 = convert %49
        %51:vec4<f32> = construct %x_65, %x_67, %47, %50
        store %x_GLF_color, %51
        exit_if  # if_1
      }
      $B4: {  # false
        %52:vec4<f32> = load %gl_FragCoord
        %53:vec2<f32> = swizzle %52, xy
        %54:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
        %55:f32 = load %54
        %56:vec2<f32> = mul %53, %55
        %57:vec2<f32> = let %56
        %58:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
        %59:f32 = load %58
        %60:ptr<uniform, f32, read> = access %x_6, 0u, 2i, 0u
        %61:f32 = load %60
        %62:vec2<f32> = construct %59, %61
        %63:vec2<f32> = sub %57, %62
        %64:vec2<i32> = call %tint_v2f32_to_v2i32, %63
        store %icoord_1, %64
        %65:ptr<uniform, f32, read> = access %x_6, 0u, 3i, 0u
        %66:f32 = load %65
        %67:f32 = let %66
        %68:ptr<uniform, f32, read> = access %x_6, 0u, 3i, 0u
        %69:f32 = load %68
        %70:f32 = let %69
        %71:i32 = load_vector_element %icoord_1, 0u
        %72:f32 = convert %71
        %73:ptr<uniform, f32, read> = access %x_6, 0u, 3i, 0u
        %74:f32 = load %73
        %75:vec4<f32> = construct %67, %70, %72, %74
        store %x_GLF_color, %75
        exit_if  # if_1
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B7: {
    store %gl_FragCoord, %gl_FragCoord_param
    %78:void = call %main_1
    %79:vec4<f32> = load %x_GLF_color
    %80:main_out = construct %79
    ret %80
  }
}
%tint_v2f32_to_v2i32 = func(%value:vec2<f32>):vec2<i32> {
  $B8: {
    %82:vec2<i32> = convert %value
    %83:vec2<bool> = gte %value, vec2<f32>(-2147483648.0f)
    %84:vec2<i32> = select vec2<i32>(-2147483648i), %82, %83
    %85:vec2<bool> = lte %value, vec2<f32>(2147483520.0f)
    %86:vec2<i32> = select vec2<i32>(2147483647i), %84, %85
    ret %86
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
