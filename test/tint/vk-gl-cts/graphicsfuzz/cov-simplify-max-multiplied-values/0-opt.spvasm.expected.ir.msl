SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 5> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    %A:ptr<function, array<i32, 4>, read_write> = var
    %x_77:ptr<function, bool, read_write> = var
    %x_78:ptr<function, bool, read_write> = var
    %x_87:ptr<function, bool, read_write> = var
    %x_88:ptr<function, bool, read_write> = var
    %x_97:ptr<function, bool, read_write> = var
    %x_98:ptr<function, bool, read_write> = var
    %12:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %13:i32 = load %12
    store %i, %13
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %14:i32 = load %i
        %15:ptr<uniform, i32, read> = access %x_6, 0u, 4i, 0u
        %16:i32 = load %15
        %17:bool = lt %14, %16
        if %17 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %18:i32 = load %i
        %x_43:i32 = let %18
        %20:ptr<function, i32, read_write> = access %A, %x_43
        %21:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %22:i32 = load %21
        store %20, %22
        %23:i32 = load %i
        %24:i32 = mul 2i, %23
        %25:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %26:i32 = load %25
        %27:i32 = mul 2i, %26
        %28:i32 = max %24, %27
        %29:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %30:i32 = load %29
        %31:bool = eq %28, %30
        if %31 [t: $B7] {  # if_2
          $B7: {  # true
            %32:i32 = load %i
            %x_58:i32 = let %32
            %34:ptr<function, i32, read_write> = access %A, %x_58
            store %34, 1i
            exit_if  # if_2
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %35:i32 = load %i
        %36:i32 = add %35, 1i
        store %i, %36
        next_iteration  # -> $B3
      }
    }
    %37:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %38:i32 = load %37
    %39:ptr<function, i32, read_write> = access %A, %38
    %40:i32 = load %39
    %41:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
    %42:i32 = load %41
    %43:bool = eq %40, %42
    %x_68:bool = let %43
    store %x_78, %x_68
    if %x_68 [t: $B8] {  # if_3
      $B8: {  # true
        %45:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %46:i32 = load %45
        %47:ptr<function, i32, read_write> = access %A, %46
        %48:i32 = load %47
        %49:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %50:i32 = load %49
        %51:bool = eq %48, %50
        store %x_77, %51
        %52:bool = load %x_77
        store %x_78, %52
        exit_if  # if_3
      }
    }
    %53:bool = load %x_78
    store %x_88, %53
    %54:bool = load %x_78
    if %54 [t: $B9] {  # if_4
      $B9: {  # true
        %55:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %56:i32 = load %55
        %57:ptr<function, i32, read_write> = access %A, %56
        %58:i32 = load %57
        %59:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %60:i32 = load %59
        %61:bool = eq %58, %60
        store %x_87, %61
        %62:bool = load %x_87
        store %x_88, %62
        exit_if  # if_4
      }
    }
    %63:bool = load %x_88
    store %x_98, %63
    %64:bool = load %x_88
    if %64 [t: $B10] {  # if_5
      $B10: {  # true
        %65:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
        %66:i32 = load %65
        %67:ptr<function, i32, read_write> = access %A, %66
        %68:i32 = load %67
        %69:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %70:i32 = load %69
        %71:bool = eq %68, %70
        store %x_97, %71
        %72:bool = load %x_97
        store %x_98, %72
        exit_if  # if_5
      }
    }
    %73:bool = load %x_98
    if %73 [t: $B11, f: $B12] {  # if_6
      $B11: {  # true
        %74:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %75:i32 = load %74
        %76:f32 = convert %75
        %77:f32 = let %76
        %78:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %79:i32 = load %78
        %80:f32 = convert %79
        %81:f32 = let %80
        %82:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %83:i32 = load %82
        %84:f32 = convert %83
        %85:f32 = let %84
        %86:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %87:i32 = load %86
        %88:f32 = convert %87
        %89:vec4<f32> = construct %77, %81, %85, %88
        store %x_GLF_color, %89
        exit_if  # if_6
      }
      $B12: {  # false
        store %x_GLF_color, vec4<f32>(1.0f)
        exit_if  # if_6
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B13: {
    %91:void = call %main_1
    %92:vec4<f32> = load %x_GLF_color
    %93:main_out = construct %92
    ret %93
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
