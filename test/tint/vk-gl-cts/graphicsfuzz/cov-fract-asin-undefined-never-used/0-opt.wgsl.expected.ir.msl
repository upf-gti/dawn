SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 1> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 2> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_8:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_10:ptr<uniform, buf1, read> = var @binding_point(0, 1)
}

%main_1 = func():void {
  $B2: {
    %f0:ptr<function, f32, read_write> = var
    %f1:ptr<function, f32, read_write> = var
    store %f0, 1.0f
    %8:f32 = load %f0
    %x_35:f32 = let %8
    %10:f32 = fract %x_35
    store %f1, %10
    %11:f32 = load_vector_element %gl_FragCoord, 0u
    %x_38:f32 = let %11
    %13:ptr<uniform, f32, read> = access %x_8, 0u, 0i, 0u
    %14:f32 = load %13
    %x_40:f32 = let %14
    %16:bool = gt %x_38, %x_40
    if %16 [t: $B3, f: $B4] {  # if_1
      $B3: {  # true
        %17:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %18:i32 = load %17
        %x_46:i32 = let %18
        %20:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %21:i32 = load %20
        %x_49:i32 = let %21
        %23:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %24:i32 = load %23
        %x_52:i32 = let %24
        %26:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %27:i32 = load %26
        %x_55:i32 = let %27
        %29:f32 = convert %x_46
        %30:f32 = let %29
        %31:f32 = convert %x_49
        %32:f32 = let %31
        %33:f32 = convert %x_52
        %34:f32 = let %33
        %35:f32 = convert %x_55
        %36:vec4<f32> = construct %30, %32, %34, %35
        store %x_GLF_color, %36
        exit_if  # if_1
      }
      $B4: {  # false
        %37:f32 = load %f1
        %x_58:f32 = let %37
        %39:vec4<f32> = construct %x_58, %x_58, %x_58, %x_58
        store %x_GLF_color, %39
        exit_if  # if_1
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B5: {
    store %gl_FragCoord, %gl_FragCoord_param
    %42:void = call %main_1
    %43:vec4<f32> = load %x_GLF_color
    %44:main_out = construct %43
    ret %44
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
