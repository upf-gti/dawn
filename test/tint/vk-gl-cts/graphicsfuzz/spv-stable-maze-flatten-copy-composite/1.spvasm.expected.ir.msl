SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_7:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %map:ptr<private, array<i32, 256>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %pos:ptr<function, vec2<f32>, read_write> = var
    %ipos:ptr<function, vec2<i32>, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %p:ptr<function, vec2<i32>, read_write> = var
    %canwalk:ptr<function, bool, read_write> = var
    %v:ptr<function, i32, read_write> = var
    %directions:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %d:ptr<function, i32, read_write> = var
    %15:vec4<f32> = load %gl_FragCoord
    %16:vec2<f32> = swizzle %15, xy
    %17:ptr<uniform, vec2<f32>, read> = access %x_7, 0u
    %18:vec2<f32> = load %17
    %19:vec2<f32> = div %16, %18
    store %pos, %19
    %20:f32 = load_vector_element %pos, 0u
    %21:f32 = mul %20, 16.0f
    %22:i32 = call %tint_f32_to_i32, %21
    %24:i32 = let %22
    %25:f32 = load_vector_element %pos, 1u
    %26:f32 = mul %25, 16.0f
    %27:i32 = call %tint_f32_to_i32, %26
    %28:vec2<i32> = construct %24, %27
    store %ipos, %28
    store %i, 0i
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %29:i32 = load %i
        %30:bool = lt %29, 256i
        if %30 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %31:i32 = load %i
        %x_80:i32 = let %31
        %33:ptr<private, i32, read_write> = access %map, %x_80
        store %33, 0i
        continue  # -> $B4
      }
      $B4: {  # continuing
        %34:i32 = load %i
        %35:i32 = add %34, 1i
        store %i, %35
        next_iteration  # -> $B3
      }
    }
    store %p, vec2<i32>(0i)
    store %canwalk, true
    store %v, 0i
    loop [b: $B7, c: $B8] {  # loop_2
      $B7: {  # body
        %x_104:ptr<function, bool, read_write> = var
        %x_105:ptr<function, bool, read_write> = var
        %x_124:ptr<function, bool, read_write> = var
        %x_125:ptr<function, bool, read_write> = var
        %x_144:ptr<function, bool, read_write> = var
        %x_145:ptr<function, bool, read_write> = var
        %x_164:ptr<function, bool, read_write> = var
        %x_165:ptr<function, bool, read_write> = var
        %44:i32 = load %v
        %45:i32 = add %44, 1i
        store %v, %45
        store %directions, 0i
        %46:i32 = load_vector_element %p, 0u
        %47:bool = gt %46, 0i
        %x_92:bool = let %47
        store %x_105, %x_92
        if %x_92 [t: $B9] {  # if_2
          $B9: {  # true
            %49:i32 = load_vector_element %p, 0u
            %50:i32 = sub %49, 2i
            %51:i32 = load_vector_element %p, 1u
            %52:i32 = mul %51, 16i
            %53:i32 = add %50, %52
            %54:ptr<private, i32, read_write> = access %map, %53
            %55:i32 = load %54
            %56:bool = eq %55, 0i
            store %x_104, %56
            %57:bool = load %x_104
            store %x_105, %57
            exit_if  # if_2
          }
        }
        %58:bool = load %x_105
        if %58 [t: $B10] {  # if_3
          $B10: {  # true
            %59:i32 = load %directions
            %60:i32 = add %59, 1i
            store %directions, %60
            exit_if  # if_3
          }
        }
        %61:i32 = load_vector_element %p, 1u
        %62:bool = gt %61, 0i
        %x_112:bool = let %62
        store %x_125, %x_112
        if %x_112 [t: $B11] {  # if_4
          $B11: {  # true
            %64:i32 = load_vector_element %p, 0u
            %65:i32 = load_vector_element %p, 1u
            %66:i32 = sub %65, 2i
            %67:i32 = mul %66, 16i
            %68:i32 = add %64, %67
            %69:ptr<private, i32, read_write> = access %map, %68
            %70:i32 = load %69
            %71:bool = eq %70, 0i
            store %x_124, %71
            %72:bool = load %x_124
            store %x_125, %72
            exit_if  # if_4
          }
        }
        %73:bool = load %x_125
        if %73 [t: $B12] {  # if_5
          $B12: {  # true
            %74:i32 = load %directions
            %75:i32 = add %74, 1i
            store %directions, %75
            exit_if  # if_5
          }
        }
        %76:i32 = load_vector_element %p, 0u
        %77:bool = lt %76, 14i
        %x_132:bool = let %77
        store %x_145, %x_132
        if %x_132 [t: $B13] {  # if_6
          $B13: {  # true
            %79:i32 = load_vector_element %p, 0u
            %80:i32 = add %79, 2i
            %81:i32 = load_vector_element %p, 1u
            %82:i32 = mul %81, 16i
            %83:i32 = add %80, %82
            %84:ptr<private, i32, read_write> = access %map, %83
            %85:i32 = load %84
            %86:bool = eq %85, 0i
            store %x_144, %86
            %87:bool = load %x_144
            store %x_145, %87
            exit_if  # if_6
          }
        }
        %88:bool = load %x_145
        if %88 [t: $B14] {  # if_7
          $B14: {  # true
            %89:i32 = load %directions
            %90:i32 = add %89, 1i
            store %directions, %90
            exit_if  # if_7
          }
        }
        %91:i32 = load_vector_element %p, 1u
        %92:bool = lt %91, 14i
        %x_152:bool = let %92
        store %x_165, %x_152
        if %x_152 [t: $B15] {  # if_8
          $B15: {  # true
            %94:i32 = load_vector_element %p, 0u
            %95:i32 = load_vector_element %p, 1u
            %96:i32 = add %95, 2i
            %97:i32 = mul %96, 16i
            %98:i32 = add %94, %97
            %99:ptr<private, i32, read_write> = access %map, %98
            %100:i32 = load %99
            %101:bool = eq %100, 0i
            store %x_164, %101
            %102:bool = load %x_164
            store %x_165, %102
            exit_if  # if_8
          }
        }
        %103:bool = load %x_165
        if %103 [t: $B16] {  # if_9
          $B16: {  # true
            %104:i32 = load %directions
            %105:i32 = add %104, 1i
            store %directions, %105
            exit_if  # if_9
          }
        }
        %x_229:ptr<function, bool, read_write> = var
        %x_230:ptr<function, bool, read_write> = var
        %x_242:ptr<function, bool, read_write> = var
        %x_243:ptr<function, bool, read_write> = var
        %x_281:ptr<function, bool, read_write> = var
        %x_282:ptr<function, bool, read_write> = var
        %x_288:ptr<function, i32, read_write> = var
        %x_289:ptr<function, i32, read_write> = var
        %x_290:ptr<function, i32, read_write> = var
        %x_295:ptr<function, i32, read_write> = var
        %x_296:ptr<function, i32, read_write> = var
        %x_297:ptr<function, i32, read_write> = var
        %x_303:ptr<function, array<i32, 256>, read_write> = var
        %x_304:ptr<function, array<i32, 256>, read_write> = var
        %x_305:ptr<function, array<i32, 256>, read_write> = var
        %x_315:ptr<function, i32, read_write> = var
        %x_316:ptr<function, i32, read_write> = var
        %x_317:ptr<function, i32, read_write> = var
        %x_359:ptr<function, bool, read_write> = var
        %x_360:ptr<function, bool, read_write> = var
        %x_372:ptr<function, bool, read_write> = var
        %x_373:ptr<function, bool, read_write> = var
        %x_411:ptr<function, bool, read_write> = var
        %x_412:ptr<function, bool, read_write> = var
        %x_424:ptr<function, bool, read_write> = var
        %x_425:ptr<function, bool, read_write> = var
        %132:i32 = load %directions
        %133:bool = eq %132, 0i
        if %133 [t: $B17, f: $B18] {  # if_10
          $B17: {  # true
            store %canwalk, false
            store %i, 0i
            loop [b: $B19, c: $B20] {  # loop_3
              $B19: {  # body
                %134:i32 = load %i
                %135:bool = lt %134, 8i
                if %135 [t: $B21, f: $B22] {  # if_11
                  $B21: {  # true
                    exit_if  # if_11
                  }
                  $B22: {  # false
                    exit_loop  # loop_3
                  }
                }
                store %j, 0i
                loop [b: $B23, c: $B24] {  # loop_4
                  $B23: {  # body
                    %136:i32 = load %j
                    %137:bool = lt %136, 8i
                    if %137 [t: $B25, f: $B26] {  # if_12
                      $B25: {  # true
                        exit_if  # if_12
                      }
                      $B26: {  # false
                        exit_loop  # loop_4
                      }
                    }
                    %138:i32 = load %j
                    %139:i32 = mul %138, 2i
                    %140:i32 = load %i
                    %141:i32 = mul %140, 2i
                    %142:i32 = mul %141, 16i
                    %143:i32 = add %139, %142
                    %144:ptr<private, i32, read_write> = access %map, %143
                    %145:i32 = load %144
                    %146:bool = eq %145, 0i
                    if %146 [t: $B27] {  # if_13
                      $B27: {  # true
                        %147:i32 = load %j
                        %148:i32 = mul %147, 2i
                        store_vector_element %p, 0u, %148
                        %149:i32 = load %i
                        %150:i32 = mul %149, 2i
                        store_vector_element %p, 1u, %150
                        store %canwalk, true
                        exit_if  # if_13
                      }
                    }
                    continue  # -> $B24
                  }
                  $B24: {  # continuing
                    %151:i32 = load %j
                    %152:i32 = add %151, 1i
                    store %j, %152
                    next_iteration  # -> $B23
                  }
                }
                continue  # -> $B20
              }
              $B20: {  # continuing
                %153:i32 = load %i
                %154:i32 = add %153, 1i
                store %i, %154
                next_iteration  # -> $B19
              }
            }
            %155:i32 = load_vector_element %p, 0u
            %x_211:i32 = let %155
            %157:i32 = load_vector_element %p, 1u
            %x_213:i32 = let %157
            %159:i32 = mul %x_213, 16i
            %160:i32 = add %x_211, %159
            %161:ptr<private, i32, read_write> = access %map, %160
            store %161, 1i
            exit_if  # if_10
          }
          $B18: {  # false
            %162:i32 = load %v
            %163:i32 = load %directions
            %164:i32 = call %tint_mod_i32, %162, %163
            store %d, %164
            %166:i32 = load %v
            %167:i32 = load %directions
            %168:i32 = add %166, %167
            store %v, %168
            %169:i32 = load %d
            %170:bool = gte %169, 0i
            %x_224:bool = let %170
            store %x_230, %x_224
            if %x_224 [t: $B28] {  # if_14
              $B28: {  # true
                %172:i32 = load_vector_element %p, 0u
                %173:bool = gt %172, 0i
                store %x_229, %173
                %174:bool = load %x_229
                store %x_230, %174
                exit_if  # if_14
              }
            }
            %175:bool = load %x_230
            store %x_243, %175
            %176:bool = load %x_230
            if %176 [t: $B29] {  # if_15
              $B29: {  # true
                %177:i32 = load_vector_element %p, 0u
                %178:i32 = sub %177, 2i
                %179:i32 = load_vector_element %p, 1u
                %180:i32 = mul %179, 16i
                %181:i32 = add %178, %180
                %182:ptr<private, i32, read_write> = access %map, %181
                %183:i32 = load %182
                %184:bool = eq %183, 0i
                store %x_242, %184
                %185:bool = load %x_242
                store %x_243, %185
                exit_if  # if_15
              }
            }
            %186:bool = load %x_243
            if %186 [t: $B30] {  # if_16
              $B30: {  # true
                %187:i32 = load %d
                %188:i32 = sub %187, 1i
                store %d, %188
                %189:i32 = load_vector_element %p, 0u
                %x_249:i32 = let %189
                %191:i32 = load_vector_element %p, 1u
                %x_251:i32 = let %191
                %193:i32 = mul %x_251, 16i
                %194:i32 = add %x_249, %193
                %195:ptr<private, i32, read_write> = access %map, %194
                store %195, 1i
                %196:i32 = load_vector_element %p, 0u
                %x_256:i32 = let %196
                %198:i32 = load_vector_element %p, 1u
                %x_259:i32 = let %198
                %200:i32 = sub %x_256, 1i
                %201:i32 = mul %x_259, 16i
                %202:i32 = add %200, %201
                %203:ptr<private, i32, read_write> = access %map, %202
                store %203, 1i
                %204:i32 = load_vector_element %p, 0u
                %x_264:i32 = let %204
                %206:i32 = load_vector_element %p, 1u
                %x_267:i32 = let %206
                %208:i32 = sub %x_264, 2i
                %209:i32 = mul %x_267, 16i
                %210:i32 = add %208, %209
                %211:ptr<private, i32, read_write> = access %map, %210
                store %211, 1i
                %212:i32 = load_vector_element %p, 0u
                %213:i32 = sub %212, 2i
                store_vector_element %p, 0u, %213
                exit_if  # if_16
              }
            }
            %214:i32 = load %d
            %215:bool = gte %214, 0i
            %x_276:bool = let %215
            store %x_282, %x_276
            if %x_276 [t: $B31] {  # if_17
              $B31: {  # true
                %217:i32 = load_vector_element %p, 1u
                %218:bool = gt %217, 0i
                store %x_281, %218
                %219:bool = load %x_281
                store %x_282, %219
                exit_if  # if_17
              }
            }
            %220:bool = load %x_282
            if %220 [t: $B32, f: $B33] {  # if_18
              $B32: {  # true
                %221:i32 = load_vector_element %p, 0u
                store %x_288, %221
                %222:i32 = load %x_288
                store %x_290, %222
                exit_if  # if_18
              }
              $B33: {  # false
                store %x_289, 0i
                %223:i32 = load %x_289
                store %x_290, %223
                exit_if  # if_18
              }
            }
            %224:bool = load %x_282
            if %224 [t: $B34, f: $B35] {  # if_19
              $B34: {  # true
                %225:i32 = load_vector_element %p, 1u
                store %x_295, %225
                %226:i32 = load %x_295
                store %x_297, %226
                exit_if  # if_19
              }
              $B35: {  # false
                store %x_296, 0i
                %227:i32 = load %x_296
                store %x_297, %227
                exit_if  # if_19
              }
            }
            %228:i32 = load %x_297
            %229:i32 = sub %228, 2i
            %230:i32 = mul %229, 16i
            %x_299:i32 = let %230
            %232:bool = load %x_282
            if %232 [t: $B36, f: $B37] {  # if_20
              $B36: {  # true
                %233:array<i32, 256> = load %map
                store %x_303, %233
                %234:array<i32, 256> = load %x_303
                store %x_305, %234
                exit_if  # if_20
              }
              $B37: {  # false
                store %x_304, array<i32, 256>(0i)
                %235:array<i32, 256> = load %x_304
                store %x_305, %235
                exit_if  # if_20
              }
            }
            %236:bool = load %x_282
            if %236 [t: $B38] {  # if_21
              $B38: {  # true
                store %map, array<i32, 256>(0i)
                exit_if  # if_21
              }
            }
            %237:bool = load %x_282
            if %237 [t: $B39] {  # if_22
              $B39: {  # true
                %238:array<i32, 256> = load %x_305
                store %map, %238
                exit_if  # if_22
              }
            }
            %239:bool = load %x_282
            if %239 [t: $B40, f: $B41] {  # if_23
              $B40: {  # true
                %240:i32 = load %x_290
                %241:i32 = add %240, %x_299
                %242:ptr<private, i32, read_write> = access %map, %241
                %243:i32 = load %242
                store %x_315, %243
                %244:i32 = load %x_315
                store %x_317, %244
                exit_if  # if_23
              }
              $B41: {  # false
                store %x_316, 0i
                %245:i32 = load %x_316
                store %x_317, %245
                exit_if  # if_23
              }
            }
            %246:bool = load %x_282
            %247:i32 = load %x_317
            %248:bool = eq %247, 0i
            %249:bool = load %x_282
            %250:bool = select %246, %248, %249
            if %250 [t: $B42] {  # if_24
              $B42: {  # true
                %251:i32 = load %d
                %252:i32 = sub %251, 1i
                store %d, %252
                %253:i32 = load_vector_element %p, 0u
                %x_326:i32 = let %253
                %255:i32 = load_vector_element %p, 1u
                %x_328:i32 = let %255
                %257:i32 = mul %x_328, 16i
                %258:i32 = add %x_326, %257
                %259:ptr<private, i32, read_write> = access %map, %258
                store %259, 1i
                %260:i32 = load_vector_element %p, 0u
                %x_333:i32 = let %260
                %262:i32 = load_vector_element %p, 1u
                %x_335:i32 = let %262
                %264:i32 = sub %x_335, 1i
                %265:i32 = mul %264, 16i
                %266:i32 = add %x_333, %265
                %267:ptr<private, i32, read_write> = access %map, %266
                store %267, 1i
                %268:i32 = load_vector_element %p, 0u
                %x_341:i32 = let %268
                %270:i32 = load_vector_element %p, 1u
                %x_343:i32 = let %270
                %272:array<i32, 256> = load %map
                %x_345:array<i32, 256> = let %272
                store %map, array<i32, 256>(0i)
                store %map, %x_345
                %274:i32 = sub %x_343, 2i
                %275:i32 = mul %274, 16i
                %276:i32 = add %x_341, %275
                %277:ptr<private, i32, read_write> = access %map, %276
                store %277, 1i
                %278:i32 = load_vector_element %p, 1u
                %279:i32 = sub %278, 2i
                store_vector_element %p, 1u, %279
                exit_if  # if_24
              }
            }
            %280:i32 = load %d
            %281:bool = gte %280, 0i
            %x_354:bool = let %281
            store %x_360, %x_354
            if %x_354 [t: $B43] {  # if_25
              $B43: {  # true
                %283:i32 = load_vector_element %p, 0u
                %284:bool = lt %283, 14i
                store %x_359, %284
                %285:bool = load %x_359
                store %x_360, %285
                exit_if  # if_25
              }
            }
            %286:bool = load %x_360
            store %x_373, %286
            %287:bool = load %x_360
            if %287 [t: $B44] {  # if_26
              $B44: {  # true
                %288:i32 = load_vector_element %p, 0u
                %289:i32 = add %288, 2i
                %290:i32 = load_vector_element %p, 1u
                %291:i32 = mul %290, 16i
                %292:i32 = add %289, %291
                %293:ptr<private, i32, read_write> = access %map, %292
                %294:i32 = load %293
                %295:bool = eq %294, 0i
                store %x_372, %295
                %296:bool = load %x_372
                store %x_373, %296
                exit_if  # if_26
              }
            }
            %297:bool = load %x_373
            if %297 [t: $B45] {  # if_27
              $B45: {  # true
                %298:i32 = load %d
                %299:i32 = sub %298, 1i
                store %d, %299
                %300:i32 = load_vector_element %p, 0u
                %x_379:i32 = let %300
                %302:i32 = load_vector_element %p, 1u
                %x_381:i32 = let %302
                %304:i32 = mul %x_381, 16i
                %305:i32 = add %x_379, %304
                %306:ptr<private, i32, read_write> = access %map, %305
                store %306, 1i
                %307:i32 = load_vector_element %p, 0u
                %x_386:i32 = let %307
                %309:i32 = load_vector_element %p, 1u
                %x_389:i32 = let %309
                %311:i32 = add %x_386, 1i
                %312:i32 = mul %x_389, 16i
                %313:i32 = add %311, %312
                %314:ptr<private, i32, read_write> = access %map, %313
                store %314, 1i
                %315:i32 = load_vector_element %p, 0u
                %x_394:i32 = let %315
                %317:i32 = load_vector_element %p, 1u
                %x_397:i32 = let %317
                %319:i32 = add %x_394, 2i
                %320:i32 = mul %x_397, 16i
                %321:i32 = add %319, %320
                %322:ptr<private, i32, read_write> = access %map, %321
                store %322, 1i
                %323:i32 = load_vector_element %p, 0u
                %324:i32 = add %323, 2i
                store_vector_element %p, 0u, %324
                exit_if  # if_27
              }
            }
            %325:i32 = load %d
            %326:bool = gte %325, 0i
            %x_406:bool = let %326
            store %x_412, %x_406
            if %x_406 [t: $B46] {  # if_28
              $B46: {  # true
                %328:i32 = load_vector_element %p, 1u
                %329:bool = lt %328, 14i
                store %x_411, %329
                %330:bool = load %x_411
                store %x_412, %330
                exit_if  # if_28
              }
            }
            %331:bool = load %x_412
            store %x_425, %331
            %332:bool = load %x_412
            if %332 [t: $B47] {  # if_29
              $B47: {  # true
                %333:i32 = load_vector_element %p, 0u
                %334:i32 = load_vector_element %p, 1u
                %335:i32 = add %334, 2i
                %336:i32 = mul %335, 16i
                %337:i32 = add %333, %336
                %338:ptr<private, i32, read_write> = access %map, %337
                %339:i32 = load %338
                %340:bool = eq %339, 0i
                store %x_424, %340
                %341:bool = load %x_424
                store %x_425, %341
                exit_if  # if_29
              }
            }
            %342:bool = load %x_425
            if %342 [t: $B48] {  # if_30
              $B48: {  # true
                %343:i32 = load %d
                %344:i32 = sub %343, 1i
                store %d, %344
                %345:i32 = load_vector_element %p, 0u
                %x_431:i32 = let %345
                %347:i32 = load_vector_element %p, 1u
                %x_433:i32 = let %347
                %349:i32 = mul %x_433, 16i
                %350:i32 = add %x_431, %349
                %351:ptr<private, i32, read_write> = access %map, %350
                store %351, 1i
                %352:i32 = load_vector_element %p, 0u
                %x_438:i32 = let %352
                %354:i32 = load_vector_element %p, 1u
                %x_440:i32 = let %354
                %356:i32 = add %x_440, 1i
                %357:i32 = mul %356, 16i
                %358:i32 = add %x_438, %357
                %359:ptr<private, i32, read_write> = access %map, %358
                store %359, 1i
                %360:i32 = load_vector_element %p, 0u
                %x_446:i32 = let %360
                %362:i32 = load_vector_element %p, 1u
                %x_448:i32 = let %362
                %364:i32 = add %x_448, 2i
                %365:i32 = mul %364, 16i
                %366:i32 = add %x_446, %365
                %367:ptr<private, i32, read_write> = access %map, %366
                store %367, 1i
                %368:i32 = load_vector_element %p, 1u
                %369:i32 = add %368, 2i
                store_vector_element %p, 1u, %369
                exit_if  # if_30
              }
            }
            exit_if  # if_10
          }
        }
        %370:i32 = load_vector_element %ipos, 1u
        %371:i32 = mul %370, 16i
        %372:i32 = load_vector_element %ipos, 0u
        %373:i32 = add %371, %372
        %374:ptr<private, i32, read_write> = access %map, %373
        %375:i32 = load %374
        %376:bool = eq %375, 1i
        if %376 [t: $B49] {  # if_31
          $B49: {  # true
            store %x_GLF_color, vec4<f32>(1.0f)
            ret
          }
        }
        continue  # -> $B8
      }
      $B8: {  # continuing
        %377:bool = load %canwalk
        %x_468:bool = let %377
        %379:bool = eq %x_468, false
        break_if %379  # -> [t: exit_loop loop_2, f: $B7]
      }
    }
    store %x_GLF_color, vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f)
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B50: {
    store %gl_FragCoord, %gl_FragCoord_param
    %382:void = call %main_1
    %383:vec4<f32> = load %x_GLF_color
    %384:main_out = construct %383
    ret %384
  }
}
%tint_mod_i32 = func(%lhs:i32, %rhs:i32):i32 {
  $B51: {
    %387:bool = eq %rhs, 0i
    %388:bool = eq %lhs, -2147483648i
    %389:bool = eq %rhs, -1i
    %390:bool = and %388, %389
    %391:bool = or %387, %390
    %392:i32 = select %rhs, 1i, %391
    %393:i32 = let %392
    %394:i32 = div %lhs, %393
    %395:i32 = mul %394, %393
    %396:i32 = sub %lhs, %395
    ret %396
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B52: {
    %398:i32 = convert %value
    %399:bool = gte %value, -2147483648.0f
    %400:i32 = select -2147483648i, %398, %399
    %401:bool = lte %value, 2147483520.0f
    %402:i32 = select 2147483647i, %400, %401
    ret %402
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
