SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 3> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    %A:ptr<function, array<i32, 2>, read_write> = var
    %a:ptr<function, i32, read_write> = var
    %7:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %8:i32 = load %7
    store %i, %8
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %9:i32 = load %i
        %10:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %11:i32 = load %10
        %12:bool = lt %9, %11
        if %12 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %13:i32 = load %i
        %x_40:i32 = let %13
        %15:ptr<function, i32, read_write> = access %A, %x_40
        %16:i32 = load %i
        store %15, %16
        continue  # -> $B4
      }
      $B4: {  # continuing
        %17:i32 = load %i
        %18:i32 = add %17, 1i
        store %i, %18
        next_iteration  # -> $B3
      }
    }
    %19:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %20:i32 = load %19
    %21:ptr<function, i32, read_write> = access %A, %20
    %22:i32 = load %21
    %23:i32 = complement %22
    %24:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
    %25:i32 = load %24
    %26:ptr<function, i32, read_write> = access %A, %25
    %27:i32 = load %26
    %28:i32 = complement %27
    %29:i32 = min %23, %28
    store %a, %29
    %30:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %31:i32 = load %30
    %32:f32 = convert %31
    %33:vec4<f32> = construct %32
    store %x_GLF_color, %33
    %34:i32 = load %a
    %35:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %36:i32 = load %35
    %37:i32 = negation %36
    %38:bool = eq %34, %37
    if %38 [t: $B7] {  # if_2
      $B7: {  # true
        %39:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
        %40:i32 = load %39
        %41:f32 = convert %40
        %42:f32 = let %41
        %43:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %44:i32 = load %43
        %45:f32 = convert %44
        %46:f32 = let %45
        %47:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %48:i32 = load %47
        %49:f32 = convert %48
        %50:f32 = let %49
        %51:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
        %52:i32 = load %51
        %53:f32 = convert %52
        %54:vec4<f32> = construct %42, %46, %50, %53
        store %x_GLF_color, %54
        exit_if  # if_2
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B8: {
    %56:void = call %main_1
    %57:vec4<f32> = load %x_GLF_color
    %58:main_out = construct %57
    ret %58
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
