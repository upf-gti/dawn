SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 5> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %a:ptr<function, i32, read_write> = var
    %b:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %indexable:ptr<function, array<i32, 2>, read_write> = var
    %10:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
    %11:i32 = load %10
    store %a, %11
    %12:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
    %13:i32 = load %12
    store %b, %13
    %14:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
    %15:i32 = load %14
    %16:f32 = convert %15
    %17:vec4<f32> = construct %16
    store %x_GLF_color, %17
    %18:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
    %19:i32 = load %18
    store %i, %19
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %20:i32 = load %i
        %21:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %22:i32 = load %21
        %23:bool = lt %20, %22
        if %23 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %24:i32 = load %i
        %25:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %26:i32 = load %25
        %27:bool = gt %24, %26
        if %27 [t: $B7] {  # if_2
          $B7: {  # true
            %28:i32 = load %a
            %29:i32 = add %28, 1i
            store %a, %29
            if false [t: $B8] {  # if_3
              $B8: {  # true
                %30:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
                %31:i32 = load %30
                store %i_1, %31
                loop [b: $B9] {  # loop_2
                  $B9: {  # body
                    %32:i32 = load %i_1
                    %33:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
                    %34:i32 = load %33
                    %35:bool = lt %32, %34
                    if %35 [t: $B10, f: $B11] {  # if_4
                      $B10: {  # true
                        exit_if  # if_4
                      }
                      $B11: {  # false
                        exit_loop  # loop_2
                      }
                    }
                    ret
                  }
                }
                exit_if  # if_3
              }
            }
            exit_if  # if_2
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %36:i32 = load %i
        %37:i32 = add %36, 1i
        store %i, %37
        next_iteration  # -> $B3
      }
    }
    %38:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
    %39:i32 = load %38
    store %i_2, %39
    loop [b: $B12, c: $B13] {  # loop_3
      $B12: {  # body
        %40:i32 = load %i_2
        %41:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %42:i32 = load %41
        %43:bool = lt %40, %42
        if %43 [t: $B14, f: $B15] {  # if_5
          $B14: {  # true
            exit_if  # if_5
          }
          $B15: {  # false
            exit_loop  # loop_3
          }
        }
        %44:i32 = load %b
        %x_93:i32 = let %44
        %46:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %47:i32 = load %46
        %48:ptr<uniform, i32, read> = access %x_6, 0u, 4i, 0u
        %49:i32 = load %48
        %50:array<i32, 2> = construct %47, %49
        store %indexable, %50
        %51:i32 = load %a
        %52:ptr<function, i32, read_write> = access %indexable, %x_93
        %53:i32 = load %52
        %54:i32 = add %51, %53
        store %a, %54
        continue  # -> $B13
      }
      $B13: {  # continuing
        %55:i32 = load %i_2
        %56:i32 = add %55, 1i
        store %i_2, %56
        next_iteration  # -> $B12
      }
    }
    %57:i32 = load %a
    %58:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %59:i32 = load %58
    %60:bool = eq %57, %59
    if %60 [t: $B16] {  # if_6
      $B16: {  # true
        %61:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %62:i32 = load %61
        %63:f32 = convert %62
        %64:f32 = let %63
        %65:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
        %66:i32 = load %65
        %67:f32 = convert %66
        %68:f32 = let %67
        %69:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
        %70:i32 = load %69
        %71:f32 = convert %70
        %72:f32 = let %71
        %73:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
        %74:i32 = load %73
        %75:f32 = convert %74
        %76:vec4<f32> = construct %64, %68, %72, %75
        store %x_GLF_color, %76
        exit_if  # if_6
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B17: {
    %78:void = call %main_1
    %79:vec4<f32> = load %x_GLF_color
    %80:main_out = construct %79
    ret %80
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
