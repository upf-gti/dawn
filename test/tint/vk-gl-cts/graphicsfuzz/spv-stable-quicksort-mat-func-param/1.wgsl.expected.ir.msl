SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_32:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>, %x_228:mat3x3<f32>):void {
  $B2: {
    %temp:ptr<function, i32, read_write> = var
    %10:i32 = load %i
    %x_230:i32 = let %10
    %12:ptr<private, i32, read_write> = access %obj, 0u, %x_230
    %13:i32 = load %12
    %x_232:i32 = let %13
    store %temp, %x_232
    %15:i32 = load %i
    %x_233:i32 = let %15
    %17:i32 = load %j
    %x_234:i32 = let %17
    %19:ptr<private, i32, read_write> = access %obj, 0u, %x_234
    %20:i32 = load %19
    %x_236:i32 = let %20
    %22:ptr<private, i32, read_write> = access %obj, 0u, %x_233
    store %22, %x_236
    %23:i32 = load %j
    %x_238:i32 = let %23
    %25:i32 = load %temp
    %x_239:i32 = let %25
    %27:ptr<private, i32, read_write> = access %obj, 0u, %x_238
    store %27, %x_239
    ret
  }
}
%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 {
  $B3: {
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %38:i32 = load %h
    %x_242:i32 = let %38
    %40:ptr<private, i32, read_write> = access %obj, 0u, %x_242
    %41:i32 = load %40
    %x_244:i32 = let %41
    store %pivot, %x_244
    %43:i32 = load %l
    %x_245:i32 = let %43
    %45:i32 = sub %x_245, 1i
    store %i_1, %45
    %46:i32 = load %l
    %x_247:i32 = let %46
    store %j_1, %x_247
    loop [b: $B4, c: $B5] {  # loop_1
      $B4: {  # body
        %48:i32 = load %j_1
        %x_252:i32 = let %48
        %50:i32 = load %h
        %x_253:i32 = let %50
        %52:i32 = sub %x_253, 1i
        %53:bool = lte %x_252, %52
        if %53 [t: $B6, f: $B7] {  # if_1
          $B6: {  # true
            exit_if  # if_1
          }
          $B7: {  # false
            exit_loop  # loop_1
          }
        }
        %54:i32 = load %j_1
        %x_257:i32 = let %54
        %56:ptr<private, i32, read_write> = access %obj, 0u, %x_257
        %57:i32 = load %56
        %x_259:i32 = let %57
        %59:i32 = load %pivot
        %x_260:i32 = let %59
        %61:bool = lte %x_259, %x_260
        if %61 [t: $B8] {  # if_2
          $B8: {  # true
            %62:i32 = load %i_1
            %x_264:i32 = let %62
            %64:i32 = add %x_264, 1i
            store %i_1, %64
            %65:i32 = load %i_1
            %x_266:i32 = let %65
            store %param, %x_266
            %67:i32 = load %j_1
            %x_267:i32 = let %67
            store %param_1, %x_267
            %69:void = call %swap_i1_i1_, %param, %param_1, mat3x3<f32>(vec3<f32>(0.0f))
            exit_if  # if_2
          }
        }
        continue  # -> $B5
      }
      $B5: {  # continuing
        %70:i32 = load %j_1
        %x_269:i32 = let %70
        %72:i32 = add %x_269, 1i
        store %j_1, %72
        next_iteration  # -> $B4
      }
    }
    %73:i32 = load %i_1
    %x_271:i32 = let %73
    %75:i32 = add %x_271, 1i
    store %i_1, %75
    %76:i32 = load %i_1
    %x_273:i32 = let %76
    store %param_2, %x_273
    %78:i32 = load %h
    %x_274:i32 = let %78
    store %param_3, %x_274
    %80:void = call %swap_i1_i1_, %param_2, %param_3, mat3x3<f32>(vec3<f32>(0.0f))
    %81:i32 = load %i_1
    %x_276:i32 = let %81
    ret %x_276
  }
}
%quicksort_ = func():void {
  $B9: {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %91:i32 = load %top
    %x_278:i32 = let %91
    %93:i32 = add %x_278, 1i
    %x_279:i32 = let %93
    store %top, %x_279
    %95:i32 = load %l_1
    %x_280:i32 = let %95
    %97:ptr<function, i32, read_write> = access %stack, %x_279
    store %97, %x_280
    %98:i32 = load %top
    %x_282:i32 = let %98
    %100:i32 = add %x_282, 1i
    %x_283:i32 = let %100
    store %top, %x_283
    %102:i32 = load %h_1
    %x_284:i32 = let %102
    %104:ptr<function, i32, read_write> = access %stack, %x_283
    store %104, %x_284
    loop [b: $B10, c: $B11] {  # loop_2
      $B10: {  # body
        %105:i32 = load %top
        %x_290:i32 = let %105
        %107:bool = gte %x_290, 0i
        if %107 [t: $B12, f: $B13] {  # if_3
          $B12: {  # true
            exit_if  # if_3
          }
          $B13: {  # false
            exit_loop  # loop_2
          }
        }
        %108:i32 = load %top
        %x_293:i32 = let %108
        %110:i32 = sub %x_293, 1i
        store %top, %110
        %111:ptr<function, i32, read_write> = access %stack, %x_293
        %112:i32 = load %111
        %x_296:i32 = let %112
        store %h_1, %x_296
        %114:i32 = load %top
        %x_297:i32 = let %114
        %116:i32 = sub %x_297, 1i
        store %top, %116
        %117:ptr<function, i32, read_write> = access %stack, %x_297
        %118:i32 = load %117
        %x_300:i32 = let %118
        store %l_1, %x_300
        %120:i32 = load %l_1
        %x_301:i32 = let %120
        store %param_4, %x_301
        %122:i32 = load %h_1
        %x_302:i32 = let %122
        store %param_5, %x_302
        %124:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        %x_303:i32 = let %124
        store %p, %x_303
        %126:i32 = load %p
        %x_304:i32 = let %126
        %128:i32 = load %l_1
        %x_306:i32 = let %128
        %130:i32 = sub %x_304, 1i
        %131:bool = gt %130, %x_306
        if %131 [t: $B14] {  # if_4
          $B14: {  # true
            %132:i32 = load %top
            %x_310:i32 = let %132
            %134:i32 = add %x_310, 1i
            %x_311:i32 = let %134
            store %top, %x_311
            %136:i32 = load %l_1
            %x_312:i32 = let %136
            %138:ptr<function, i32, read_write> = access %stack, %x_311
            store %138, %x_312
            %139:i32 = load %top
            %x_314:i32 = let %139
            %141:i32 = add %x_314, 1i
            %x_315:i32 = let %141
            store %top, %x_315
            %143:i32 = load %p
            %x_316:i32 = let %143
            %145:ptr<function, i32, read_write> = access %stack, %x_315
            %146:i32 = sub %x_316, 1i
            store %145, %146
            exit_if  # if_4
          }
        }
        %147:i32 = load %p
        %x_319:i32 = let %147
        %149:i32 = load %h_1
        %x_321:i32 = let %149
        %151:i32 = add %x_319, 1i
        %152:bool = lt %151, %x_321
        if %152 [t: $B15] {  # if_5
          $B15: {  # true
            %153:i32 = load %top
            %x_325:i32 = let %153
            %155:i32 = add %x_325, 1i
            %x_326:i32 = let %155
            store %top, %x_326
            %157:i32 = load %p
            %x_327:i32 = let %157
            %159:ptr<function, i32, read_write> = access %stack, %x_326
            %160:i32 = add %x_327, 1i
            store %159, %160
            %161:i32 = load %top
            %x_330:i32 = let %161
            %163:i32 = add %x_330, 1i
            %x_331:i32 = let %163
            store %top, %x_331
            %165:i32 = load %h_1
            %x_332:i32 = let %165
            %167:ptr<function, i32, read_write> = access %stack, %x_331
            store %167, %x_332
            exit_if  # if_5
          }
        }
        continue  # -> $B11
      }
      $B11: {  # continuing
        next_iteration  # -> $B10
      }
    }
    ret
  }
}
%main_1 = func():void {
  $B16: {
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    store %i_2, 0i
    loop [b: $B17, c: $B18] {  # loop_3
      $B17: {  # body
        %172:i32 = load %i_2
        %x_89:i32 = let %172
        %174:bool = lt %x_89, 10i
        if %174 [t: $B19, f: $B20] {  # if_6
          $B19: {  # true
            exit_if  # if_6
          }
          $B20: {  # false
            exit_loop  # loop_3
          }
        }
        %175:i32 = load %i_2
        %x_92:i32 = let %175
        %177:i32 = load %i_2
        %x_93:i32 = let %177
        %179:ptr<private, i32, read_write> = access %obj, 0u, %x_92
        %180:i32 = sub 10i, %x_93
        store %179, %180
        %181:i32 = load %i_2
        %x_96:i32 = let %181
        %183:i32 = load %i_2
        %x_97:i32 = let %183
        %185:ptr<private, i32, read_write> = access %obj, 0u, %x_97
        %186:i32 = load %185
        %x_99:i32 = let %186
        %188:i32 = load %i_2
        %x_100:i32 = let %188
        %190:ptr<private, i32, read_write> = access %obj, 0u, %x_100
        %191:i32 = load %190
        %x_102:i32 = let %191
        %193:ptr<private, i32, read_write> = access %obj, 0u, %x_96
        %194:i32 = mul %x_99, %x_102
        store %193, %194
        continue  # -> $B18
      }
      $B18: {  # continuing
        %195:i32 = load %i_2
        %x_105:i32 = let %195
        %197:i32 = add %x_105, 1i
        store %i_2, %197
        next_iteration  # -> $B17
      }
    }
    %198:void = call %quicksort_
    %199:vec4<f32> = load %gl_FragCoord
    %x_108:vec4<f32> = let %199
    %201:ptr<uniform, vec2<f32>, read> = access %x_32, 0u
    %202:vec2<f32> = load %201
    %x_111:vec2<f32> = let %202
    %204:f32 = access %x_108, 0u
    %205:f32 = access %x_108, 1u
    %206:vec2<f32> = construct %204, %205
    %207:vec2<f32> = div %206, %x_111
    store %uv, %207
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %208:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %209:i32 = load %208
    %x_114:i32 = let %209
    %211:f32 = load_vector_element %color, 0u
    %x_117:f32 = let %211
    %213:f32 = convert %x_114
    %214:f32 = add %x_117, %213
    store_vector_element %color, 0u, %214
    %215:f32 = load_vector_element %uv, 0u
    %x_121:f32 = let %215
    %217:bool = gt %x_121, 0.25f
    if %217 [t: $B21] {  # if_7
      $B21: {  # true
        %218:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %219:i32 = load %218
        %x_126:i32 = let %219
        %221:f32 = load_vector_element %color, 0u
        %x_129:f32 = let %221
        %223:f32 = convert %x_126
        %224:f32 = add %x_129, %223
        store_vector_element %color, 0u, %224
        exit_if  # if_7
      }
    }
    %225:f32 = load_vector_element %uv, 0u
    %x_133:f32 = let %225
    %227:bool = gt %x_133, 0.5f
    if %227 [t: $B22] {  # if_8
      $B22: {  # true
        %228:ptr<private, i32, read_write> = access %obj, 0u, 2i
        %229:i32 = load %228
        %x_138:i32 = let %229
        %231:f32 = load_vector_element %color, 1u
        %x_141:f32 = let %231
        %233:f32 = convert %x_138
        %234:f32 = add %x_141, %233
        store_vector_element %color, 1u, %234
        exit_if  # if_8
      }
    }
    %235:f32 = load_vector_element %uv, 0u
    %x_145:f32 = let %235
    %237:bool = gt %x_145, 0.75f
    if %237 [t: $B23] {  # if_9
      $B23: {  # true
        %238:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %239:i32 = load %238
        %x_150:i32 = let %239
        %241:f32 = load_vector_element %color, 2u
        %x_153:f32 = let %241
        %243:f32 = convert %x_150
        %244:f32 = add %x_153, %243
        store_vector_element %color, 2u, %244
        exit_if  # if_9
      }
    }
    %245:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %246:i32 = load %245
    %x_157:i32 = let %246
    %248:f32 = load_vector_element %color, 1u
    %x_160:f32 = let %248
    %250:f32 = convert %x_157
    %251:f32 = add %x_160, %250
    store_vector_element %color, 1u, %251
    %252:f32 = load_vector_element %uv, 1u
    %x_164:f32 = let %252
    %254:bool = gt %x_164, 0.25f
    if %254 [t: $B24] {  # if_10
      $B24: {  # true
        %255:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %256:i32 = load %255
        %x_169:i32 = let %256
        %258:f32 = load_vector_element %color, 0u
        %x_172:f32 = let %258
        %260:f32 = convert %x_169
        %261:f32 = add %x_172, %260
        store_vector_element %color, 0u, %261
        exit_if  # if_10
      }
    }
    %262:f32 = load_vector_element %uv, 1u
    %x_176:f32 = let %262
    %264:bool = gt %x_176, 0.5f
    if %264 [t: $B25] {  # if_11
      $B25: {  # true
        %265:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %266:i32 = load %265
        %x_181:i32 = let %266
        %268:f32 = load_vector_element %color, 1u
        %x_184:f32 = let %268
        %270:f32 = convert %x_181
        %271:f32 = add %x_184, %270
        store_vector_element %color, 1u, %271
        exit_if  # if_11
      }
    }
    %272:f32 = load_vector_element %uv, 1u
    %x_188:f32 = let %272
    %274:bool = gt %x_188, 0.75f
    if %274 [t: $B26] {  # if_12
      $B26: {  # true
        %275:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %276:i32 = load %275
        %x_193:i32 = let %276
        %278:f32 = load_vector_element %color, 2u
        %x_196:f32 = let %278
        %280:f32 = convert %x_193
        %281:f32 = add %x_196, %280
        store_vector_element %color, 2u, %281
        exit_if  # if_12
      }
    }
    %282:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %283:i32 = load %282
    %x_200:i32 = let %283
    %285:f32 = load_vector_element %color, 2u
    %x_203:f32 = let %285
    %287:f32 = convert %x_200
    %288:f32 = add %x_203, %287
    store_vector_element %color, 2u, %288
    %289:f32 = load_vector_element %uv, 0u
    %x_207:f32 = let %289
    %291:f32 = load_vector_element %uv, 1u
    %x_209:f32 = let %291
    %293:f32 = sub %x_207, %x_209
    %294:f32 = abs %293
    %295:bool = lt %294, 0.25f
    if %295 [t: $B27] {  # if_13
      $B27: {  # true
        %296:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %297:i32 = load %296
        %x_216:i32 = let %297
        %299:f32 = load_vector_element %color, 0u
        %x_219:f32 = let %299
        %301:f32 = convert %x_216
        %302:f32 = add %x_219, %301
        store_vector_element %color, 0u, %302
        exit_if  # if_13
      }
    }
    %303:vec3<f32> = load %color
    %x_222:vec3<f32> = let %303
    %305:vec3<f32> = normalize %x_222
    %x_223:vec3<f32> = let %305
    %307:f32 = access %x_223, 0u
    %308:f32 = access %x_223, 1u
    %309:f32 = access %x_223, 2u
    %310:vec4<f32> = construct %307, %308, %309, 1.0f
    store %x_GLF_color, %310
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B28: {
    store %gl_FragCoord, %gl_FragCoord_param
    %313:void = call %main_1
    %314:vec4<f32> = load %x_GLF_color
    %315:main_out = construct %314
    ret %315
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
