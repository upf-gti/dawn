SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 4> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 3> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_9:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %a:ptr<function, f32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %b:ptr<function, f32, read_write> = var
    %c:ptr<function, f32, read_write> = var
    %d:ptr<function, f32, read_write> = var
    %x_67:ptr<function, bool, read_write> = var
    %x_68_phi:ptr<function, bool, read_write> = var
    %12:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
    %13:f32 = load %12
    %x_37:f32 = let %13
    store %a, %x_37
    %15:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
    %16:i32 = load %15
    %x_39:i32 = let %16
    store %i, %x_39
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %18:i32 = load %i
        %x_44:i32 = let %18
        %20:ptr<uniform, i32, read> = access %x_9, 0u, 0i, 0u
        %21:i32 = load %20
        %x_46:i32 = let %21
        %23:bool = lt %x_44, %x_46
        if %23 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %24:f32 = load %a
        %x_49:f32 = let %24
        store %b, %x_49
        %26:f32 = load %b
        %x_50:f32 = let %26
        store %c, %x_50
        %28:f32 = load %c
        %x_51:f32 = let %28
        %30:f32 = asin %x_51
        store %d, %30
        %31:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
        %32:f32 = load %31
        %x_54:f32 = let %32
        store %c, %x_54
        %34:f32 = load %d
        %x_55:f32 = let %34
        store %a, %x_55
        continue  # -> $B4
      }
      $B4: {  # continuing
        %36:i32 = load %i
        %x_56:i32 = let %36
        %38:i32 = add %x_56, 1i
        store %i, %38
        next_iteration  # -> $B3
      }
    }
    %39:ptr<uniform, f32, read> = access %x_6, 0u, 2i, 0u
    %40:f32 = load %39
    %x_59:f32 = let %40
    %42:f32 = load %a
    %x_60:f32 = let %42
    %44:bool = lt %x_59, %x_60
    %x_61:bool = let %44
    store %x_68_phi, %x_61
    if %x_61 [t: $B7] {  # if_2
      $B7: {  # true
        %46:f32 = load %a
        %x_64:f32 = let %46
        %48:ptr<uniform, f32, read> = access %x_6, 0u, 3i, 0u
        %49:f32 = load %48
        %x_66:f32 = let %49
        %51:bool = lt %x_64, %x_66
        store %x_67, %51
        %52:bool = load %x_67
        store %x_68_phi, %52
        exit_if  # if_2
      }
    }
    %53:bool = load %x_68_phi
    %x_68:bool = let %53
    if %x_68 [t: $B8, f: $B9] {  # if_3
      $B8: {  # true
        %55:ptr<uniform, i32, read> = access %x_9, 0u, 2i, 0u
        %56:i32 = load %55
        %x_73:i32 = let %56
        %58:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
        %59:i32 = load %58
        %x_76:i32 = let %59
        %61:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
        %62:i32 = load %61
        %x_79:i32 = let %62
        %64:ptr<uniform, i32, read> = access %x_9, 0u, 2i, 0u
        %65:i32 = load %64
        %x_82:i32 = let %65
        %67:f32 = convert %x_73
        %68:f32 = let %67
        %69:f32 = convert %x_76
        %70:f32 = let %69
        %71:f32 = convert %x_79
        %72:f32 = let %71
        %73:f32 = convert %x_82
        %74:vec4<f32> = construct %68, %70, %72, %73
        store %x_GLF_color, %74
        exit_if  # if_3
      }
      $B9: {  # false
        %75:ptr<uniform, i32, read> = access %x_9, 0u, 1i, 0u
        %76:i32 = load %75
        %x_86:i32 = let %76
        %78:f32 = convert %x_86
        %x_87:f32 = let %78
        %80:vec4<f32> = construct %x_87, %x_87, %x_87, %x_87
        store %x_GLF_color, %80
        exit_if  # if_3
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B10: {
    %82:void = call %main_1
    %83:vec4<f32> = load %x_GLF_color
    %84:main_out = construct %83
    ret %84
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
