SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%makeFrame_ = func():f32 {
  $B2: {
    %x_60:ptr<function, f32, read_write> = var
    %x_63:ptr<function, f32, read_write> = var
    loop [b: $B3] {  # loop_1
      $B3: {  # body
        %x_41:ptr<function, bool, read_write> = var
        %x_8:ptr<function, i32, read_write> = var
        %x_44:ptr<function, f32, read_write> = var
        %x_45:ptr<function, f32, read_write> = var
        %x_42:ptr<function, bool, read_write> = var
        %x_61:ptr<function, bool, read_write> = var
        store %x_41, false
        store %x_8, 0i
        store %x_44, 0.0f
        loop [b: $B4, c: $B5] {  # loop_2
          $B4: {  # body
            %x_50:ptr<function, f32, read_write> = var
            %x_9:ptr<function, i32, read_write> = var
            %x_52:ptr<function, bool, read_write> = var
            %x_7:ptr<function, i32, read_write> = var
            %16:f32 = load %x_44
            store %x_60, %16
            %17:bool = load %x_41
            store %x_61, %17
            %18:i32 = load %x_8
            %19:bool = lt %18, 1i
            if %19 [t: $B6, f: $B7] {  # if_1
              $B6: {  # true
                exit_if  # if_1
              }
              $B7: {  # false
                exit_loop  # loop_2
              }
            }
            %20:f32 = load %x_44
            store %x_50, %20
            %21:i32 = load %x_8
            store %x_9, %21
            %22:bool = load %x_41
            store %x_52, %22
            loop [b: $B8] {  # loop_3
              $B8: {  # body
                %23:ptr<uniform, vec2<f32>, read> = access %x_6, 0u
                %24:f32 = load_vector_element %23, 1u
                %x_54:f32 = let %24
                %26:f32 = load %x_50
                store %x_45, %26
                %27:bool = load %x_52
                store %x_42, %27
                %28:i32 = call %tint_f32_to_i32, %x_54
                %30:bool = lt 1i, %28
                if %30 [t: $B9, f: $B10] {  # if_2
                  $B9: {  # true
                    exit_if  # if_2
                  }
                  $B10: {  # false
                    exit_loop  # loop_3
                  }
                }
                store %x_45, 1.0f
                store %x_42, true
                exit_loop  # loop_3
              }
            }
            %31:f32 = load %x_45
            store %x_60, %31
            %32:bool = load %x_42
            store %x_61, %32
            %33:bool = load %x_42
            if %33 [t: $B11] {  # if_3
              $B11: {  # true
                exit_loop  # loop_2
              }
            }
            continue  # -> $B5
          }
          $B5: {  # continuing
            %34:i32 = load %x_9
            %35:i32 = add %34, 1i
            store %x_7, %35
            %36:bool = load %x_42
            store %x_41, %36
            %37:i32 = load %x_7
            store %x_8, %37
            %38:f32 = load %x_45
            store %x_44, %38
            next_iteration  # -> $B4
          }
        }
        %39:f32 = load %x_60
        store %x_63, %39
        %40:bool = load %x_61
        if %40 [t: $B12] {  # if_4
          $B12: {  # true
            exit_loop  # loop_1
          }
        }
        store %x_63, 1.0f
        exit_loop  # loop_1
      }
    }
    %41:f32 = load %x_63
    ret %41
  }
}
%main_1 = func():void {
  $B13: {
    %43:f32 = call %makeFrame_
    %x_34:f32 = let %43
    store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B14: {
    %46:void = call %main_1
    %47:vec4<f32> = load %x_GLF_color
    %48:main_out = construct %47
    ret %48
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B15: {
    %50:i32 = convert %value
    %51:bool = gte %value, -2147483648.0f
    %52:i32 = select -2147483648i, %50, %51
    %53:bool = lte %value, 2147483520.0f
    %54:i32 = select 2147483647i, %52, %53
    ret %54
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
