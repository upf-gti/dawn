SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 2> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 4> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_10:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %v0:ptr<function, vec4<f32>, read_write> = var
    %v1:ptr<function, vec4<f32>, read_write> = var
    %a:ptr<function, i32, read_write> = var
    %c:ptr<function, i32, read_write> = var
    %9:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
    %10:f32 = load %9
    %x_41:f32 = let %10
    %12:vec4<f32> = construct %x_41, %x_41, %x_41, %x_41
    store %v0, %12
    %13:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
    %14:f32 = load %13
    %x_44:f32 = let %14
    %16:vec4<f32> = construct %x_44, %x_44, %x_44, %x_44
    store %v1, %16
    %17:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
    %18:i32 = load %17
    %x_47:i32 = let %18
    store %a, %x_47
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %20:i32 = load %a
        %x_52:i32 = let %20
        %22:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %23:i32 = load %22
        %x_54:i32 = let %23
        %25:bool = lt %x_52, %x_54
        if %25 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %26:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %27:i32 = load %26
        %x_58:i32 = let %27
        store %c, %x_58
        loop [b: $B7, c: $B8] {  # loop_2
          $B7: {  # body
            %29:i32 = load %c
            %x_63:i32 = let %29
            %31:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
            %32:i32 = load %31
            %x_65:i32 = let %32
            %34:bool = lt %x_63, %x_65
            if %34 [t: $B9, f: $B10] {  # if_2
              $B9: {  # true
                exit_if  # if_2
              }
              $B10: {  # false
                exit_loop  # loop_2
              }
            }
            %35:i32 = load %c
            %x_68:i32 = let %35
            %37:i32 = max %x_68, 0i
            %38:i32 = min %37, 3i
            %x_69:i32 = let %38
            %40:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
            %41:f32 = load %40
            %x_71:f32 = let %41
            %43:f32 = load_vector_element %v0, %x_69
            %x_73:f32 = let %43
            %45:f32 = sub %x_73, %x_71
            store_vector_element %v0, %x_69, %45
            %46:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
            %47:i32 = load %46
            %x_77:i32 = let %47
            %49:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
            %50:i32 = load %49
            %x_79:i32 = let %50
            %52:bool = eq %x_77, %x_79
            if %52 [t: $B11] {  # if_3
              $B11: {  # true
                %53:i32 = load %a
                %x_83:i32 = let %53
                %55:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
                %56:f32 = load %55
                %x_85:f32 = let %56
                %58:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
                %59:f32 = load %58
                %x_87:f32 = let %59
                %61:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
                %62:f32 = load %61
                %x_89:f32 = let %62
                %64:vec4<f32> = load %v0
                %x_91:vec4<f32> = let %64
                %66:i32 = load %a
                %x_93:i32 = let %66
                %68:vec4<f32> = construct %x_85, %x_87, %x_89, 3.0f
                %69:vec4<f32> = smoothstep %68, vec4<f32>(1.0f), %x_91
                %70:f32 = access %69, %x_93
                store_vector_element %v1, %x_83, %70
                exit_if  # if_3
              }
            }
            continue  # -> $B8
          }
          $B8: {  # continuing
            %71:i32 = load %c
            %x_96:i32 = let %71
            %73:i32 = add %x_96, 1i
            store %c, %73
            next_iteration  # -> $B7
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %74:i32 = load %a
        %x_98:i32 = let %74
        %76:i32 = add %x_98, 1i
        store %a, %76
        next_iteration  # -> $B3
      }
    }
    %77:f32 = load_vector_element %v1, 0u
    %x_101:f32 = let %77
    %79:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
    %80:f32 = load %79
    %x_103:f32 = let %80
    %82:bool = eq %x_101, %x_103
    if %82 [t: $B12, f: $B13] {  # if_4
      $B12: {  # true
        %83:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %84:i32 = load %83
        %x_109:i32 = let %84
        %86:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %87:i32 = load %86
        %x_112:i32 = let %87
        %89:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %90:i32 = load %89
        %x_115:i32 = let %90
        %92:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %93:i32 = load %92
        %x_118:i32 = let %93
        %95:f32 = convert %x_109
        %96:f32 = let %95
        %97:f32 = convert %x_112
        %98:f32 = let %97
        %99:f32 = convert %x_115
        %100:f32 = let %99
        %101:f32 = convert %x_118
        %102:vec4<f32> = construct %96, %98, %100, %101
        store %x_GLF_color, %102
        exit_if  # if_4
      }
      $B13: {  # false
        %103:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %104:i32 = load %103
        %x_122:i32 = let %104
        %106:f32 = convert %x_122
        %x_123:f32 = let %106
        %108:vec4<f32> = construct %x_123, %x_123, %x_123, %x_123
        store %x_GLF_color, %108
        exit_if  # if_4
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B14: {
    %110:void = call %main_1
    %111:vec4<f32> = load %x_GLF_color
    %112:main_out = construct %111
    ret %112
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
