SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %data:ptr<private, array<i32, 10>, read_write> = var
  %temp:ptr<private, array<i32, 10>, read_write> = var
  %x_28:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %continue_execution:ptr<private, bool, read_write> = var, true
}

%merge_i1_i1_i1_ = func(%f:ptr<function, i32, read_write>, %mid:ptr<function, i32, read_write>, %to:ptr<function, i32, read_write>):void {
  $B2: {
    %k:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %15:i32 = load %f
    store %k, %15
    %16:i32 = load %f
    store %i, %16
    %17:i32 = load %mid
    %18:i32 = add %17, 1i
    store %j, %18
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %19:i32 = load %i
        %20:i32 = load %mid
        %21:bool = lte %19, %20
        %22:i32 = load %j
        %23:i32 = load %to
        %24:bool = lte %22, %23
        %25:bool = and %21, %24
        if %25 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %26:i32 = load %i
        %27:ptr<private, i32, read_write> = access %data, %26
        %28:i32 = load %27
        %29:i32 = load %j
        %30:ptr<private, i32, read_write> = access %data, %29
        %31:i32 = load %30
        %32:bool = lt %28, %31
        if %32 [t: $B7, f: $B8] {  # if_2
          $B7: {  # true
            %33:i32 = load %k
            %x_288:i32 = let %33
            %35:i32 = load %k
            %36:i32 = add %35, 1i
            store %k, %36
            %37:i32 = load %i
            %x_290:i32 = let %37
            %39:i32 = load %i
            %40:i32 = add %39, 1i
            store %i, %40
            %41:ptr<private, i32, read_write> = access %temp, %x_288
            %42:ptr<private, i32, read_write> = access %data, %x_290
            %43:i32 = load %42
            store %41, %43
            exit_if  # if_2
          }
          $B8: {  # false
            %44:i32 = load %k
            %x_295:i32 = let %44
            %46:i32 = load %k
            %47:i32 = add %46, 1i
            store %k, %47
            %48:i32 = load %j
            %x_297:i32 = let %48
            %50:i32 = load %j
            %51:i32 = add %50, 1i
            store %j, %51
            %52:ptr<private, i32, read_write> = access %temp, %x_295
            %53:ptr<private, i32, read_write> = access %data, %x_297
            %54:i32 = load %53
            store %52, %54
            exit_if  # if_2
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        next_iteration  # -> $B3
      }
    }
    loop [b: $B9, c: $B10] {  # loop_2
      $B9: {  # body
        %55:i32 = load %i
        %56:bool = lt %55, 10i
        %57:i32 = load %i
        %58:i32 = load %mid
        %59:bool = lte %57, %58
        %60:bool = and %56, %59
        if %60 [t: $B11, f: $B12] {  # if_3
          $B11: {  # true
            exit_if  # if_3
          }
          $B12: {  # false
            exit_loop  # loop_2
          }
        }
        %61:i32 = load %k
        %x_313:i32 = let %61
        %63:i32 = load %k
        %64:i32 = add %63, 1i
        store %k, %64
        %65:i32 = load %i
        %x_315:i32 = let %65
        %67:i32 = load %i
        %68:i32 = add %67, 1i
        store %i, %68
        %69:ptr<private, i32, read_write> = access %temp, %x_313
        %70:ptr<private, i32, read_write> = access %data, %x_315
        %71:i32 = load %70
        store %69, %71
        continue  # -> $B10
      }
      $B10: {  # continuing
        next_iteration  # -> $B9
      }
    }
    %72:i32 = load %f
    store %i_1, %72
    loop [b: $B13, c: $B14] {  # loop_3
      $B13: {  # body
        %73:i32 = load %i_1
        %74:i32 = load %to
        %75:bool = lte %73, %74
        if %75 [t: $B15, f: $B16] {  # if_4
          $B15: {  # true
            exit_if  # if_4
          }
          $B16: {  # false
            exit_loop  # loop_3
          }
        }
        %76:i32 = load %i_1
        %x_329:i32 = let %76
        %78:ptr<private, i32, read_write> = access %data, %x_329
        %79:i32 = load %i_1
        %80:ptr<private, i32, read_write> = access %temp, %79
        %81:i32 = load %80
        store %78, %81
        continue  # -> $B14
      }
      $B14: {  # continuing
        %82:i32 = load %i_1
        %83:i32 = add %82, 1i
        store %i_1, %83
        next_iteration  # -> $B13
      }
    }
    ret
  }
}
%mergeSort_ = func():void {
  $B17: {
    %low:ptr<function, i32, read_write> = var
    %high:ptr<function, i32, read_write> = var
    %m:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %f_1:ptr<function, i32, read_write> = var
    %mid_1:ptr<function, i32, read_write> = var
    %to_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    store %low, 0i
    store %high, 9i
    store %m, 1i
    loop [b: $B18, c: $B19] {  # loop_4
      $B18: {  # body
        %95:i32 = load %m
        %96:i32 = load %high
        %97:bool = lte %95, %96
        if %97 [t: $B20, f: $B21] {  # if_5
          $B20: {  # true
            exit_if  # if_5
          }
          $B21: {  # false
            exit_loop  # loop_4
          }
        }
        %98:i32 = load %low
        store %i_2, %98
        loop [b: $B22, c: $B23] {  # loop_5
          $B22: {  # body
            %99:i32 = load %i_2
            %100:i32 = load %high
            %101:bool = lt %99, %100
            if %101 [t: $B24, f: $B25] {  # if_6
              $B24: {  # true
                exit_if  # if_6
              }
              $B25: {  # false
                exit_loop  # loop_5
              }
            }
            %102:i32 = load %i_2
            store %f_1, %102
            %103:i32 = load %i_2
            %104:i32 = load %m
            %105:i32 = add %103, %104
            %106:i32 = sub %105, 1i
            store %mid_1, %106
            %107:i32 = load %i_2
            %108:i32 = load %m
            %109:i32 = mul 2i, %108
            %110:i32 = add %107, %109
            %111:i32 = sub %110, 1i
            %112:i32 = load %high
            %113:i32 = min %111, %112
            store %to_1, %113
            %114:i32 = load %f_1
            store %param, %114
            %115:i32 = load %mid_1
            store %param_1, %115
            %116:i32 = load %to_1
            store %param_2, %116
            %117:void = call %merge_i1_i1_i1_, %param, %param_1, %param_2
            continue  # -> $B23
          }
          $B23: {  # continuing
            %118:i32 = load %i_2
            %119:i32 = load %m
            %120:i32 = mul 2i, %119
            %121:i32 = add %118, %120
            store %i_2, %121
            next_iteration  # -> $B22
          }
        }
        continue  # -> $B19
      }
      $B19: {  # continuing
        %122:i32 = load %m
        %123:i32 = mul 2i, %122
        store %m, %123
        next_iteration  # -> $B18
      }
    }
    ret
  }
}
%main_1 = func():void {
  $B26: {
    %i_3:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %grey:ptr<function, f32, read_write> = var
    %128:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
    %129:f32 = load_vector_element %128, 0u
    %130:i32 = call %tint_f32_to_i32, %129
    store %i_3, %130
    loop [b: $B27, c: $B28] {  # loop_6
      $B27: {  # body
        %132:i32 = load %i_3
        %x_92:i32 = let %132
        switch %x_92 [c: (9i, $B29), c: (8i, $B30), c: (7i, $B31), c: (6i, $B32), c: (5i, $B33), c: (4i, $B34), c: (3i, $B35), c: (2i, $B36), c: (1i, $B37), c: (0i, $B38), c: (default, $B39)] {  # switch_1
          $B29: {  # case
            %134:i32 = load %i_3
            %x_122:i32 = let %134
            %136:ptr<private, i32, read_write> = access %data, %x_122
            store %136, -5i
            exit_switch  # switch_1
          }
          $B30: {  # case
            %137:i32 = load %i_3
            %x_120:i32 = let %137
            %139:ptr<private, i32, read_write> = access %data, %x_120
            store %139, -4i
            exit_switch  # switch_1
          }
          $B31: {  # case
            %140:i32 = load %i_3
            %x_118:i32 = let %140
            %142:ptr<private, i32, read_write> = access %data, %x_118
            store %142, -3i
            exit_switch  # switch_1
          }
          $B32: {  # case
            %143:i32 = load %i_3
            %x_116:i32 = let %143
            %145:ptr<private, i32, read_write> = access %data, %x_116
            store %145, -2i
            exit_switch  # switch_1
          }
          $B33: {  # case
            %146:i32 = load %i_3
            %x_114:i32 = let %146
            %148:ptr<private, i32, read_write> = access %data, %x_114
            store %148, -1i
            exit_switch  # switch_1
          }
          $B34: {  # case
            %149:i32 = load %i_3
            %x_112:i32 = let %149
            %151:ptr<private, i32, read_write> = access %data, %x_112
            store %151, 0i
            exit_switch  # switch_1
          }
          $B35: {  # case
            %152:i32 = load %i_3
            %x_110:i32 = let %152
            %154:ptr<private, i32, read_write> = access %data, %x_110
            store %154, 1i
            exit_switch  # switch_1
          }
          $B36: {  # case
            %155:i32 = load %i_3
            %x_108:i32 = let %155
            %157:ptr<private, i32, read_write> = access %data, %x_108
            store %157, 2i
            exit_switch  # switch_1
          }
          $B37: {  # case
            %158:i32 = load %i_3
            %x_106:i32 = let %158
            %160:ptr<private, i32, read_write> = access %data, %x_106
            store %160, 3i
            exit_switch  # switch_1
          }
          $B38: {  # case
            %161:i32 = load %i_3
            %x_104:i32 = let %161
            %163:ptr<private, i32, read_write> = access %data, %x_104
            store %163, 4i
            exit_switch  # switch_1
          }
          $B39: {  # case
            exit_switch  # switch_1
          }
        }
        %164:i32 = load %i_3
        %165:i32 = add %164, 1i
        store %i_3, %165
        continue  # -> $B28
      }
      $B28: {  # continuing
        %166:i32 = load %i_3
        %x_126:i32 = let %166
        %168:bool = lt %x_126, 10i
        %169:bool = eq %168, false
        break_if %169  # -> [t: exit_loop loop_6, f: $B27]
      }
    }
    store %j_1, 0i
    loop [b: $B40, c: $B41] {  # loop_7
      $B40: {  # body
        %170:i32 = load %j_1
        %171:bool = lt %170, 10i
        %x_133:bool = let %171
        %173:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %174:f32 = load_vector_element %173, 0u
        %175:bool = lte %174, 1.0f
        %176:bool = eq %175, false
        if %176 [t: $B42] {  # if_7
          $B42: {  # true
            store %grey, 1.0f
            exit_if  # if_7
          }
        }
        if %x_133 [t: $B43, f: $B44] {  # if_8
          $B43: {  # true
            exit_if  # if_8
          }
          $B44: {  # false
            exit_loop  # loop_7
          }
        }
        %177:i32 = load %j_1
        %x_140:i32 = let %177
        %179:ptr<private, i32, read_write> = access %temp, %x_140
        %180:i32 = load %j_1
        %181:ptr<private, i32, read_write> = access %data, %180
        %182:i32 = load %181
        store %179, %182
        continue  # -> $B41
      }
      $B41: {  # continuing
        %183:i32 = load %j_1
        %184:i32 = add %183, 1i
        store %j_1, %184
        next_iteration  # -> $B40
      }
    }
    %185:void = call %mergeSort_
    %186:f32 = load_vector_element %gl_FragCoord, 1u
    %187:i32 = call %tint_f32_to_i32, %186
    %188:bool = lt %187, 30i
    if %188 [t: $B45, f: $B46] {  # if_9
      $B45: {  # true
        %189:ptr<private, i32, read_write> = access %data, 0i
        %190:i32 = load %189
        %191:f32 = convert %190
        %192:f32 = div %191, 10.0f
        %193:f32 = add 0.5f, %192
        store %grey, %193
        exit_if  # if_9
      }
      $B46: {  # false
        %194:f32 = load_vector_element %gl_FragCoord, 1u
        %195:i32 = call %tint_f32_to_i32, %194
        %196:bool = lt %195, 60i
        if %196 [t: $B47, f: $B48] {  # if_10
          $B47: {  # true
            %197:ptr<private, i32, read_write> = access %data, 1i
            %198:i32 = load %197
            %199:f32 = convert %198
            %200:f32 = div %199, 10.0f
            %201:f32 = add 0.5f, %200
            store %grey, %201
            exit_if  # if_10
          }
          $B48: {  # false
            %202:f32 = load_vector_element %gl_FragCoord, 1u
            %203:i32 = call %tint_f32_to_i32, %202
            %204:bool = lt %203, 90i
            if %204 [t: $B49, f: $B50] {  # if_11
              $B49: {  # true
                %205:ptr<private, i32, read_write> = access %data, 2i
                %206:i32 = load %205
                %207:f32 = convert %206
                %208:f32 = div %207, 10.0f
                %209:f32 = add 0.5f, %208
                store %grey, %209
                exit_if  # if_11
              }
              $B50: {  # false
                %210:f32 = load_vector_element %gl_FragCoord, 1u
                %211:i32 = call %tint_f32_to_i32, %210
                %212:bool = lt %211, 120i
                if %212 [t: $B51, f: $B52] {  # if_12
                  $B51: {  # true
                    %213:ptr<private, i32, read_write> = access %data, 3i
                    %214:i32 = load %213
                    %215:f32 = convert %214
                    %216:f32 = div %215, 10.0f
                    %217:f32 = add 0.5f, %216
                    store %grey, %217
                    exit_if  # if_12
                  }
                  $B52: {  # false
                    %218:f32 = load_vector_element %gl_FragCoord, 1u
                    %219:i32 = call %tint_f32_to_i32, %218
                    %220:bool = lt %219, 150i
                    if %220 [t: $B53, f: $B54] {  # if_13
                      $B53: {  # true
                        store %continue_execution, false
                        exit_if  # if_13
                      }
                      $B54: {  # false
                        %221:f32 = load_vector_element %gl_FragCoord, 1u
                        %222:i32 = call %tint_f32_to_i32, %221
                        %223:bool = lt %222, 180i
                        if %223 [t: $B55, f: $B56] {  # if_14
                          $B55: {  # true
                            %224:ptr<private, i32, read_write> = access %data, 5i
                            %225:i32 = load %224
                            %226:f32 = convert %225
                            %227:f32 = div %226, 10.0f
                            %228:f32 = add 0.5f, %227
                            store %grey, %228
                            exit_if  # if_14
                          }
                          $B56: {  # false
                            %229:f32 = load_vector_element %gl_FragCoord, 1u
                            %230:i32 = call %tint_f32_to_i32, %229
                            %231:bool = lt %230, 210i
                            if %231 [t: $B57, f: $B58] {  # if_15
                              $B57: {  # true
                                %232:ptr<private, i32, read_write> = access %data, 6i
                                %233:i32 = load %232
                                %234:f32 = convert %233
                                %235:f32 = div %234, 10.0f
                                %236:f32 = add 0.5f, %235
                                store %grey, %236
                                exit_if  # if_15
                              }
                              $B58: {  # false
                                %237:f32 = load_vector_element %gl_FragCoord, 1u
                                %238:i32 = call %tint_f32_to_i32, %237
                                %239:bool = lt %238, 240i
                                if %239 [t: $B59, f: $B60] {  # if_16
                                  $B59: {  # true
                                    %240:ptr<private, i32, read_write> = access %data, 7i
                                    %241:i32 = load %240
                                    %242:f32 = convert %241
                                    %243:f32 = div %242, 10.0f
                                    %244:f32 = add 0.5f, %243
                                    store %grey, %244
                                    exit_if  # if_16
                                  }
                                  $B60: {  # false
                                    %245:f32 = load_vector_element %gl_FragCoord, 1u
                                    %x_240:f32 = let %245
                                    %guard233:ptr<function, bool, read_write> = var, true
                                    %248:i32 = call %tint_f32_to_i32, %x_240
                                    %249:bool = lt %248, 270i
                                    if %249 [t: $B61, f: $B62] {  # if_17
                                      $B61: {  # true
                                        %250:ptr<private, i32, read_write> = access %data, 8i
                                        %251:i32 = load %250
                                        %252:f32 = convert %251
                                        %253:f32 = div %252, 10.0f
                                        %254:f32 = add 0.5f, %253
                                        store %grey, %254
                                        store %guard233, false
                                        exit_if  # if_17
                                      }
                                      $B62: {  # false
                                        %255:bool = load %guard233
                                        if %255 [t: $B63] {  # if_18
                                          $B63: {  # true
                                            %256:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
                                            %257:f32 = load_vector_element %256, 1u
                                            %258:bool = lt 0.0f, %257
                                            %259:bool = eq %258, false
                                            if %259 [t: $B64] {  # if_19
                                              $B64: {  # true
                                                store %guard233, false
                                                exit_if  # if_19
                                              }
                                            }
                                            %260:bool = load %guard233
                                            if %260 [t: $B65] {  # if_20
                                              $B65: {  # true
                                                store %continue_execution, false
                                                exit_if  # if_20
                                              }
                                            }
                                            exit_if  # if_18
                                          }
                                        }
                                        exit_if  # if_17
                                      }
                                    }
                                    exit_if  # if_16
                                  }
                                }
                                exit_if  # if_15
                              }
                            }
                            exit_if  # if_14
                          }
                        }
                        exit_if  # if_13
                      }
                    }
                    exit_if  # if_12
                  }
                }
                exit_if  # if_11
              }
            }
            exit_if  # if_10
          }
        }
        exit_if  # if_9
      }
    }
    %261:f32 = load %grey
    %262:vec3<f32> = construct %261
    %x_256:vec3<f32> = let %262
    %264:f32 = access %x_256, 0u
    %265:f32 = access %x_256, 1u
    %266:f32 = access %x_256, 2u
    %267:vec4<f32> = construct %264, %265, %266, 1.0f
    store %x_GLF_color, %267
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B66: {
    store %gl_FragCoord, %gl_FragCoord_param
    %270:void = call %main_1
    %271:vec4<f32> = load %x_GLF_color
    %272:main_out = construct %271
    %273:bool = load %continue_execution
    %274:bool = eq %273, false
    if %274 [t: $B67] {  # if_21
      $B67: {  # true
        terminate_invocation
      }
    }
    ret %272
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B68: {
    %276:i32 = convert %value
    %277:bool = gte %value, -2147483648.0f
    %278:i32 = select -2147483648i, %276, %277
    %279:bool = lte %value, 2147483520.0f
    %280:i32 = select 2147483647i, %278, %279
    ret %280
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
