SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %data:ptr<private, array<i32, 10>, read_write> = var
  %temp:ptr<private, array<i32, 10>, read_write> = var
  %x_28:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %continue_execution:ptr<private, bool, read_write> = var, true
}

%merge_i1_i1_i1_ = func(%f:ptr<function, i32, read_write>, %mid:ptr<function, i32, read_write>, %to:ptr<function, i32, read_write>):void {
  $B2: {
    %k:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %15:i32 = load %f
    %x_262:i32 = let %15
    store %k, %x_262
    %17:i32 = load %f
    %x_263:i32 = let %17
    store %i, %x_263
    %19:i32 = load %mid
    %x_264:i32 = let %19
    %21:i32 = add %x_264, 1i
    store %j, %21
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %22:i32 = load %i
        %x_270:i32 = let %22
        %24:i32 = load %mid
        %x_271:i32 = let %24
        %26:i32 = load %j
        %x_273:i32 = let %26
        %28:i32 = load %to
        %x_274:i32 = let %28
        %30:bool = lte %x_270, %x_271
        %31:bool = lte %x_273, %x_274
        %32:bool = and %30, %31
        if %32 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %33:i32 = load %i
        %x_278:i32 = let %33
        %35:ptr<private, i32, read_write> = access %data, %x_278
        %36:i32 = load %35
        %x_280:i32 = let %36
        %38:i32 = load %j
        %x_281:i32 = let %38
        %40:ptr<private, i32, read_write> = access %data, %x_281
        %41:i32 = load %40
        %x_283:i32 = let %41
        %43:bool = lt %x_280, %x_283
        if %43 [t: $B7, f: $B8] {  # if_2
          $B7: {  # true
            %44:i32 = load %k
            %x_288:i32 = let %44
            %46:i32 = add %x_288, 1i
            store %k, %46
            %47:i32 = load %i
            %x_290:i32 = let %47
            %49:i32 = add %x_290, 1i
            store %i, %49
            %50:ptr<private, i32, read_write> = access %data, %x_290
            %51:i32 = load %50
            %x_293:i32 = let %51
            %53:ptr<private, i32, read_write> = access %temp, %x_288
            store %53, %x_293
            exit_if  # if_2
          }
          $B8: {  # false
            %54:i32 = load %k
            %x_295:i32 = let %54
            %56:i32 = add %x_295, 1i
            store %k, %56
            %57:i32 = load %j
            %x_297:i32 = let %57
            %59:i32 = add %x_297, 1i
            store %j, %59
            %60:ptr<private, i32, read_write> = access %data, %x_297
            %61:i32 = load %60
            %x_300:i32 = let %61
            %63:ptr<private, i32, read_write> = access %temp, %x_295
            store %63, %x_300
            exit_if  # if_2
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        next_iteration  # -> $B3
      }
    }
    loop [b: $B9, c: $B10] {  # loop_2
      $B9: {  # body
        %64:i32 = load %i
        %x_306:i32 = let %64
        %66:i32 = load %i
        %x_308:i32 = let %66
        %68:i32 = load %mid
        %x_309:i32 = let %68
        %70:bool = lt %x_306, 10i
        %71:bool = lte %x_308, %x_309
        %72:bool = and %70, %71
        if %72 [t: $B11, f: $B12] {  # if_3
          $B11: {  # true
            exit_if  # if_3
          }
          $B12: {  # false
            exit_loop  # loop_2
          }
        }
        %73:i32 = load %k
        %x_313:i32 = let %73
        %75:i32 = add %x_313, 1i
        store %k, %75
        %76:i32 = load %i
        %x_315:i32 = let %76
        %78:i32 = add %x_315, 1i
        store %i, %78
        %79:ptr<private, i32, read_write> = access %data, %x_315
        %80:i32 = load %79
        %x_318:i32 = let %80
        %82:ptr<private, i32, read_write> = access %temp, %x_313
        store %82, %x_318
        continue  # -> $B10
      }
      $B10: {  # continuing
        next_iteration  # -> $B9
      }
    }
    %83:i32 = load %f
    %x_320:i32 = let %83
    store %i_1, %x_320
    loop [b: $B13, c: $B14] {  # loop_3
      $B13: {  # body
        %85:i32 = load %i_1
        %x_325:i32 = let %85
        %87:i32 = load %to
        %x_326:i32 = let %87
        %89:bool = lte %x_325, %x_326
        if %89 [t: $B15, f: $B16] {  # if_4
          $B15: {  # true
            exit_if  # if_4
          }
          $B16: {  # false
            exit_loop  # loop_3
          }
        }
        %90:i32 = load %i_1
        %x_329:i32 = let %90
        %92:i32 = load %i_1
        %x_330:i32 = let %92
        %94:ptr<private, i32, read_write> = access %temp, %x_330
        %95:i32 = load %94
        %x_332:i32 = let %95
        %97:ptr<private, i32, read_write> = access %data, %x_329
        store %97, %x_332
        continue  # -> $B14
      }
      $B14: {  # continuing
        %98:i32 = load %i_1
        %x_334:i32 = let %98
        %100:i32 = add %x_334, 1i
        store %i_1, %100
        next_iteration  # -> $B13
      }
    }
    ret
  }
}
%mergeSort_ = func():void {
  $B17: {
    %low:ptr<function, i32, read_write> = var
    %high:ptr<function, i32, read_write> = var
    %m:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %f_1:ptr<function, i32, read_write> = var
    %mid_1:ptr<function, i32, read_write> = var
    %to_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    store %low, 0i
    store %high, 9i
    store %m, 1i
    loop [b: $B18, c: $B19] {  # loop_4
      $B18: {  # body
        %112:i32 = load %m
        %x_341:i32 = let %112
        %114:i32 = load %high
        %x_342:i32 = let %114
        %116:bool = lte %x_341, %x_342
        if %116 [t: $B20, f: $B21] {  # if_5
          $B20: {  # true
            exit_if  # if_5
          }
          $B21: {  # false
            exit_loop  # loop_4
          }
        }
        %117:i32 = load %low
        %x_345:i32 = let %117
        store %i_2, %x_345
        loop [b: $B22, c: $B23] {  # loop_5
          $B22: {  # body
            %119:i32 = load %i_2
            %x_350:i32 = let %119
            %121:i32 = load %high
            %x_351:i32 = let %121
            %123:bool = lt %x_350, %x_351
            if %123 [t: $B24, f: $B25] {  # if_6
              $B24: {  # true
                exit_if  # if_6
              }
              $B25: {  # false
                exit_loop  # loop_5
              }
            }
            %124:i32 = load %i_2
            %x_354:i32 = let %124
            store %f_1, %x_354
            %126:i32 = load %i_2
            %x_355:i32 = let %126
            %128:i32 = load %m
            %x_356:i32 = let %128
            %130:i32 = add %x_355, %x_356
            %131:i32 = sub %130, 1i
            store %mid_1, %131
            %132:i32 = load %i_2
            %x_359:i32 = let %132
            %134:i32 = load %m
            %x_360:i32 = let %134
            %136:i32 = load %high
            %x_364:i32 = let %136
            %138:i32 = mul 2i, %x_360
            %139:i32 = add %x_359, %138
            %140:i32 = sub %139, 1i
            %141:i32 = min %140, %x_364
            store %to_1, %141
            %142:i32 = load %f_1
            %x_366:i32 = let %142
            store %param, %x_366
            %144:i32 = load %mid_1
            %x_367:i32 = let %144
            store %param_1, %x_367
            %146:i32 = load %to_1
            %x_368:i32 = let %146
            store %param_2, %x_368
            %148:void = call %merge_i1_i1_i1_, %param, %param_1, %param_2
            continue  # -> $B23
          }
          $B23: {  # continuing
            %149:i32 = load %m
            %x_370:i32 = let %149
            %151:i32 = load %i_2
            %x_372:i32 = let %151
            %153:i32 = mul 2i, %x_370
            %154:i32 = add %x_372, %153
            store %i_2, %154
            next_iteration  # -> $B22
          }
        }
        continue  # -> $B19
      }
      $B19: {  # continuing
        %155:i32 = load %m
        %x_374:i32 = let %155
        %157:i32 = mul 2i, %x_374
        store %m, %157
        next_iteration  # -> $B18
      }
    }
    ret
  }
}
%main_1 = func():void {
  $B26: {
    %i_3:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %grey:ptr<function, f32, read_write> = var
    %162:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
    %163:f32 = load_vector_element %162, 0u
    %x_86:f32 = let %163
    %165:i32 = call %tint_f32_to_i32, %x_86
    store %i_3, %165
    loop [b: $B27, c: $B28] {  # loop_6
      $B27: {  # body
        %167:i32 = load %i_3
        %x_92:i32 = let %167
        switch %x_92 [c: (9i, $B29), c: (8i, $B30), c: (7i, $B31), c: (6i, $B32), c: (5i, $B33), c: (4i, $B34), c: (3i, $B35), c: (2i, $B36), c: (1i, $B37), c: (0i, $B38), c: (default, $B39)] {  # switch_1
          $B29: {  # case
            %169:i32 = load %i_3
            %x_122:i32 = let %169
            %171:ptr<private, i32, read_write> = access %data, %x_122
            store %171, -5i
            exit_switch  # switch_1
          }
          $B30: {  # case
            %172:i32 = load %i_3
            %x_120:i32 = let %172
            %174:ptr<private, i32, read_write> = access %data, %x_120
            store %174, -4i
            exit_switch  # switch_1
          }
          $B31: {  # case
            %175:i32 = load %i_3
            %x_118:i32 = let %175
            %177:ptr<private, i32, read_write> = access %data, %x_118
            store %177, -3i
            exit_switch  # switch_1
          }
          $B32: {  # case
            %178:i32 = load %i_3
            %x_116:i32 = let %178
            %180:ptr<private, i32, read_write> = access %data, %x_116
            store %180, -2i
            exit_switch  # switch_1
          }
          $B33: {  # case
            %181:i32 = load %i_3
            %x_114:i32 = let %181
            %183:ptr<private, i32, read_write> = access %data, %x_114
            store %183, -1i
            exit_switch  # switch_1
          }
          $B34: {  # case
            %184:i32 = load %i_3
            %x_112:i32 = let %184
            %186:ptr<private, i32, read_write> = access %data, %x_112
            store %186, 0i
            exit_switch  # switch_1
          }
          $B35: {  # case
            %187:i32 = load %i_3
            %x_110:i32 = let %187
            %189:ptr<private, i32, read_write> = access %data, %x_110
            store %189, 1i
            exit_switch  # switch_1
          }
          $B36: {  # case
            %190:i32 = load %i_3
            %x_108:i32 = let %190
            %192:ptr<private, i32, read_write> = access %data, %x_108
            store %192, 2i
            exit_switch  # switch_1
          }
          $B37: {  # case
            %193:i32 = load %i_3
            %x_106:i32 = let %193
            %195:ptr<private, i32, read_write> = access %data, %x_106
            store %195, 3i
            exit_switch  # switch_1
          }
          $B38: {  # case
            %196:i32 = load %i_3
            %x_104:i32 = let %196
            %198:ptr<private, i32, read_write> = access %data, %x_104
            store %198, 4i
            exit_switch  # switch_1
          }
          $B39: {  # case
            exit_switch  # switch_1
          }
        }
        %199:i32 = load %i_3
        %x_124:i32 = let %199
        %201:i32 = add %x_124, 1i
        store %i_3, %201
        continue  # -> $B28
      }
      $B28: {  # continuing
        %202:i32 = load %i_3
        %x_126:i32 = let %202
        %204:bool = lt %x_126, 10i
        %205:bool = eq %204, false
        break_if %205  # -> [t: exit_loop loop_6, f: $B27]
      }
    }
    store %j_1, 0i
    loop [b: $B40, c: $B41] {  # loop_7
      $B40: {  # body
        %206:i32 = load %j_1
        %x_132:i32 = let %206
        %208:bool = lt %x_132, 10i
        %x_133:bool = let %208
        %210:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %211:f32 = load_vector_element %210, 0u
        %x_135:f32 = let %211
        %213:bool = lte %x_135, 1.0f
        %214:bool = eq %213, false
        if %214 [t: $B42] {  # if_7
          $B42: {  # true
            store %grey, 1.0f
            exit_if  # if_7
          }
        }
        if %x_133 [t: $B43, f: $B44] {  # if_8
          $B43: {  # true
            exit_if  # if_8
          }
          $B44: {  # false
            exit_loop  # loop_7
          }
        }
        %215:i32 = load %j_1
        %x_140:i32 = let %215
        %217:i32 = load %j_1
        %x_141:i32 = let %217
        %219:ptr<private, i32, read_write> = access %data, %x_141
        %220:i32 = load %219
        %x_143:i32 = let %220
        %222:ptr<private, i32, read_write> = access %temp, %x_140
        store %222, %x_143
        continue  # -> $B41
      }
      $B41: {  # continuing
        %223:i32 = load %j_1
        %x_145:i32 = let %223
        %225:i32 = add %x_145, 1i
        store %j_1, %225
        next_iteration  # -> $B40
      }
    }
    %226:void = call %mergeSort_
    %227:f32 = load_vector_element %gl_FragCoord, 1u
    %x_149:f32 = let %227
    %229:i32 = call %tint_f32_to_i32, %x_149
    %230:bool = lt %229, 30i
    if %230 [t: $B45, f: $B46] {  # if_9
      $B45: {  # true
        %231:ptr<private, i32, read_write> = access %data, 0i
        %232:i32 = load %231
        %x_156:i32 = let %232
        %234:f32 = convert %x_156
        %235:f32 = div %234, 10.0f
        %236:f32 = add 0.5f, %235
        store %grey, %236
        exit_if  # if_9
      }
      $B46: {  # false
        %237:f32 = load_vector_element %gl_FragCoord, 1u
        %x_161:f32 = let %237
        %239:i32 = call %tint_f32_to_i32, %x_161
        %240:bool = lt %239, 60i
        if %240 [t: $B47, f: $B48] {  # if_10
          $B47: {  # true
            %241:ptr<private, i32, read_write> = access %data, 1i
            %242:i32 = load %241
            %x_168:i32 = let %242
            %244:f32 = convert %x_168
            %245:f32 = div %244, 10.0f
            %246:f32 = add 0.5f, %245
            store %grey, %246
            exit_if  # if_10
          }
          $B48: {  # false
            %247:f32 = load_vector_element %gl_FragCoord, 1u
            %x_173:f32 = let %247
            %249:i32 = call %tint_f32_to_i32, %x_173
            %250:bool = lt %249, 90i
            if %250 [t: $B49, f: $B50] {  # if_11
              $B49: {  # true
                %251:ptr<private, i32, read_write> = access %data, 2i
                %252:i32 = load %251
                %x_180:i32 = let %252
                %254:f32 = convert %x_180
                %255:f32 = div %254, 10.0f
                %256:f32 = add 0.5f, %255
                store %grey, %256
                exit_if  # if_11
              }
              $B50: {  # false
                %257:f32 = load_vector_element %gl_FragCoord, 1u
                %x_185:f32 = let %257
                %259:i32 = call %tint_f32_to_i32, %x_185
                %260:bool = lt %259, 120i
                if %260 [t: $B51, f: $B52] {  # if_12
                  $B51: {  # true
                    %261:ptr<private, i32, read_write> = access %data, 3i
                    %262:i32 = load %261
                    %x_192:i32 = let %262
                    %264:f32 = convert %x_192
                    %265:f32 = div %264, 10.0f
                    %266:f32 = add 0.5f, %265
                    store %grey, %266
                    exit_if  # if_12
                  }
                  $B52: {  # false
                    %267:f32 = load_vector_element %gl_FragCoord, 1u
                    %x_197:f32 = let %267
                    %269:i32 = call %tint_f32_to_i32, %x_197
                    %270:bool = lt %269, 150i
                    if %270 [t: $B53, f: $B54] {  # if_13
                      $B53: {  # true
                        store %continue_execution, false
                        exit_if  # if_13
                      }
                      $B54: {  # false
                        %271:f32 = load_vector_element %gl_FragCoord, 1u
                        %x_204:f32 = let %271
                        %273:i32 = call %tint_f32_to_i32, %x_204
                        %274:bool = lt %273, 180i
                        if %274 [t: $B55, f: $B56] {  # if_14
                          $B55: {  # true
                            %275:ptr<private, i32, read_write> = access %data, 5i
                            %276:i32 = load %275
                            %x_211:i32 = let %276
                            %278:f32 = convert %x_211
                            %279:f32 = div %278, 10.0f
                            %280:f32 = add 0.5f, %279
                            store %grey, %280
                            exit_if  # if_14
                          }
                          $B56: {  # false
                            %281:f32 = load_vector_element %gl_FragCoord, 1u
                            %x_216:f32 = let %281
                            %283:i32 = call %tint_f32_to_i32, %x_216
                            %284:bool = lt %283, 210i
                            if %284 [t: $B57, f: $B58] {  # if_15
                              $B57: {  # true
                                %285:ptr<private, i32, read_write> = access %data, 6i
                                %286:i32 = load %285
                                %x_223:i32 = let %286
                                %288:f32 = convert %x_223
                                %289:f32 = div %288, 10.0f
                                %290:f32 = add 0.5f, %289
                                store %grey, %290
                                exit_if  # if_15
                              }
                              $B58: {  # false
                                %291:f32 = load_vector_element %gl_FragCoord, 1u
                                %x_228:f32 = let %291
                                %293:i32 = call %tint_f32_to_i32, %x_228
                                %294:bool = lt %293, 240i
                                if %294 [t: $B59, f: $B60] {  # if_16
                                  $B59: {  # true
                                    %295:ptr<private, i32, read_write> = access %data, 7i
                                    %296:i32 = load %295
                                    %x_235:i32 = let %296
                                    %298:f32 = convert %x_235
                                    %299:f32 = div %298, 10.0f
                                    %300:f32 = add 0.5f, %299
                                    store %grey, %300
                                    exit_if  # if_16
                                  }
                                  $B60: {  # false
                                    %301:f32 = load_vector_element %gl_FragCoord, 1u
                                    %x_240:f32 = let %301
                                    %guard233:ptr<function, bool, read_write> = var, true
                                    %304:i32 = call %tint_f32_to_i32, %x_240
                                    %305:bool = lt %304, 270i
                                    if %305 [t: $B61, f: $B62] {  # if_17
                                      $B61: {  # true
                                        %306:ptr<private, i32, read_write> = access %data, 8i
                                        %307:i32 = load %306
                                        %x_247:i32 = let %307
                                        %309:f32 = convert %x_247
                                        %310:f32 = div %309, 10.0f
                                        %311:f32 = add 0.5f, %310
                                        store %grey, %311
                                        store %guard233, false
                                        exit_if  # if_17
                                      }
                                      $B62: {  # false
                                        %312:bool = load %guard233
                                        if %312 [t: $B63] {  # if_18
                                          $B63: {  # true
                                            %313:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
                                            %314:f32 = load_vector_element %313, 1u
                                            %x_252:f32 = let %314
                                            %316:bool = lt 0.0f, %x_252
                                            %317:bool = eq %316, false
                                            if %317 [t: $B64] {  # if_19
                                              $B64: {  # true
                                                store %guard233, false
                                                exit_if  # if_19
                                              }
                                            }
                                            %318:bool = load %guard233
                                            if %318 [t: $B65] {  # if_20
                                              $B65: {  # true
                                                store %continue_execution, false
                                                exit_if  # if_20
                                              }
                                            }
                                            exit_if  # if_18
                                          }
                                        }
                                        exit_if  # if_17
                                      }
                                    }
                                    exit_if  # if_16
                                  }
                                }
                                exit_if  # if_15
                              }
                            }
                            exit_if  # if_14
                          }
                        }
                        exit_if  # if_13
                      }
                    }
                    exit_if  # if_12
                  }
                }
                exit_if  # if_11
              }
            }
            exit_if  # if_10
          }
        }
        exit_if  # if_9
      }
    }
    %319:f32 = load %grey
    %x_255:f32 = let %319
    %321:vec3<f32> = construct %x_255, %x_255, %x_255
    %x_256:vec3<f32> = let %321
    %323:f32 = access %x_256, 0u
    %324:f32 = access %x_256, 1u
    %325:f32 = access %x_256, 2u
    %326:vec4<f32> = construct %323, %324, %325, 1.0f
    store %x_GLF_color, %326
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B66: {
    store %gl_FragCoord, %gl_FragCoord_param
    %329:void = call %main_1
    %330:vec4<f32> = load %x_GLF_color
    %331:main_out = construct %330
    %332:bool = load %continue_execution
    %333:bool = eq %332, false
    if %333 [t: $B67] {  # if_21
      $B67: {  # true
        terminate_invocation
      }
    }
    ret %331
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B68: {
    %335:i32 = convert %value
    %336:bool = gte %value, -2147483648.0f
    %337:i32 = select -2147483648i, %335, %336
    %338:bool = lte %value, 2147483520.0f
    %339:i32 = select 2147483647i, %337, %338
    ret %339
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
