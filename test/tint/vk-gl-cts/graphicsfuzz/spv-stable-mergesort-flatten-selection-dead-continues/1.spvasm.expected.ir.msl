SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %data:ptr<private, array<i32, 10>, read_write> = var
  %temp:ptr<private, array<i32, 10>, read_write> = var
  %x_28:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %continue_execution:ptr<private, bool, read_write> = var, true
}

%merge_i1_i1_i1_ = func(%f:ptr<function, i32, read_write>, %mid:ptr<function, i32, read_write>, %to:ptr<function, i32, read_write>):void {
  $B2: {
    %k:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %15:i32 = load %f
    store %k, %15
    %16:i32 = load %f
    store %i, %16
    %17:i32 = load %mid
    %18:i32 = add %17, 1i
    store %j, %18
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %x_285:ptr<function, i32, read_write> = var
        %x_286:ptr<function, i32, read_write> = var
        %x_287:ptr<function, i32, read_write> = var
        %x_305:ptr<function, i32, read_write> = var
        %x_306:ptr<function, i32, read_write> = var
        %x_307:ptr<function, i32, read_write> = var
        %x_320:ptr<function, i32, read_write> = var
        %x_324:ptr<function, i32, read_write> = var
        %x_328:ptr<function, i32, read_write> = var
        %x_339:ptr<function, i32, read_write> = var
        %x_338:ptr<function, i32, read_write> = var
        %x_340:ptr<function, i32, read_write> = var
        %x_352:ptr<function, i32, read_write> = var
        %x_351:ptr<function, i32, read_write> = var
        %x_353:ptr<function, i32, read_write> = var
        %x_366:ptr<function, i32, read_write> = var
        %x_365:ptr<function, i32, read_write> = var
        %x_367:ptr<function, i32, read_write> = var
        %37:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %38:f32 = load_vector_element %37, 0u
        %39:bool = gte 1.0f, %38
        if %39 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            continue  # -> $B4
          }
        }
        %40:i32 = load %i
        %41:i32 = load %mid
        %42:bool = lte %40, %41
        %43:i32 = load %j
        %44:i32 = load %to
        %45:bool = lte %43, %44
        %46:bool = and %42, %45
        if %46 [t: $B7, f: $B8] {  # if_2
          $B7: {  # true
            exit_if  # if_2
          }
          $B8: {  # false
            exit_loop  # loop_1
          }
        }
        %47:i32 = load %i
        %48:ptr<private, i32, read_write> = access %data, %47
        %49:i32 = load %48
        %50:i32 = load %j
        %51:ptr<private, i32, read_write> = access %data, %50
        %52:i32 = load %51
        %53:bool = lt %49, %52
        %x_280:bool = let %53
        if %x_280 [t: $B9, f: $B10] {  # if_3
          $B9: {  # true
            %55:i32 = load %k
            store %x_285, %55
            %56:i32 = load %x_285
            store %x_287, %56
            exit_if  # if_3
          }
          $B10: {  # false
            store %x_286, 0i
            %57:i32 = load %x_286
            store %x_287, %57
            exit_if  # if_3
          }
        }
        %58:i32 = load %x_287
        %59:i32 = add %58, 1i
        %x_288:i32 = let %59
        if %x_280 [t: $B11] {  # if_4
          $B11: {  # true
            store %k, %x_288
            %61:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
            %62:f32 = load_vector_element %61, 0u
            %63:bool = lte 1.0f, %62
            %64:bool = eq %63, false
            if %64 [t: $B12, f: $B13] {  # if_5
              $B12: {  # true
                exit_if  # if_5
              }
              $B13: {  # false
                continue  # -> $B4
              }
            }
            exit_if  # if_4
          }
        }
        %65:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %66:f32 = load_vector_element %65, 1u
        %67:bool = gte %66, 0.0f
        if %67 [t: $B14, f: $B15] {  # if_6
          $B14: {  # true
            exit_if  # if_6
          }
          $B15: {  # false
            continue  # -> $B4
          }
        }
        %x_300:i32 = let 0i
        if %x_280 [t: $B16, f: $B17] {  # if_7
          $B16: {  # true
            %69:i32 = load %i
            store %x_305, %69
            %70:i32 = load %x_305
            store %x_307, %70
            exit_if  # if_7
          }
          $B17: {  # false
            store %x_306, 0i
            %71:i32 = load %x_306
            store %x_307, %71
            exit_if  # if_7
          }
        }
        %72:i32 = load %x_307
        %73:i32 = select %x_300, %72, %x_280
        %x_309:i32 = let %73
        if %x_280 [t: $B18] {  # if_8
          $B18: {  # true
            %75:i32 = add %x_309, 1i
            store %i, %75
            exit_if  # if_8
          }
        }
        %x_315:i32 = let 0i
        if %x_280 [t: $B19, f: $B20] {  # if_9
          $B19: {  # true
            %77:ptr<private, i32, read_write> = access %data, %x_309
            %78:i32 = load %77
            store %x_320, %78
            %79:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
            %80:f32 = load_vector_element %79, 1u
            %x_322:f32 = let %80
            %82:i32 = load %x_320
            store %x_328, %82
            %83:bool = lte 0.0f, %x_322
            %84:bool = eq %83, false
            if %84 [t: $B21] {  # if_10
              $B21: {  # true
                continue  # -> $B4
              }
            }
            exit_if  # if_9
          }
          $B20: {  # false
            store %x_324, 0i
            %85:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
            %86:f32 = load_vector_element %85, 1u
            %x_326:f32 = let %86
            %88:i32 = load %x_324
            store %x_328, %88
            %89:bool = lt %x_326, 0.0f
            %90:bool = eq %89, false
            if %90 [t: $B22, f: $B23] {  # if_11
              $B22: {  # true
                exit_if  # if_11
              }
              $B23: {  # false
                continue  # -> $B4
              }
            }
            exit_if  # if_9
          }
        }
        if %x_280 [t: $B24] {  # if_12
          $B24: {  # true
            %91:i32 = load %x_287
            %92:ptr<private, i32, read_write> = access %temp, %91
            %93:ptr<private, i32, read_write> = let %92
            %94:i32 = load %x_328
            %95:i32 = select %x_315, %94, %x_280
            store %93, %95
            exit_if  # if_12
          }
        }
        if %x_280 [t: $B25, f: $B26] {  # if_13
          $B25: {  # true
            store %x_339, 0i
            %96:i32 = load %x_339
            store %x_340, %96
            exit_if  # if_13
          }
          $B26: {  # false
            %97:i32 = load %k
            store %x_338, %97
            %98:i32 = load %x_338
            store %x_340, %98
            exit_if  # if_13
          }
        }
        if %x_280 [t: $B27, f: $B28] {  # if_14
          $B27: {  # true
            exit_if  # if_14
          }
          $B28: {  # false
            %99:i32 = load %x_340
            %100:i32 = add %99, 1i
            store %k, %100
            exit_if  # if_14
          }
        }
        %101:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %102:f32 = load_vector_element %101, 0u
        %103:bool = lte 1.0f, %102
        %104:bool = eq %103, false
        if %104 [t: $B29, f: $B30] {  # if_15
          $B29: {  # true
            exit_if  # if_15
          }
          $B30: {  # false
            continue  # -> $B4
          }
        }
        if %x_280 [t: $B31, f: $B32] {  # if_16
          $B31: {  # true
            store %x_352, 0i
            %105:i32 = load %x_352
            store %x_353, %105
            exit_if  # if_16
          }
          $B32: {  # false
            %106:i32 = load %j
            store %x_351, %106
            %107:i32 = load %x_351
            store %x_353, %107
            exit_if  # if_16
          }
        }
        %108:i32 = load %x_353
        %109:i32 = select %108, 0i, %x_280
        %x_357:i32 = let %109
        if %x_280 [t: $B33, f: $B34] {  # if_17
          $B33: {  # true
            exit_if  # if_17
          }
          $B34: {  # false
            %111:i32 = add %x_357, 1i
            store %j, %111
            exit_if  # if_17
          }
        }
        if %x_280 [t: $B35, f: $B36] {  # if_18
          $B35: {  # true
            store %x_366, 0i
            %112:i32 = load %x_366
            store %x_367, %112
            exit_if  # if_18
          }
          $B36: {  # false
            %113:ptr<private, i32, read_write> = access %data, %x_357
            %114:i32 = load %113
            store %x_365, %114
            %115:i32 = load %x_365
            store %x_367, %115
            exit_if  # if_18
          }
        }
        if %x_280 [t: $B37, f: $B38] {  # if_19
          $B37: {  # true
            exit_if  # if_19
          }
          $B38: {  # false
            %116:i32 = load %x_340
            %117:ptr<private, i32, read_write> = access %temp, %116
            %118:i32 = load %x_367
            store %117, %118
            exit_if  # if_19
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        next_iteration  # -> $B3
      }
    }
    loop [b: $B39, c: $B40] {  # loop_2
      $B39: {  # body
        %119:i32 = load %i
        %120:bool = lt %119, 10i
        %121:i32 = load %i
        %122:i32 = load %mid
        %123:bool = lte %121, %122
        %124:bool = and %120, %123
        if %124 [t: $B41, f: $B42] {  # if_20
          $B41: {  # true
            exit_if  # if_20
          }
          $B42: {  # false
            exit_loop  # loop_2
          }
        }
        %125:i32 = load %k
        %x_383:i32 = let %125
        %127:i32 = load %k
        %128:i32 = add %127, 1i
        store %k, %128
        %129:i32 = load %i
        %x_385:i32 = let %129
        %131:i32 = load %i
        %132:i32 = add %131, 1i
        store %i, %132
        %133:ptr<private, i32, read_write> = access %temp, %x_383
        %134:ptr<private, i32, read_write> = access %data, %x_385
        %135:i32 = load %134
        store %133, %135
        continue  # -> $B40
      }
      $B40: {  # continuing
        next_iteration  # -> $B39
      }
    }
    %136:i32 = load %f
    store %i_1, %136
    loop [b: $B43, c: $B44] {  # loop_3
      $B43: {  # body
        %137:i32 = load %i_1
        %138:i32 = load %to
        %139:bool = lte %137, %138
        if %139 [t: $B45, f: $B46] {  # if_21
          $B45: {  # true
            exit_if  # if_21
          }
          $B46: {  # false
            exit_loop  # loop_3
          }
        }
        %140:i32 = load %i_1
        %x_399:i32 = let %140
        %142:ptr<private, i32, read_write> = access %data, %x_399
        %143:i32 = load %i_1
        %144:ptr<private, i32, read_write> = access %temp, %143
        %145:i32 = load %144
        store %142, %145
        continue  # -> $B44
      }
      $B44: {  # continuing
        %146:i32 = load %i_1
        %147:i32 = add %146, 1i
        store %i_1, %147
        next_iteration  # -> $B43
      }
    }
    ret
  }
}
%mergeSort_ = func():void {
  $B47: {
    %low:ptr<function, i32, read_write> = var
    %high:ptr<function, i32, read_write> = var
    %m:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %f_1:ptr<function, i32, read_write> = var
    %mid_1:ptr<function, i32, read_write> = var
    %to_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    store %low, 0i
    store %high, 9i
    store %m, 1i
    loop [b: $B48, c: $B49] {  # loop_4
      $B48: {  # body
        %159:i32 = load %m
        %160:i32 = load %high
        %161:bool = lte %159, %160
        if %161 [t: $B50, f: $B51] {  # if_22
          $B50: {  # true
            exit_if  # if_22
          }
          $B51: {  # false
            exit_loop  # loop_4
          }
        }
        %162:i32 = load %low
        store %i_2, %162
        loop [b: $B52, c: $B53] {  # loop_5
          $B52: {  # body
            %163:i32 = load %i_2
            %164:i32 = load %high
            %165:bool = lt %163, %164
            if %165 [t: $B54, f: $B55] {  # if_23
              $B54: {  # true
                exit_if  # if_23
              }
              $B55: {  # false
                exit_loop  # loop_5
              }
            }
            %166:i32 = load %i_2
            store %f_1, %166
            %167:i32 = load %i_2
            %168:i32 = load %m
            %169:i32 = add %167, %168
            %170:i32 = sub %169, 1i
            store %mid_1, %170
            %171:i32 = load %i_2
            %172:i32 = load %m
            %173:i32 = mul 2i, %172
            %174:i32 = add %171, %173
            %175:i32 = sub %174, 1i
            %176:i32 = load %high
            %177:i32 = min %175, %176
            store %to_1, %177
            %178:i32 = load %f_1
            store %param, %178
            %179:i32 = load %mid_1
            store %param_1, %179
            %180:i32 = load %to_1
            store %param_2, %180
            %181:void = call %merge_i1_i1_i1_, %param, %param_1, %param_2
            continue  # -> $B53
          }
          $B53: {  # continuing
            %182:i32 = load %i_2
            %183:i32 = load %m
            %184:i32 = mul 2i, %183
            %185:i32 = add %182, %184
            store %i_2, %185
            next_iteration  # -> $B52
          }
        }
        continue  # -> $B49
      }
      $B49: {  # continuing
        %186:i32 = load %m
        %187:i32 = mul 2i, %186
        store %m, %187
        next_iteration  # -> $B48
      }
    }
    ret
  }
}
%main_1 = func():void {
  $B56: {
    %i_3:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %grey:ptr<function, f32, read_write> = var
    %192:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
    %193:f32 = load_vector_element %192, 0u
    %194:i32 = call %tint_f32_to_i32, %193
    store %i_3, %194
    loop [b: $B57, c: $B58] {  # loop_6
      $B57: {  # body
        %196:i32 = load %i_3
        %x_94:i32 = let %196
        switch %x_94 [c: (9i, $B59), c: (8i, $B60), c: (7i, $B61), c: (6i, $B62), c: (5i, $B63), c: (4i, $B64), c: (3i, $B65), c: (2i, $B66), c: (1i, $B67), c: (0i, $B68), c: (default, $B69)] {  # switch_1
          $B59: {  # case
            %198:i32 = load %i_3
            %x_124:i32 = let %198
            %200:ptr<private, i32, read_write> = access %data, %x_124
            store %200, -5i
            exit_switch  # switch_1
          }
          $B60: {  # case
            %201:i32 = load %i_3
            %x_122:i32 = let %201
            %203:ptr<private, i32, read_write> = access %data, %x_122
            store %203, -4i
            exit_switch  # switch_1
          }
          $B61: {  # case
            %204:i32 = load %i_3
            %x_120:i32 = let %204
            %206:ptr<private, i32, read_write> = access %data, %x_120
            store %206, -3i
            exit_switch  # switch_1
          }
          $B62: {  # case
            %207:i32 = load %i_3
            %x_118:i32 = let %207
            %209:ptr<private, i32, read_write> = access %data, %x_118
            store %209, -2i
            exit_switch  # switch_1
          }
          $B63: {  # case
            %210:i32 = load %i_3
            %x_116:i32 = let %210
            %212:ptr<private, i32, read_write> = access %data, %x_116
            store %212, -1i
            exit_switch  # switch_1
          }
          $B64: {  # case
            %213:i32 = load %i_3
            %x_114:i32 = let %213
            %215:ptr<private, i32, read_write> = access %data, %x_114
            store %215, 0i
            exit_switch  # switch_1
          }
          $B65: {  # case
            %216:i32 = load %i_3
            %x_112:i32 = let %216
            %218:ptr<private, i32, read_write> = access %data, %x_112
            store %218, 1i
            exit_switch  # switch_1
          }
          $B66: {  # case
            %219:i32 = load %i_3
            %x_110:i32 = let %219
            %221:ptr<private, i32, read_write> = access %data, %x_110
            store %221, 2i
            exit_switch  # switch_1
          }
          $B67: {  # case
            %222:i32 = load %i_3
            %x_108:i32 = let %222
            %224:ptr<private, i32, read_write> = access %data, %x_108
            store %224, 3i
            exit_switch  # switch_1
          }
          $B68: {  # case
            %225:i32 = load %i_3
            %x_106:i32 = let %225
            %227:ptr<private, i32, read_write> = access %data, %x_106
            store %227, 4i
            exit_switch  # switch_1
          }
          $B69: {  # case
            exit_switch  # switch_1
          }
        }
        %228:i32 = load %i_3
        %229:i32 = add %228, 1i
        store %i_3, %229
        continue  # -> $B58
      }
      $B58: {  # continuing
        %230:i32 = load %i_3
        %x_128:i32 = let %230
        %232:bool = lt %x_128, 10i
        %233:bool = eq %232, false
        break_if %233  # -> [t: exit_loop loop_6, f: $B57]
      }
    }
    store %j_1, 0i
    loop [b: $B70, c: $B71] {  # loop_7
      $B70: {  # body
        %234:i32 = load %j_1
        %235:bool = lt %234, 10i
        if %235 [t: $B72, f: $B73] {  # if_24
          $B72: {  # true
            exit_if  # if_24
          }
          $B73: {  # false
            exit_loop  # loop_7
          }
        }
        %236:i32 = load %j_1
        %x_137:i32 = let %236
        %238:ptr<private, i32, read_write> = access %temp, %x_137
        %239:i32 = load %j_1
        %240:ptr<private, i32, read_write> = access %data, %239
        %241:i32 = load %240
        store %238, %241
        continue  # -> $B71
      }
      $B71: {  # continuing
        %242:i32 = load %j_1
        %243:i32 = add %242, 1i
        store %j_1, %243
        next_iteration  # -> $B70
      }
    }
    %244:void = call %mergeSort_
    %245:f32 = load_vector_element %gl_FragCoord, 1u
    %246:i32 = call %tint_f32_to_i32, %245
    %247:bool = lt %246, 30i
    if %247 [t: $B74, f: $B75] {  # if_25
      $B74: {  # true
        %248:ptr<private, i32, read_write> = access %data, 0i
        %249:i32 = load %248
        %250:f32 = convert %249
        %251:f32 = div %250, 10.0f
        %252:f32 = add 0.5f, %251
        store %grey, %252
        exit_if  # if_25
      }
      $B75: {  # false
        %253:f32 = load_vector_element %gl_FragCoord, 1u
        %254:i32 = call %tint_f32_to_i32, %253
        %255:bool = lt %254, 60i
        if %255 [t: $B76, f: $B77] {  # if_26
          $B76: {  # true
            %256:ptr<private, i32, read_write> = access %data, 1i
            %257:i32 = load %256
            %258:f32 = convert %257
            %259:f32 = div %258, 10.0f
            %260:f32 = add 0.5f, %259
            store %grey, %260
            exit_if  # if_26
          }
          $B77: {  # false
            %261:f32 = load_vector_element %gl_FragCoord, 1u
            %262:i32 = call %tint_f32_to_i32, %261
            %263:bool = lt %262, 90i
            if %263 [t: $B78, f: $B79] {  # if_27
              $B78: {  # true
                %264:ptr<private, i32, read_write> = access %data, 2i
                %265:i32 = load %264
                %266:f32 = convert %265
                %267:f32 = div %266, 10.0f
                %268:f32 = add 0.5f, %267
                store %grey, %268
                exit_if  # if_27
              }
              $B79: {  # false
                %269:f32 = load_vector_element %gl_FragCoord, 1u
                %270:i32 = call %tint_f32_to_i32, %269
                %271:bool = lt %270, 120i
                if %271 [t: $B80, f: $B81] {  # if_28
                  $B80: {  # true
                    %272:ptr<private, i32, read_write> = access %data, 3i
                    %273:i32 = load %272
                    %274:f32 = convert %273
                    %275:f32 = div %274, 10.0f
                    %276:f32 = add 0.5f, %275
                    store %grey, %276
                    exit_if  # if_28
                  }
                  $B81: {  # false
                    %277:f32 = load_vector_element %gl_FragCoord, 1u
                    %278:i32 = call %tint_f32_to_i32, %277
                    %279:bool = lt %278, 150i
                    if %279 [t: $B82, f: $B83] {  # if_29
                      $B82: {  # true
                        store %continue_execution, false
                        exit_if  # if_29
                      }
                      $B83: {  # false
                        %280:f32 = load_vector_element %gl_FragCoord, 1u
                        %281:i32 = call %tint_f32_to_i32, %280
                        %282:bool = lt %281, 180i
                        if %282 [t: $B84, f: $B85] {  # if_30
                          $B84: {  # true
                            %283:ptr<private, i32, read_write> = access %data, 5i
                            %284:i32 = load %283
                            %285:f32 = convert %284
                            %286:f32 = div %285, 10.0f
                            %287:f32 = add 0.5f, %286
                            store %grey, %287
                            exit_if  # if_30
                          }
                          $B85: {  # false
                            %288:f32 = load_vector_element %gl_FragCoord, 1u
                            %289:i32 = call %tint_f32_to_i32, %288
                            %290:bool = lt %289, 210i
                            if %290 [t: $B86, f: $B87] {  # if_31
                              $B86: {  # true
                                %291:ptr<private, i32, read_write> = access %data, 6i
                                %292:i32 = load %291
                                %293:f32 = convert %292
                                %294:f32 = div %293, 10.0f
                                %295:f32 = add 0.5f, %294
                                store %grey, %295
                                exit_if  # if_31
                              }
                              $B87: {  # false
                                %296:f32 = load_vector_element %gl_FragCoord, 1u
                                %297:i32 = call %tint_f32_to_i32, %296
                                %298:bool = lt %297, 240i
                                if %298 [t: $B88, f: $B89] {  # if_32
                                  $B88: {  # true
                                    %299:ptr<private, i32, read_write> = access %data, 7i
                                    %300:i32 = load %299
                                    %301:f32 = convert %300
                                    %302:f32 = div %301, 10.0f
                                    %303:f32 = add 0.5f, %302
                                    store %grey, %303
                                    exit_if  # if_32
                                  }
                                  $B89: {  # false
                                    %304:f32 = load_vector_element %gl_FragCoord, 1u
                                    %305:i32 = call %tint_f32_to_i32, %304
                                    %306:bool = lt %305, 270i
                                    if %306 [t: $B90, f: $B91] {  # if_33
                                      $B90: {  # true
                                        %307:ptr<private, i32, read_write> = access %data, 8i
                                        %308:i32 = load %307
                                        %309:f32 = convert %308
                                        %310:f32 = div %309, 10.0f
                                        %311:f32 = add 0.5f, %310
                                        store %grey, %311
                                        exit_if  # if_33
                                      }
                                      $B91: {  # false
                                        store %continue_execution, false
                                        exit_if  # if_33
                                      }
                                    }
                                    exit_if  # if_32
                                  }
                                }
                                exit_if  # if_31
                              }
                            }
                            exit_if  # if_30
                          }
                        }
                        exit_if  # if_29
                      }
                    }
                    exit_if  # if_28
                  }
                }
                exit_if  # if_27
              }
            }
            exit_if  # if_26
          }
        }
        exit_if  # if_25
      }
    }
    %312:f32 = load %grey
    %313:vec3<f32> = construct %312
    %x_249:vec3<f32> = let %313
    %315:f32 = access %x_249, 0u
    %316:f32 = access %x_249, 1u
    %317:f32 = access %x_249, 2u
    %318:vec4<f32> = construct %315, %316, %317, 1.0f
    store %x_GLF_color, %318
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B92: {
    store %gl_FragCoord, %gl_FragCoord_param
    %321:void = call %main_1
    %322:vec4<f32> = load %x_GLF_color
    %323:main_out = construct %322
    %324:bool = load %continue_execution
    %325:bool = eq %324, false
    if %325 [t: $B93] {  # if_34
      $B93: {  # true
        terminate_invocation
      }
    }
    ret %323
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B94: {
    %327:i32 = convert %value
    %328:bool = gte %value, -2147483648.0f
    %329:i32 = select -2147483648i, %327, %328
    %330:bool = lte %value, 2147483520.0f
    %331:i32 = select 2147483647i, %329, %330
    ret %331
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
