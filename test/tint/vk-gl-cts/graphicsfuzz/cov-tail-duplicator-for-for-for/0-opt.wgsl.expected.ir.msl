SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 2> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_7:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_11:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %color:ptr<function, vec4<f32>, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %k:ptr<function, i32, read_write> = var
    store %color, vec4<f32>(1.0f)
    %9:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
    %10:i32 = load %9
    %x_37:i32 = let %10
    store %i, %x_37
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %12:i32 = load %i
        %x_42:i32 = let %12
        %14:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
        %15:i32 = load %14
        %x_44:i32 = let %15
        %17:bool = lt %x_42, %x_44
        if %17 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %18:i32 = load %i
        %x_47:i32 = let %18
        switch %x_47 [c: (2i, $B7), c: (1i, $B8), c: (default, $B9)] {  # switch_1
          $B7: {  # case
            %20:i32 = load %i
            %x_83:i32 = let %20
            %22:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
            %23:f32 = load %22
            %x_85:f32 = let %23
            store_vector_element %color, %x_83, %x_85
            exit_switch  # switch_1
          }
          $B8: {  # case
            %25:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
            %26:i32 = load %25
            %x_52:i32 = let %26
            store %j, %x_52
            loop [b: $B10, c: $B11] {  # loop_2
              $B10: {  # body
                %28:i32 = load %i
                %x_57:i32 = let %28
                %30:i32 = load %i
                %x_58:i32 = let %30
                %32:bool = gt %x_57, %x_58
                if %32 [t: $B12, f: $B13] {  # if_2
                  $B12: {  # true
                    exit_if  # if_2
                  }
                  $B13: {  # false
                    exit_loop  # loop_2
                  }
                }
                %33:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
                %34:i32 = load %33
                %x_62:i32 = let %34
                store %k, %x_62
                loop [b: $B14, c: $B15] {  # loop_3
                  $B14: {  # body
                    %36:i32 = load %k
                    %x_67:i32 = let %36
                    %38:i32 = load %i
                    %x_68:i32 = let %38
                    %40:bool = lt %x_67, %x_68
                    if %40 [t: $B16, f: $B17] {  # if_3
                      $B16: {  # true
                        exit_if  # if_3
                      }
                      $B17: {  # false
                        exit_loop  # loop_3
                      }
                    }
                    %41:i32 = load %k
                    %x_71:i32 = let %41
                    %43:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
                    %44:f32 = load %43
                    %x_73:f32 = let %44
                    store_vector_element %color, %x_71, %x_73
                    continue  # -> $B15
                  }
                  $B15: {  # continuing
                    %46:i32 = load %k
                    %x_75:i32 = let %46
                    %48:i32 = add %x_75, 1i
                    store %k, %48
                    next_iteration  # -> $B14
                  }
                }
                continue  # -> $B11
              }
              $B11: {  # continuing
                %49:i32 = load %j
                %x_77:i32 = let %49
                %51:i32 = add %x_77, 1i
                store %j, %51
                next_iteration  # -> $B10
              }
            }
            %52:i32 = load %i
            %x_79:i32 = let %52
            %54:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
            %55:f32 = load %54
            %x_81:f32 = let %55
            store_vector_element %color, %x_79, %x_81
            exit_switch  # switch_1
          }
          $B9: {  # case
            exit_switch  # switch_1
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %57:i32 = load %i
        %x_87:i32 = let %57
        %59:i32 = add %x_87, 1i
        store %i, %59
        next_iteration  # -> $B3
      }
    }
    %60:vec4<f32> = load %color
    %x_89:vec4<f32> = let %60
    store %x_GLF_color, %x_89
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B18: {
    %63:void = call %main_1
    %64:vec4<f32> = load %x_GLF_color
    %65:main_out = construct %64
    ret %65
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
