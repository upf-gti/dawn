SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 3> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf2 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 4> @offset(0)
}

buf3 = struct @align(4) {
  three:i32 @offset(0)
}

strided_arr_2 = struct @align(4) {
  el:u32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_uint_values:array<strided_arr_2, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_8:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_12:ptr<uniform, buf2, read> = var @binding_point(0, 2)
  %x_14:ptr<uniform, buf3, read> = var @binding_point(0, 3)
  %x_16:ptr<uniform, buf0, read> = var @binding_point(0, 0)
}

%func0_ = func():void {
  $B2: {
    %tmp:ptr<function, vec4<f32>, read_write> = var
    %9:f32 = load_vector_element %gl_FragCoord, 0u
    %x_112:f32 = let %9
    %11:ptr<uniform, f32, read> = access %x_8, 0u, 1i, 0u
    %12:f32 = load %11
    %x_114:f32 = let %12
    %14:bool = gt %x_112, %x_114
    if %14 [t: $B3] {  # if_1
      $B3: {  # true
        %15:vec4<f32> = load %x_GLF_color
        %x_118:vec4<f32> = let %15
        store %tmp, %x_118
        exit_if  # if_1
      }
    }
    %17:vec4<f32> = load %tmp
    %x_119:vec4<f32> = let %17
    store %x_GLF_color, %x_119
    ret
  }
}
%func1_ = func():i32 {
  $B4: {
    %a:ptr<function, i32, read_write> = var
    %21:ptr<uniform, i32, read> = access %x_12, 0u, 1i, 0u
    %22:i32 = load %21
    %x_122:i32 = let %22
    store %a, %x_122
    loop [b: $B5, c: $B6] {  # loop_1
      $B5: {  # body
        %24:i32 = load %a
        %x_127:i32 = let %24
        %26:ptr<uniform, i32, read> = access %x_12, 0u, 3i, 0u
        %27:i32 = load %26
        %x_129:i32 = let %27
        %29:bool = lt %x_127, %x_129
        if %29 [t: $B7, f: $B8] {  # if_2
          $B7: {  # true
            exit_if  # if_2
          }
          $B8: {  # false
            exit_loop  # loop_1
          }
        }
        %30:ptr<uniform, i32, read> = access %x_14, 0u
        %31:i32 = load %30
        %x_133:i32 = let %31
        %33:ptr<uniform, i32, read> = access %x_12, 0u, 1i, 0u
        %34:i32 = load %33
        %x_135:i32 = let %34
        %36:bool = gt %x_133, %x_135
        if %36 [t: $B9, f: $B10] {  # if_3
          $B9: {  # true
            %37:void = call %func0_
            %38:ptr<uniform, i32, read> = access %x_12, 0u, 3i, 0u
            %39:i32 = load %38
            %x_142:i32 = let %39
            store %a, %x_142
            exit_if  # if_3
          }
          $B10: {  # false
            %41:void = call %func0_
            exit_if  # if_3
          }
        }
        continue  # -> $B6
      }
      $B6: {  # continuing
        next_iteration  # -> $B5
      }
    }
    %42:i32 = load %a
    %x_144:i32 = let %42
    ret %x_144
  }
}
%main_1 = func():void {
  $B11: {
    %a_1:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %48:f32 = load_vector_element %gl_FragCoord, 0u
    %x_56:f32 = let %48
    %50:ptr<uniform, f32, read> = access %x_8, 0u, 1i, 0u
    %51:f32 = load %50
    %x_58:f32 = let %51
    %53:bool = gt %x_56, %x_58
    if %53 [t: $B12, f: $B13] {  # if_4
      $B12: {  # true
        %54:ptr<uniform, f32, read> = access %x_8, 0u, 0i, 0u
        %55:f32 = load %54
        %x_64:f32 = let %55
        %57:ptr<uniform, f32, read> = access %x_8, 0u, 1i, 0u
        %58:f32 = load %57
        %x_66:f32 = let %58
        %60:ptr<uniform, f32, read> = access %x_8, 0u, 0i, 0u
        %61:f32 = load %60
        %x_68:f32 = let %61
        %63:ptr<uniform, f32, read> = access %x_8, 0u, 2i, 0u
        %64:f32 = load %63
        %x_70:f32 = let %64
        %66:vec4<f32> = construct %x_64, %x_66, %x_68, %x_70
        store %x_GLF_color, %66
        exit_if  # if_4
      }
      $B13: {  # false
        %67:ptr<uniform, u32, read> = access %x_16, 0u, 0i, 0u
        %68:u32 = load %67
        %x_73:u32 = let %68
        %70:vec4<f32> = unpack4x8snorm %x_73
        store %x_GLF_color, %70
        exit_if  # if_4
      }
    }
    %71:ptr<uniform, i32, read> = access %x_12, 0u, 2i, 0u
    %72:i32 = load %71
    %x_76:i32 = let %72
    store %a_1, %x_76
    store %i, 0i
    loop [b: $B14, c: $B15] {  # loop_2
      $B14: {  # body
        %74:i32 = load %i
        %x_81:i32 = let %74
        %76:bool = lt %x_81, 5i
        if %76 [t: $B16, f: $B17] {  # if_5
          $B16: {  # true
            exit_if  # if_5
          }
          $B17: {  # false
            exit_loop  # loop_2
          }
        }
        store %j, 0i
        loop [b: $B18, c: $B19] {  # loop_3
          $B18: {  # body
            %77:i32 = load %j
            %x_88:i32 = let %77
            %79:bool = lt %x_88, 2i
            if %79 [t: $B20, f: $B21] {  # if_6
              $B20: {  # true
                exit_if  # if_6
              }
              $B21: {  # false
                exit_loop  # loop_3
              }
            }
            %80:i32 = call %func1_
            %x_91:i32 = let %80
            %82:i32 = load %a_1
            %x_92:i32 = let %82
            %84:i32 = add %x_92, %x_91
            store %a_1, %84
            continue  # -> $B19
          }
          $B19: {  # continuing
            %85:i32 = load %j
            %x_94:i32 = let %85
            %87:i32 = add %x_94, 1i
            store %j, %87
            next_iteration  # -> $B18
          }
        }
        continue  # -> $B15
      }
      $B15: {  # continuing
        %88:i32 = load %i
        %x_96:i32 = let %88
        %90:i32 = add %x_96, 1i
        store %i, %90
        next_iteration  # -> $B14
      }
    }
    %91:i32 = load %a_1
    %x_98:i32 = let %91
    %93:ptr<uniform, i32, read> = access %x_12, 0u, 0i, 0u
    %94:i32 = load %93
    %x_100:i32 = let %94
    %96:bool = eq %x_98, %x_100
    if %96 [t: $B22] {  # if_7
      $B22: {  # true
        %97:ptr<uniform, f32, read> = access %x_8, 0u, 0i, 0u
        %98:f32 = load %97
        %x_105:f32 = let %98
        %100:f32 = load_vector_element %x_GLF_color, 2u
        %x_107:f32 = let %100
        %102:f32 = sub %x_107, %x_105
        store_vector_element %x_GLF_color, 2u, %102
        exit_if  # if_7
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B23: {
    store %gl_FragCoord, %gl_FragCoord_param
    %105:void = call %main_1
    %106:vec4<f32> = load %x_GLF_color
    %107:main_out = construct %106
    ret %107
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
