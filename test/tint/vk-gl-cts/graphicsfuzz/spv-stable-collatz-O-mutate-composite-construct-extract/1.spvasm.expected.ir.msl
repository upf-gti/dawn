SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %indexable:ptr<function, array<vec4<f32>, 16>, read_write> = var
    %x_71:ptr<function, i32, read_write> = var
    %x_74:ptr<function, i32, read_write> = var
    %8:vec4<f32> = load %gl_FragCoord
    %x_54:vec4<f32> = let %8
    %10:vec4<f32> = load %gl_FragCoord
    %11:vec2<f32> = swizzle %10, xy
    %x_55:vec2<f32> = let %11
    %13:ptr<uniform, vec2<f32>, read> = access %x_6, 0u
    %14:vec2<f32> = load %13
    %15:vec2<f32> = div %x_55, %14
    %16:vec2<f32> = mul %15, 8.0f
    %x_61:vec2<f32> = let %16
    %18:vec2<f32> = floor %x_61
    %x_62:vec2<f32> = let %18
    %20:f32 = access %x_62, 0u
    %21:i32 = call %tint_f32_to_i32, %20
    %23:i32 = mul %21, 8i
    %24:i32 = let %23
    %25:f32 = access %x_62, 1u
    %26:i32 = call %tint_f32_to_i32, %25
    %27:i32 = add %24, %26
    %x_69:i32 = let %27
    store %x_71, 0i
    store %x_74, %x_69
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %x_85:ptr<function, i32, read_write> = var
        %x_86:ptr<function, i32, read_write> = var
        %x_75:ptr<function, i32, read_write> = var
        %32:i32 = load %x_74
        %33:bool = gt %32, 1i
        if %33 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %34:i32 = load %x_74
        %35:i32 = and %34, 1i
        %36:bool = eq %35, 1i
        if %36 [t: $B7, f: $B8] {  # if_2
          $B7: {  # true
            %37:i32 = load %x_74
            %38:i32 = mul 3i, %37
            %39:i32 = add %38, 1i
            store %x_85, %39
            %40:i32 = load %x_85
            store %x_75, %40
            exit_if  # if_2
          }
          $B8: {  # false
            %41:i32 = load %x_74
            %42:i32 = call %tint_div_i32, %41, 2i
            store %x_86, %42
            %44:i32 = load %x_86
            store %x_75, %44
            exit_if  # if_2
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %45:i32 = load %x_71
        %46:i32 = add %45, 1i
        store %x_71, %46
        %47:i32 = load %x_75
        store %x_74, %47
        next_iteration  # -> $B3
      }
    }
    store %indexable, array<vec4<f32>, 16>(vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f), vec4<f32>(0.5f, 0.0f, 0.0f, 1.0f), vec4<f32>(0.0f, 0.5f, 0.0f, 1.0f), vec4<f32>(0.5f, 0.5f, 0.0f, 1.0f), vec4<f32>(0.0f, 0.0f, 0.5f, 1.0f), vec4<f32>(0.5f, 0.0f, 0.5f, 1.0f), vec4<f32>(0.0f, 0.5f, 0.5f, 1.0f), vec4<f32>(0.5f, 0.5f, 0.5f, 1.0f), vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f), vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f), vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f), vec4<f32>(1.0f, 1.0f, 0.0f, 1.0f), vec4<f32>(0.0f, 0.0f, 1.0f, 1.0f), vec4<f32>(1.0f, 0.0f, 1.0f, 1.0f), vec4<f32>(0.0f, 1.0f, 1.0f, 1.0f), vec4<f32>(1.0f))
    %48:array<vec4<f32>, 16> = load %indexable
    %x_88:array<vec4<f32>, 16> = let %48
    store %indexable, array<vec4<f32>, 16>(vec4<f32>(0.0f))
    store %indexable, %x_88
    %50:array<vec4<f32>, 16> = construct vec4<f32>(0.0f, 0.0f, 0.5f, 1.0f), vec4<f32>(1.0f, 0.0f, 1.0f, 1.0f), vec4<f32>(0.0f, 0.5f, 0.5f, 1.0f), vec4<f32>(0.0f, 1.0f, 1.0f, 1.0f), vec4<f32>(1.0f), vec4<f32>(0.0f, 0.5f, 0.5f, 1.0f), vec4<f32>(0.0f, 0.5f, 0.5f, 1.0f), vec4<f32>(0.5f, 0.0f, 0.5f, 1.0f), vec4<f32>(1.0f, 1.0f, 0.0f, 1.0f), %x_54, vec4<f32>(0.0f, 0.0f, 0.5f, 1.0f), vec4<f32>(0.5f, 0.5f, 0.0f, 1.0f), vec4<f32>(0.0f, 0.5f, 0.0f, 1.0f), vec4<f32>(0.5f, 0.0f, 0.0f, 1.0f), vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f), vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
    %51:vec4<f32> = access %50, 1u
    %x_89:vec4<f32> = let %51
    %53:vec4<f32> = construct 0.0f, 8.0f, %x_55
    %54:vec4<f32> = let %53
    %55:vec4<f32> = construct %x_61, 0.5f, 1.0f
    %56:array<vec4<f32>, 16> = construct vec4<f32>(0.5f, 0.0f, 0.5f, 1.0f), vec4<f32>(0.5f, 0.0f, 0.5f, 1.0f), vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f), vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f), vec4<f32>(0.5f, 0.0f, 0.5f, 1.0f), vec4<f32>(0.5f, 0.5f, 0.5f, 1.0f), vec4<f32>(1.0f, 0.0f, 1.0f, 1.0f), vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f), vec4<f32>(0.0f, 1.0f, 0.0f, 1.0f), %54, vec4<f32>(0.0f, 0.0f, 0.5f, 1.0f), vec4<f32>(0.0f, 0.5f, 0.5f, 1.0f), vec4<f32>(0.5f, 0.0f, 0.5f, 1.0f), vec4<f32>(1.0f, 1.0f, 0.0f, 1.0f), vec4<f32>(1.0f, 0.0f, 1.0f, 1.0f), %55
    %x_90:array<vec4<f32>, 16> = let %56
    %58:i32 = load %x_71
    %59:i32 = call %tint_mod_i32, %58, 16i
    %61:ptr<function, vec4<f32>, read_write> = access %indexable, %59
    %62:vec4<f32> = load %61
    store %x_GLF_color, %62
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B9: {
    store %gl_FragCoord, %gl_FragCoord_param
    %65:void = call %main_1
    %66:vec4<f32> = load %x_GLF_color
    %67:main_out = construct %66
    ret %67
  }
}
%tint_div_i32 = func(%lhs:i32, %rhs:i32):i32 {
  $B10: {
    %70:bool = eq %rhs, 0i
    %71:bool = eq %lhs, -2147483648i
    %72:bool = eq %rhs, -1i
    %73:bool = and %71, %72
    %74:bool = or %70, %73
    %75:i32 = select %rhs, 1i, %74
    %76:i32 = div %lhs, %75
    ret %76
  }
}
%tint_mod_i32 = func(%lhs_1:i32, %rhs_1:i32):i32 {  # %lhs_1: 'lhs', %rhs_1: 'rhs'
  $B11: {
    %79:bool = eq %rhs_1, 0i
    %80:bool = eq %lhs_1, -2147483648i
    %81:bool = eq %rhs_1, -1i
    %82:bool = and %80, %81
    %83:bool = or %79, %82
    %84:i32 = select %rhs_1, 1i, %83
    %85:i32 = let %84
    %86:i32 = div %lhs_1, %85
    %87:i32 = mul %86, %85
    %88:i32 = sub %lhs_1, %87
    ret %88
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B12: {
    %90:i32 = convert %value
    %91:bool = gte %value, -2147483648.0f
    %92:i32 = select -2147483648i, %90, %91
    %93:bool = lte %value, 2147483520.0f
    %94:i32 = select 2147483647i, %92, %93
    ret %94
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
