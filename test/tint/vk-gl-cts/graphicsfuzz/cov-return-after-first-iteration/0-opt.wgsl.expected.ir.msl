SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 2> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 1> @offset(0)
}

buf2 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_7:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_9:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_11:ptr<uniform, buf2, read> = var @binding_point(0, 2)
}

%main_1 = func():void {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
    %8:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
    %9:i32 = load %8
    %x_42:i32 = let %9
    store %i, %x_42
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %11:i32 = load %i
        %x_47:i32 = let %11
        %13:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
        %14:i32 = load %13
        %x_49:i32 = let %14
        %16:bool = lt %x_47, %x_49
        if %16 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %17:i32 = load %i
        %x_52:i32 = let %17
        %19:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
        %20:i32 = load %19
        %x_54:i32 = let %20
        %22:bool = neq %x_52, %x_54
        if %22 [t: $B7] {  # if_2
          $B7: {  # true
            ret
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %23:i32 = load %i
        %x_58:i32 = let %23
        %25:i32 = add %x_58, 1i
        store %i, %25
        next_iteration  # -> $B3
      }
    }
    %26:f32 = load_vector_element %gl_FragCoord, 1u
    %x_61:f32 = let %26
    %28:ptr<uniform, f32, read> = access %x_9, 0u, 0i, 0u
    %29:f32 = load %28
    %x_63:f32 = let %29
    %31:bool = lt %x_61, %x_63
    if %31 [t: $B8] {  # if_3
      $B8: {  # true
        ret
      }
    }
    %32:ptr<uniform, vec2<f32>, read> = access %x_11, 0u
    %33:f32 = load_vector_element %32, 1u
    %x_68:f32 = let %33
    %35:vec4<f32> = construct 1.0f, 1.0f, 1.0f, %x_68
    store %x_GLF_color, %35
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B9: {
    store %gl_FragCoord, %gl_FragCoord_param
    %38:void = call %main_1
    %39:vec4<f32> = load %x_GLF_color
    %40:main_out = construct %39
    ret %40
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
