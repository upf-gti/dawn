SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 2> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 3> @offset(0)
}

buf2 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_GLF_global_loop_count:ptr<private, i32, read_write> = var
  %x_7:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_10:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_12:ptr<uniform, buf2, read> = var @binding_point(0, 2)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %f:ptr<function, f32, read_write> = var
    %r:ptr<function, i32, read_write> = var
    store %x_GLF_global_loop_count, 0i
    %9:ptr<uniform, f32, read> = access %x_7, 0u, 0i, 0u
    %10:f32 = load %9
    store %f, %10
    %11:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
    %12:i32 = load %11
    store %r, %12
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %13:i32 = load %r
        %14:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
        %15:i32 = load %14
        %16:bool = lt %13, %15
        if %16 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %17:i32 = load %x_GLF_global_loop_count
        %18:i32 = add %17, 1i
        store %x_GLF_global_loop_count, %18
        %19:ptr<uniform, vec2<f32>, read> = access %x_12, 0u
        %20:vec2<f32> = load %19
        %x_57:vec2<f32> = let %20
        %22:f32 = load %f
        %x_60:f32 = let %22
        %24:vec2<f32> = dpdx %x_57
        %25:f32 = access %24, 1u
        %26:f32 = add %x_60, %25
        store %f, %26
        continue  # -> $B4
      }
      $B4: {  # continuing
        %27:i32 = load %r
        %28:i32 = add %27, 1i
        store %r, %28
        next_iteration  # -> $B3
      }
    }
    loop [b: $B7, c: $B8] {  # loop_2
      $B7: {  # body
        %29:i32 = load %x_GLF_global_loop_count
        %30:bool = lt %29, 100i
        if %30 [t: $B9, f: $B10] {  # if_2
          $B9: {  # true
            exit_if  # if_2
          }
          $B10: {  # false
            exit_loop  # loop_2
          }
        }
        %31:i32 = load %x_GLF_global_loop_count
        %32:i32 = add %31, 1i
        store %x_GLF_global_loop_count, %32
        %33:f32 = load %f
        %34:ptr<uniform, f32, read> = access %x_7, 0u, 0i, 0u
        %35:f32 = load %34
        %36:f32 = add %33, %35
        store %f, %36
        continue  # -> $B8
      }
      $B8: {  # continuing
        next_iteration  # -> $B7
      }
    }
    %37:f32 = load %f
    %38:ptr<uniform, f32, read> = access %x_7, 0u, 1i, 0u
    %39:f32 = load %38
    %40:bool = eq %37, %39
    if %40 [t: $B11, f: $B12] {  # if_3
      $B11: {  # true
        %41:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %42:i32 = load %41
        %43:f32 = convert %42
        %44:f32 = let %43
        %45:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %46:i32 = load %45
        %47:f32 = convert %46
        %48:f32 = let %47
        %49:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %50:i32 = load %49
        %51:f32 = convert %50
        %52:f32 = let %51
        %53:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %54:i32 = load %53
        %55:f32 = convert %54
        %56:vec4<f32> = construct %44, %48, %52, %55
        store %x_GLF_color, %56
        exit_if  # if_3
      }
      $B12: {  # false
        %57:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %58:i32 = load %57
        %59:f32 = convert %58
        %60:vec4<f32> = construct %59
        store %x_GLF_color, %60
        exit_if  # if_3
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B13: {
    %62:void = call %main_1
    %63:vec4<f32> = load %x_GLF_color
    %64:main_out = construct %63
    ret %64
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
