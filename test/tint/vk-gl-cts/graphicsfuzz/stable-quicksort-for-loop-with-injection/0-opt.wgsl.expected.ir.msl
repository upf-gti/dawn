SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  frag_color_1:vec4<f32> @offset(0), @location(0)
  gl_Position:vec4<f32> @offset(16), @builtin(position)
}

$B1: {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %x_GLF_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_pos:ptr<private, vec4<f32>, read_write> = var
  %x_34:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %frag_color:ptr<private, vec4<f32>, read_write> = var
  %gl_Position:ptr<private, vec4<f32>, read_write> = var
}

%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>):void {
  $B2: {
    %temp:ptr<function, i32, read_write> = var
    %11:i32 = load %i
    %x_239:i32 = let %11
    %13:ptr<private, i32, read_write> = access %obj, 0u, %x_239
    %14:i32 = load %13
    %x_241:i32 = let %14
    store %temp, %x_241
    %16:i32 = load %i
    %x_242:i32 = let %16
    %18:i32 = load %j
    %x_243:i32 = let %18
    %20:ptr<private, i32, read_write> = access %obj, 0u, %x_243
    %21:i32 = load %20
    %x_245:i32 = let %21
    %23:ptr<private, i32, read_write> = access %obj, 0u, %x_242
    store %23, %x_245
    %24:i32 = load %j
    %x_247:i32 = let %24
    %26:i32 = load %temp
    %x_248:i32 = let %26
    %28:ptr<private, i32, read_write> = access %obj, 0u, %x_247
    store %28, %x_248
    ret
  }
}
%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 {
  $B3: {
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %39:i32 = load %h
    %x_251:i32 = let %39
    %41:ptr<private, i32, read_write> = access %obj, 0u, %x_251
    %42:i32 = load %41
    %x_253:i32 = let %42
    store %pivot, %x_253
    %44:i32 = load %l
    %x_254:i32 = let %44
    %46:i32 = sub %x_254, 1i
    store %i_1, %46
    %47:i32 = load %l
    %x_256:i32 = let %47
    store %j_1, %x_256
    loop [b: $B4, c: $B5] {  # loop_1
      $B4: {  # body
        %49:i32 = load %j_1
        %x_261:i32 = let %49
        %51:i32 = load %h
        %x_262:i32 = let %51
        %53:i32 = sub %x_262, 1i
        %54:bool = lte %x_261, %53
        if %54 [t: $B6, f: $B7] {  # if_1
          $B6: {  # true
            exit_if  # if_1
          }
          $B7: {  # false
            exit_loop  # loop_1
          }
        }
        %55:i32 = load %j_1
        %x_266:i32 = let %55
        %57:ptr<private, i32, read_write> = access %obj, 0u, %x_266
        %58:i32 = load %57
        %x_268:i32 = let %58
        %60:i32 = load %pivot
        %x_269:i32 = let %60
        %62:bool = lte %x_268, %x_269
        if %62 [t: $B8] {  # if_2
          $B8: {  # true
            %63:i32 = load %i_1
            %x_273:i32 = let %63
            %65:i32 = add %x_273, 1i
            store %i_1, %65
            %66:i32 = load %i_1
            %x_275:i32 = let %66
            store %param, %x_275
            %68:i32 = load %j_1
            %x_276:i32 = let %68
            store %param_1, %x_276
            %70:void = call %swap_i1_i1_, %param, %param_1
            exit_if  # if_2
          }
        }
        continue  # -> $B5
      }
      $B5: {  # continuing
        %71:i32 = load %j_1
        %x_278:i32 = let %71
        %73:i32 = add %x_278, 1i
        store %j_1, %73
        next_iteration  # -> $B4
      }
    }
    %74:i32 = load %i_1
    %x_280:i32 = let %74
    %76:i32 = add %x_280, 1i
    store %param_2, %76
    %77:i32 = load %h
    %x_282:i32 = let %77
    store %param_3, %x_282
    %79:void = call %swap_i1_i1_, %param_2, %param_3
    %80:i32 = load %i_1
    %x_284:i32 = let %80
    %82:i32 = add %x_284, 1i
    ret %82
  }
}
%quicksort_ = func():void {
  $B9: {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %91:i32 = load %top
    %x_287:i32 = let %91
    %93:i32 = add %x_287, 1i
    %x_288:i32 = let %93
    store %top, %x_288
    %95:i32 = load %l_1
    %x_289:i32 = let %95
    %97:ptr<function, i32, read_write> = access %stack, %x_288
    store %97, %x_289
    %98:i32 = load %top
    %x_291:i32 = let %98
    %100:i32 = add %x_291, 1i
    %x_292:i32 = let %100
    store %top, %x_292
    %102:i32 = load %h_1
    %x_293:i32 = let %102
    %104:ptr<function, i32, read_write> = access %stack, %x_292
    store %104, %x_293
    loop [b: $B10, c: $B11] {  # loop_2
      $B10: {  # body
        %105:i32 = load %top
        %x_299:i32 = let %105
        %107:bool = gte %x_299, 0i
        if %107 [t: $B12, f: $B13] {  # if_3
          $B12: {  # true
            exit_if  # if_3
          }
          $B13: {  # false
            exit_loop  # loop_2
          }
        }
        %108:i32 = load %top
        %x_302:i32 = let %108
        %110:i32 = sub %x_302, 1i
        store %top, %110
        %111:ptr<function, i32, read_write> = access %stack, %x_302
        %112:i32 = load %111
        %x_305:i32 = let %112
        store %h_1, %x_305
        %114:i32 = load %top
        %x_306:i32 = let %114
        %116:i32 = sub %x_306, 1i
        store %top, %116
        %117:ptr<function, i32, read_write> = access %stack, %x_306
        %118:i32 = load %117
        %x_309:i32 = let %118
        store %l_1, %x_309
        %120:i32 = load %l_1
        %x_310:i32 = let %120
        store %param_4, %x_310
        %122:i32 = load %h_1
        %x_311:i32 = let %122
        store %param_5, %x_311
        %124:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        %x_312:i32 = let %124
        store %p, %x_312
        %126:i32 = load %p
        %x_313:i32 = let %126
        %128:i32 = load %l_1
        %x_315:i32 = let %128
        %130:i32 = sub %x_313, 1i
        %131:bool = gt %130, %x_315
        if %131 [t: $B14] {  # if_4
          $B14: {  # true
            %132:i32 = load %top
            %x_319:i32 = let %132
            %134:i32 = add %x_319, 1i
            %x_320:i32 = let %134
            store %top, %x_320
            %136:i32 = load %l_1
            %x_321:i32 = let %136
            %138:ptr<function, i32, read_write> = access %stack, %x_320
            store %138, %x_321
            %139:i32 = load %top
            %x_323:i32 = let %139
            %141:i32 = add %x_323, 1i
            %x_324:i32 = let %141
            store %top, %x_324
            %143:i32 = load %p
            %x_325:i32 = let %143
            %145:ptr<function, i32, read_write> = access %stack, %x_324
            %146:i32 = sub %x_325, 1i
            store %145, %146
            exit_if  # if_4
          }
        }
        %147:i32 = load %p
        %x_328:i32 = let %147
        %149:i32 = load %h_1
        %x_330:i32 = let %149
        %151:i32 = add %x_328, 1i
        %152:bool = lt %151, %x_330
        if %152 [t: $B15] {  # if_5
          $B15: {  # true
            %153:i32 = load %top
            %x_334:i32 = let %153
            %155:i32 = add %x_334, 1i
            %x_335:i32 = let %155
            store %top, %x_335
            %157:i32 = load %p
            %x_336:i32 = let %157
            %159:ptr<function, i32, read_write> = access %stack, %x_335
            %160:i32 = add %x_336, 1i
            store %159, %160
            %161:i32 = load %top
            %x_339:i32 = let %161
            %163:i32 = add %x_339, 1i
            %x_340:i32 = let %163
            store %top, %x_340
            %165:i32 = load %h_1
            %x_341:i32 = let %165
            %167:ptr<function, i32, read_write> = access %stack, %x_340
            store %167, %x_341
            exit_if  # if_5
          }
        }
        continue  # -> $B11
      }
      $B11: {  # continuing
        next_iteration  # -> $B10
      }
    }
    ret
  }
}
%main_1 = func():void {
  $B16: {
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    %172:vec4<f32> = load %x_GLF_pos
    %x_90:vec4<f32> = let %172
    %174:vec4<f32> = add %x_90, vec4<f32>(1.0f, 1.0f, 0.0f, 0.0f)
    %175:vec4<f32> = mul %174, vec4<f32>(128.0f, 128.0f, 1.0f, 1.0f)
    store %x_GLF_FragCoord, %175
    store %i_2, 0i
    loop [b: $B17, c: $B18] {  # loop_3
      $B17: {  # body
        %176:i32 = load %i_2
        %x_97:i32 = let %176
        %178:bool = lt %x_97, 10i
        if %178 [t: $B19, f: $B20] {  # if_6
          $B19: {  # true
            exit_if  # if_6
          }
          $B20: {  # false
            exit_loop  # loop_3
          }
        }
        %179:i32 = load %i_2
        %x_100:i32 = let %179
        %181:i32 = load %i_2
        %x_101:i32 = let %181
        %183:ptr<private, i32, read_write> = access %obj, 0u, %x_100
        %184:i32 = sub 10i, %x_101
        store %183, %184
        %185:i32 = load %i_2
        %x_104:i32 = let %185
        %187:i32 = load %i_2
        %x_105:i32 = let %187
        %189:ptr<private, i32, read_write> = access %obj, 0u, %x_105
        %190:i32 = load %189
        %x_107:i32 = let %190
        %192:i32 = load %i_2
        %x_108:i32 = let %192
        %194:ptr<private, i32, read_write> = access %obj, 0u, %x_108
        %195:i32 = load %194
        %x_110:i32 = let %195
        %197:ptr<private, i32, read_write> = access %obj, 0u, %x_104
        %198:i32 = mul %x_107, %x_110
        store %197, %198
        continue  # -> $B18
      }
      $B18: {  # continuing
        %199:i32 = load %i_2
        %x_113:i32 = let %199
        %201:i32 = add %x_113, 1i
        store %i_2, %201
        next_iteration  # -> $B17
      }
    }
    %202:void = call %quicksort_
    %203:vec4<f32> = load %x_GLF_FragCoord
    %x_116:vec4<f32> = let %203
    %205:ptr<uniform, vec2<f32>, read> = access %x_34, 0u
    %206:vec2<f32> = load %205
    %x_119:vec2<f32> = let %206
    %208:f32 = access %x_116, 0u
    %209:f32 = access %x_116, 1u
    %210:vec2<f32> = construct %208, %209
    %211:vec2<f32> = div %210, %x_119
    store %uv, %211
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %212:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %213:i32 = load %212
    %x_122:i32 = let %213
    %215:f32 = load_vector_element %color, 0u
    %x_125:f32 = let %215
    %217:f32 = convert %x_122
    %218:f32 = add %x_125, %217
    store_vector_element %color, 0u, %218
    %219:f32 = load_vector_element %uv, 0u
    %x_129:f32 = let %219
    %221:bool = gt %x_129, 0.25f
    if %221 [t: $B21] {  # if_7
      $B21: {  # true
        %222:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %223:i32 = load %222
        %x_134:i32 = let %223
        %225:f32 = load_vector_element %color, 0u
        %x_137:f32 = let %225
        %227:f32 = convert %x_134
        %228:f32 = add %x_137, %227
        store_vector_element %color, 0u, %228
        exit_if  # if_7
      }
    }
    %229:f32 = load_vector_element %uv, 0u
    %x_141:f32 = let %229
    %231:bool = gt %x_141, 0.5f
    if %231 [t: $B22] {  # if_8
      $B22: {  # true
        %232:ptr<private, i32, read_write> = access %obj, 0u, 2i
        %233:i32 = load %232
        %x_146:i32 = let %233
        %235:f32 = load_vector_element %color, 1u
        %x_149:f32 = let %235
        %237:f32 = convert %x_146
        %238:f32 = add %x_149, %237
        store_vector_element %color, 1u, %238
        exit_if  # if_8
      }
    }
    %239:f32 = load_vector_element %uv, 0u
    %x_153:f32 = let %239
    %241:bool = gt %x_153, 0.75f
    if %241 [t: $B23] {  # if_9
      $B23: {  # true
        %242:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %243:i32 = load %242
        %x_158:i32 = let %243
        %245:f32 = load_vector_element %color, 2u
        %x_161:f32 = let %245
        %247:f32 = convert %x_158
        %248:f32 = add %x_161, %247
        store_vector_element %color, 2u, %248
        exit_if  # if_9
      }
    }
    %249:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %250:i32 = load %249
    %x_165:i32 = let %250
    %252:f32 = load_vector_element %color, 1u
    %x_168:f32 = let %252
    %254:f32 = convert %x_165
    %255:f32 = add %x_168, %254
    store_vector_element %color, 1u, %255
    %256:f32 = load_vector_element %uv, 1u
    %x_172:f32 = let %256
    %258:bool = gt %x_172, 0.25f
    if %258 [t: $B24] {  # if_10
      $B24: {  # true
        %259:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %260:i32 = load %259
        %x_177:i32 = let %260
        %262:f32 = load_vector_element %color, 0u
        %x_180:f32 = let %262
        %264:f32 = convert %x_177
        %265:f32 = add %x_180, %264
        store_vector_element %color, 0u, %265
        exit_if  # if_10
      }
    }
    %266:f32 = load_vector_element %uv, 1u
    %x_184:f32 = let %266
    %268:bool = gt %x_184, 0.5f
    if %268 [t: $B25] {  # if_11
      $B25: {  # true
        %269:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %270:i32 = load %269
        %x_189:i32 = let %270
        %272:f32 = load_vector_element %color, 1u
        %x_192:f32 = let %272
        %274:f32 = convert %x_189
        %275:f32 = add %x_192, %274
        store_vector_element %color, 1u, %275
        exit_if  # if_11
      }
    }
    %276:f32 = load_vector_element %uv, 1u
    %x_196:f32 = let %276
    %278:bool = gt %x_196, 0.75f
    if %278 [t: $B26] {  # if_12
      $B26: {  # true
        %279:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %280:i32 = load %279
        %x_201:i32 = let %280
        %282:f32 = load_vector_element %color, 2u
        %x_204:f32 = let %282
        %284:f32 = convert %x_201
        %285:f32 = add %x_204, %284
        store_vector_element %color, 2u, %285
        exit_if  # if_12
      }
    }
    %286:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %287:i32 = load %286
    %x_208:i32 = let %287
    %289:f32 = load_vector_element %color, 2u
    %x_211:f32 = let %289
    %291:f32 = convert %x_208
    %292:f32 = add %x_211, %291
    store_vector_element %color, 2u, %292
    %293:f32 = load_vector_element %uv, 0u
    %x_215:f32 = let %293
    %295:f32 = load_vector_element %uv, 1u
    %x_217:f32 = let %295
    %297:f32 = sub %x_215, %x_217
    %298:f32 = abs %297
    %299:bool = lt %298, 0.25f
    if %299 [t: $B27] {  # if_13
      $B27: {  # true
        %300:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %301:i32 = load %300
        %x_224:i32 = let %301
        %303:f32 = load_vector_element %color, 0u
        %x_227:f32 = let %303
        %305:f32 = convert %x_224
        %306:f32 = add %x_227, %305
        store_vector_element %color, 0u, %306
        exit_if  # if_13
      }
    }
    %307:vec3<f32> = load %color
    %x_230:vec3<f32> = let %307
    %309:vec3<f32> = normalize %x_230
    %x_231:vec3<f32> = let %309
    %311:f32 = access %x_231, 0u
    %312:f32 = access %x_231, 1u
    %313:f32 = access %x_231, 2u
    %314:vec4<f32> = construct %311, %312, %313, 1.0f
    store %frag_color, %314
    %315:vec4<f32> = load %x_GLF_pos
    %x_236:vec4<f32> = let %315
    store %gl_Position, %x_236
    ret
  }
}
%tint_symbol = @vertex func(%x_GLF_pos_param:vec4<f32> [@location(0)]):main_out {
  $B28: {
    store %x_GLF_pos, %x_GLF_pos_param
    %319:void = call %main_1
    %320:vec4<f32> = load %frag_color
    %321:vec4<f32> = load %gl_Position
    %322:main_out = construct %320, %321
    ret %322
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
