SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

buf1 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  frag_color_1:vec4<f32> @offset(0), @location(0)
  gl_Position:vec4<f32> @offset(16), @builtin(position)
}

$B1: {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %x_GLF_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_pos:ptr<private, vec4<f32>, read_write> = var
  %x_33:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_36:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %frag_color:ptr<private, vec4<f32>, read_write> = var
  %gl_Position:ptr<private, vec4<f32>, read_write> = var
}

%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>):void {
  $B2: {
    %temp:ptr<function, i32, read_write> = var
    %12:i32 = load %i
    %x_250:i32 = let %12
    %14:ptr<private, i32, read_write> = access %obj, 0u, %x_250
    %15:i32 = load %14
    %x_252:i32 = let %15
    store %temp, %x_252
    %17:i32 = load %i
    %x_253:i32 = let %17
    %19:i32 = load %j
    %x_254:i32 = let %19
    %21:ptr<private, i32, read_write> = access %obj, 0u, %x_254
    %22:i32 = load %21
    %x_256:i32 = let %22
    %24:ptr<private, i32, read_write> = access %obj, 0u, %x_253
    store %24, %x_256
    %25:i32 = load %j
    %x_258:i32 = let %25
    %27:i32 = load %temp
    %x_259:i32 = let %27
    %29:ptr<private, i32, read_write> = access %obj, 0u, %x_258
    store %29, %x_259
    ret
  }
}
%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 {
  $B3: {
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %40:i32 = load %h
    %x_262:i32 = let %40
    %42:ptr<private, i32, read_write> = access %obj, 0u, %x_262
    %43:i32 = load %42
    %x_264:i32 = let %43
    store %pivot, %x_264
    %45:i32 = load %l
    %x_265:i32 = let %45
    %47:i32 = sub %x_265, 1i
    store %i_1, %47
    %48:i32 = load %l
    %x_267:i32 = let %48
    store %j_1, %x_267
    loop [b: $B4, c: $B5] {  # loop_1
      $B4: {  # body
        %50:i32 = load %j_1
        %x_272:i32 = let %50
        %52:i32 = load %h
        %x_273:i32 = let %52
        %54:i32 = sub %x_273, 1i
        %55:bool = lte %x_272, %54
        if %55 [t: $B6, f: $B7] {  # if_1
          $B6: {  # true
            exit_if  # if_1
          }
          $B7: {  # false
            exit_loop  # loop_1
          }
        }
        %56:i32 = load %j_1
        %x_277:i32 = let %56
        %58:ptr<private, i32, read_write> = access %obj, 0u, %x_277
        %59:i32 = load %58
        %x_279:i32 = let %59
        %61:i32 = load %pivot
        %x_280:i32 = let %61
        %63:bool = lte %x_279, %x_280
        if %63 [t: $B8] {  # if_2
          $B8: {  # true
            %64:i32 = load %i_1
            %x_284:i32 = let %64
            %66:i32 = add %x_284, 1i
            store %i_1, %66
            %67:i32 = load %i_1
            %x_286:i32 = let %67
            store %param, %x_286
            %69:i32 = load %j_1
            %x_287:i32 = let %69
            store %param_1, %x_287
            %71:void = call %swap_i1_i1_, %param, %param_1
            exit_if  # if_2
          }
        }
        continue  # -> $B5
      }
      $B5: {  # continuing
        %72:i32 = load %j_1
        %x_289:i32 = let %72
        %74:i32 = add %x_289, 1i
        store %j_1, %74
        next_iteration  # -> $B4
      }
    }
    %75:i32 = load %i_1
    %x_291:i32 = let %75
    %77:i32 = add %x_291, 1i
    store %param_2, %77
    %78:i32 = load %h
    %x_293:i32 = let %78
    store %param_3, %x_293
    %80:void = call %swap_i1_i1_, %param_2, %param_3
    %81:i32 = load %i_1
    %x_295:i32 = let %81
    %83:i32 = add %x_295, 1i
    ret %83
  }
}
%quicksort_ = func():void {
  $B9: {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %92:i32 = load %top
    %x_298:i32 = let %92
    %94:i32 = add %x_298, 1i
    %x_299:i32 = let %94
    store %top, %x_299
    %96:i32 = load %l_1
    %x_300:i32 = let %96
    %98:ptr<function, i32, read_write> = access %stack, %x_299
    store %98, %x_300
    %99:i32 = load %top
    %x_302:i32 = let %99
    %101:i32 = add %x_302, 1i
    %x_303:i32 = let %101
    store %top, %x_303
    %103:i32 = load %h_1
    %x_304:i32 = let %103
    %105:ptr<function, i32, read_write> = access %stack, %x_303
    store %105, %x_304
    loop [b: $B10, c: $B11] {  # loop_2
      $B10: {  # body
        %106:i32 = load %top
        %x_310:i32 = let %106
        %108:bool = gte %x_310, 0i
        if %108 [t: $B12, f: $B13] {  # if_3
          $B12: {  # true
            exit_if  # if_3
          }
          $B13: {  # false
            exit_loop  # loop_2
          }
        }
        %109:i32 = load %top
        %x_313:i32 = let %109
        %111:i32 = sub %x_313, 1i
        store %top, %111
        %112:ptr<function, i32, read_write> = access %stack, %x_313
        %113:i32 = load %112
        %x_316:i32 = let %113
        store %h_1, %x_316
        %115:i32 = load %top
        %x_317:i32 = let %115
        %117:i32 = sub %x_317, 1i
        store %top, %117
        %118:ptr<function, i32, read_write> = access %stack, %x_317
        %119:i32 = load %118
        %x_320:i32 = let %119
        store %l_1, %x_320
        %121:i32 = load %l_1
        %x_321:i32 = let %121
        store %param_4, %x_321
        %123:i32 = load %h_1
        %x_322:i32 = let %123
        store %param_5, %x_322
        %125:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        %x_323:i32 = let %125
        store %p, %x_323
        %127:i32 = load %p
        %x_324:i32 = let %127
        %129:i32 = load %l_1
        %x_326:i32 = let %129
        %131:i32 = sub %x_324, 1i
        %132:bool = gt %131, %x_326
        if %132 [t: $B14] {  # if_4
          $B14: {  # true
            %133:i32 = load %top
            %x_330:i32 = let %133
            %135:i32 = add %x_330, 1i
            %x_331:i32 = let %135
            store %top, %x_331
            %137:i32 = load %l_1
            %x_332:i32 = let %137
            %139:ptr<function, i32, read_write> = access %stack, %x_331
            store %139, %x_332
            %140:i32 = load %top
            %x_334:i32 = let %140
            %142:i32 = add %x_334, 1i
            %x_335:i32 = let %142
            store %top, %x_335
            %144:i32 = load %p
            %x_336:i32 = let %144
            %146:ptr<function, i32, read_write> = access %stack, %x_335
            %147:i32 = sub %x_336, 1i
            store %146, %147
            exit_if  # if_4
          }
        }
        %148:i32 = load %p
        %x_339:i32 = let %148
        %150:i32 = load %h_1
        %x_341:i32 = let %150
        %152:i32 = add %x_339, 1i
        %153:bool = lt %152, %x_341
        if %153 [t: $B15] {  # if_5
          $B15: {  # true
            %154:i32 = load %top
            %x_345:i32 = let %154
            %156:i32 = add %x_345, 1i
            %x_346:i32 = let %156
            store %top, %x_346
            %158:i32 = load %p
            %x_347:i32 = let %158
            %160:ptr<function, i32, read_write> = access %stack, %x_346
            %161:i32 = add %x_347, 1i
            store %160, %161
            %162:i32 = load %top
            %x_350:i32 = let %162
            %164:i32 = add %x_350, 1i
            %x_351:i32 = let %164
            store %top, %x_351
            %166:i32 = load %h_1
            %x_352:i32 = let %166
            %168:ptr<function, i32, read_write> = access %stack, %x_351
            store %168, %x_352
            exit_if  # if_5
          }
        }
        continue  # -> $B11
      }
      $B11: {  # continuing
        next_iteration  # -> $B10
      }
    }
    ret
  }
}
%main_1 = func():void {
  $B16: {
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    %173:vec4<f32> = load %x_GLF_pos
    %x_94:vec4<f32> = let %173
    %175:vec4<f32> = add %x_94, vec4<f32>(1.0f, 1.0f, 0.0f, 0.0f)
    %176:vec4<f32> = mul %175, vec4<f32>(128.0f, 128.0f, 1.0f, 1.0f)
    store %x_GLF_FragCoord, %176
    store %i_2, 0i
    loop [b: $B17, c: $B18] {  # loop_3
      $B17: {  # body
        %177:i32 = load %i_2
        %x_101:i32 = let %177
        %179:bool = lt %x_101, 10i
        if %179 [t: $B19, f: $B20] {  # if_6
          $B19: {  # true
            exit_if  # if_6
          }
          $B20: {  # false
            exit_loop  # loop_3
          }
        }
        %180:i32 = load %i_2
        %x_104:i32 = let %180
        %182:i32 = load %i_2
        %x_105:i32 = let %182
        %184:ptr<private, i32, read_write> = access %obj, 0u, %x_104
        %185:i32 = sub 10i, %x_105
        store %184, %185
        %186:ptr<uniform, vec2<f32>, read> = access %x_33, 0u
        %187:f32 = load_vector_element %186, 0u
        %x_109:f32 = let %187
        %189:ptr<uniform, vec2<f32>, read> = access %x_33, 0u
        %190:f32 = load_vector_element %189, 1u
        %x_111:f32 = let %190
        %192:bool = gt %x_109, %x_111
        if %192 [t: $B21] {  # if_7
          $B21: {  # true
            exit_loop  # loop_3
          }
        }
        %193:i32 = load %i_2
        %x_115:i32 = let %193
        %195:i32 = load %i_2
        %x_116:i32 = let %195
        %197:ptr<private, i32, read_write> = access %obj, 0u, %x_116
        %198:i32 = load %197
        %x_118:i32 = let %198
        %200:i32 = load %i_2
        %x_119:i32 = let %200
        %202:ptr<private, i32, read_write> = access %obj, 0u, %x_119
        %203:i32 = load %202
        %x_121:i32 = let %203
        %205:ptr<private, i32, read_write> = access %obj, 0u, %x_115
        %206:i32 = mul %x_118, %x_121
        store %205, %206
        continue  # -> $B18
      }
      $B18: {  # continuing
        %207:i32 = load %i_2
        %x_124:i32 = let %207
        %209:i32 = add %x_124, 1i
        store %i_2, %209
        next_iteration  # -> $B17
      }
    }
    %210:void = call %quicksort_
    %211:vec4<f32> = load %x_GLF_FragCoord
    %x_127:vec4<f32> = let %211
    %213:ptr<uniform, vec2<f32>, read> = access %x_36, 0u
    %214:vec2<f32> = load %213
    %x_130:vec2<f32> = let %214
    %216:f32 = access %x_127, 0u
    %217:f32 = access %x_127, 1u
    %218:vec2<f32> = construct %216, %217
    %219:vec2<f32> = div %218, %x_130
    store %uv, %219
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %220:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %221:i32 = load %220
    %x_133:i32 = let %221
    %223:f32 = load_vector_element %color, 0u
    %x_136:f32 = let %223
    %225:f32 = convert %x_133
    %226:f32 = add %x_136, %225
    store_vector_element %color, 0u, %226
    %227:f32 = load_vector_element %uv, 0u
    %x_140:f32 = let %227
    %229:bool = gt %x_140, 0.25f
    if %229 [t: $B22] {  # if_8
      $B22: {  # true
        %230:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %231:i32 = load %230
        %x_145:i32 = let %231
        %233:f32 = load_vector_element %color, 0u
        %x_148:f32 = let %233
        %235:f32 = convert %x_145
        %236:f32 = add %x_148, %235
        store_vector_element %color, 0u, %236
        exit_if  # if_8
      }
    }
    %237:f32 = load_vector_element %uv, 0u
    %x_152:f32 = let %237
    %239:bool = gt %x_152, 0.5f
    if %239 [t: $B23] {  # if_9
      $B23: {  # true
        %240:ptr<private, i32, read_write> = access %obj, 0u, 2i
        %241:i32 = load %240
        %x_157:i32 = let %241
        %243:f32 = load_vector_element %color, 1u
        %x_160:f32 = let %243
        %245:f32 = convert %x_157
        %246:f32 = add %x_160, %245
        store_vector_element %color, 1u, %246
        exit_if  # if_9
      }
    }
    %247:f32 = load_vector_element %uv, 0u
    %x_164:f32 = let %247
    %249:bool = gt %x_164, 0.75f
    if %249 [t: $B24] {  # if_10
      $B24: {  # true
        %250:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %251:i32 = load %250
        %x_169:i32 = let %251
        %253:f32 = load_vector_element %color, 2u
        %x_172:f32 = let %253
        %255:f32 = convert %x_169
        %256:f32 = add %x_172, %255
        store_vector_element %color, 2u, %256
        exit_if  # if_10
      }
    }
    %257:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %258:i32 = load %257
    %x_176:i32 = let %258
    %260:f32 = load_vector_element %color, 1u
    %x_179:f32 = let %260
    %262:f32 = convert %x_176
    %263:f32 = add %x_179, %262
    store_vector_element %color, 1u, %263
    %264:f32 = load_vector_element %uv, 1u
    %x_183:f32 = let %264
    %266:bool = gt %x_183, 0.25f
    if %266 [t: $B25] {  # if_11
      $B25: {  # true
        %267:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %268:i32 = load %267
        %x_188:i32 = let %268
        %270:f32 = load_vector_element %color, 0u
        %x_191:f32 = let %270
        %272:f32 = convert %x_188
        %273:f32 = add %x_191, %272
        store_vector_element %color, 0u, %273
        exit_if  # if_11
      }
    }
    %274:f32 = load_vector_element %uv, 1u
    %x_195:f32 = let %274
    %276:bool = gt %x_195, 0.5f
    if %276 [t: $B26] {  # if_12
      $B26: {  # true
        %277:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %278:i32 = load %277
        %x_200:i32 = let %278
        %280:f32 = load_vector_element %color, 1u
        %x_203:f32 = let %280
        %282:f32 = convert %x_200
        %283:f32 = add %x_203, %282
        store_vector_element %color, 1u, %283
        exit_if  # if_12
      }
    }
    %284:f32 = load_vector_element %uv, 1u
    %x_207:f32 = let %284
    %286:bool = gt %x_207, 0.75f
    if %286 [t: $B27] {  # if_13
      $B27: {  # true
        %287:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %288:i32 = load %287
        %x_212:i32 = let %288
        %290:f32 = load_vector_element %color, 2u
        %x_215:f32 = let %290
        %292:f32 = convert %x_212
        %293:f32 = add %x_215, %292
        store_vector_element %color, 2u, %293
        exit_if  # if_13
      }
    }
    %294:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %295:i32 = load %294
    %x_219:i32 = let %295
    %297:f32 = load_vector_element %color, 2u
    %x_222:f32 = let %297
    %299:f32 = convert %x_219
    %300:f32 = add %x_222, %299
    store_vector_element %color, 2u, %300
    %301:f32 = load_vector_element %uv, 0u
    %x_226:f32 = let %301
    %303:f32 = load_vector_element %uv, 1u
    %x_228:f32 = let %303
    %305:f32 = sub %x_226, %x_228
    %306:f32 = abs %305
    %307:bool = lt %306, 0.25f
    if %307 [t: $B28] {  # if_14
      $B28: {  # true
        %308:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %309:i32 = load %308
        %x_235:i32 = let %309
        %311:f32 = load_vector_element %color, 0u
        %x_238:f32 = let %311
        %313:f32 = convert %x_235
        %314:f32 = add %x_238, %313
        store_vector_element %color, 0u, %314
        exit_if  # if_14
      }
    }
    %315:vec3<f32> = load %color
    %x_241:vec3<f32> = let %315
    %317:vec3<f32> = normalize %x_241
    %x_242:vec3<f32> = let %317
    %319:f32 = access %x_242, 0u
    %320:f32 = access %x_242, 1u
    %321:f32 = access %x_242, 2u
    %322:vec4<f32> = construct %319, %320, %321, 1.0f
    store %frag_color, %322
    %323:vec4<f32> = load %x_GLF_pos
    %x_247:vec4<f32> = let %323
    store %gl_Position, %x_247
    ret
  }
}
%tint_symbol = @vertex func(%x_GLF_pos_param:vec4<f32> [@location(0)]):main_out {
  $B29: {
    store %x_GLF_pos, %x_GLF_pos_param
    %327:void = call %main_1
    %328:vec4<f32> = load %frag_color
    %329:vec4<f32> = load %gl_Position
    %330:main_out = construct %328, %329
    ret %330
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
