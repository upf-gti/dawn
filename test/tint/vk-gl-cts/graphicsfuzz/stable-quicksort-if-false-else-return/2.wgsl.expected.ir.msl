SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  frag_color_1:vec4<f32> @offset(0), @location(0)
  gl_Position:vec4<f32> @offset(16), @builtin(position)
}

$B1: {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %x_GLF_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_pos:ptr<private, vec4<f32>, read_write> = var
  %x_34:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %frag_color:ptr<private, vec4<f32>, read_write> = var
  %gl_Position:ptr<private, vec4<f32>, read_write> = var
}

%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 {
  $B2: {
    %x_314:ptr<function, i32, read_write> = var
    %x_315:ptr<function, i32, read_write> = var
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %19:i32 = load %h
    %x_316:i32 = let %19
    %21:ptr<private, i32, read_write> = access %obj, 0u, %x_316
    %22:i32 = load %21
    %x_318:i32 = let %22
    store %pivot, %x_318
    %24:i32 = load %l
    %x_319:i32 = let %24
    %26:i32 = sub %x_319, 1i
    store %i_1, %26
    %27:i32 = load %l
    %x_321:i32 = let %27
    store %j_1, %x_321
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %29:i32 = load %j_1
        %x_326:i32 = let %29
        %31:i32 = load %h
        %x_327:i32 = let %31
        %33:i32 = sub %x_327, 1i
        %34:bool = lte %x_326, %33
        if %34 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %35:i32 = load %j_1
        %x_331:i32 = let %35
        %37:ptr<private, i32, read_write> = access %obj, 0u, %x_331
        %38:i32 = load %37
        %x_333:i32 = let %38
        %40:i32 = load %pivot
        %x_334:i32 = let %40
        %42:bool = lte %x_333, %x_334
        if %42 [t: $B7] {  # if_2
          $B7: {  # true
            %43:i32 = load %i_1
            %x_338:i32 = let %43
            %45:i32 = add %x_338, 1i
            store %i_1, %45
            %46:i32 = load %i_1
            %x_340:i32 = let %46
            store %param, %x_340
            %48:i32 = load %j_1
            %x_341:i32 = let %48
            store %param_1, %x_341
            %50:i32 = load %param
            %x_342:i32 = let %50
            %52:ptr<private, i32, read_write> = access %obj, 0u, %x_342
            %53:i32 = load %52
            %x_344:i32 = let %53
            store %x_315, %x_344
            %55:i32 = load %param
            %x_345:i32 = let %55
            %57:i32 = load %param_1
            %x_346:i32 = let %57
            %59:ptr<private, i32, read_write> = access %obj, 0u, %x_346
            %60:i32 = load %59
            %x_348:i32 = let %60
            %62:ptr<private, i32, read_write> = access %obj, 0u, %x_345
            store %62, %x_348
            %63:i32 = load %param_1
            %x_350:i32 = let %63
            %65:i32 = load %x_315
            %x_351:i32 = let %65
            %67:ptr<private, i32, read_write> = access %obj, 0u, %x_350
            store %67, %x_351
            exit_if  # if_2
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %68:i32 = load %j_1
        %x_353:i32 = let %68
        %70:i32 = add %x_353, 1i
        store %j_1, %70
        next_iteration  # -> $B3
      }
    }
    %71:i32 = load %i_1
    %x_355:i32 = let %71
    %73:i32 = add %x_355, 1i
    store %param_2, %73
    %74:i32 = load %h
    %x_357:i32 = let %74
    store %param_3, %x_357
    %76:i32 = load %param_2
    %x_358:i32 = let %76
    %78:ptr<private, i32, read_write> = access %obj, 0u, %x_358
    %79:i32 = load %78
    %x_360:i32 = let %79
    store %x_314, %x_360
    %81:i32 = load %param_2
    %x_361:i32 = let %81
    %83:i32 = load %param_3
    %x_362:i32 = let %83
    %85:ptr<private, i32, read_write> = access %obj, 0u, %x_362
    %86:i32 = load %85
    %x_364:i32 = let %86
    %88:ptr<private, i32, read_write> = access %obj, 0u, %x_361
    store %88, %x_364
    %89:i32 = load %param_3
    %x_366:i32 = let %89
    %91:i32 = load %x_314
    %x_367:i32 = let %91
    %93:ptr<private, i32, read_write> = access %obj, 0u, %x_366
    store %93, %x_367
    if false [t: $B8, f: $B9] {  # if_3
      $B8: {  # true
        exit_if  # if_3
      }
      $B9: {  # false
        %94:i32 = load %i_1
        %x_372:i32 = let %94
        %96:i32 = add %x_372, 1i
        ret %96
      }
    }
    ret 0i
  }
}
%main_1 = func():void {
  $B10: {
    %x_91:ptr<function, i32, read_write> = var
    %x_92:ptr<function, i32, read_write> = var
    %x_93:ptr<function, i32, read_write> = var
    %x_94:ptr<function, array<i32, 10>, read_write> = var
    %x_95:ptr<function, i32, read_write> = var
    %x_96:ptr<function, i32, read_write> = var
    %x_97:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    %108:vec4<f32> = load %x_GLF_pos
    %x_98:vec4<f32> = let %108
    %110:vec4<f32> = add %x_98, vec4<f32>(1.0f, 1.0f, 0.0f, 0.0f)
    %111:vec4<f32> = mul %110, vec4<f32>(128.0f, 128.0f, 1.0f, 1.0f)
    store %x_GLF_FragCoord, %111
    store %i_2, 0i
    loop [b: $B11, c: $B12] {  # loop_2
      $B11: {  # body
        %112:i32 = load %i_2
        %x_105:i32 = let %112
        %114:bool = lt %x_105, 10i
        if %114 [t: $B13, f: $B14] {  # if_4
          $B13: {  # true
            exit_if  # if_4
          }
          $B14: {  # false
            exit_loop  # loop_2
          }
        }
        %115:i32 = load %i_2
        %x_108:i32 = let %115
        %117:i32 = load %i_2
        %x_109:i32 = let %117
        %119:ptr<private, i32, read_write> = access %obj, 0u, %x_108
        %120:i32 = sub 10i, %x_109
        store %119, %120
        %121:i32 = load %i_2
        %x_112:i32 = let %121
        %123:i32 = load %i_2
        %x_113:i32 = let %123
        %125:ptr<private, i32, read_write> = access %obj, 0u, %x_113
        %126:i32 = load %125
        %x_115:i32 = let %126
        %128:i32 = load %i_2
        %x_116:i32 = let %128
        %130:ptr<private, i32, read_write> = access %obj, 0u, %x_116
        %131:i32 = load %130
        %x_118:i32 = let %131
        %133:ptr<private, i32, read_write> = access %obj, 0u, %x_112
        %134:i32 = mul %x_115, %x_118
        store %133, %134
        continue  # -> $B12
      }
      $B12: {  # continuing
        %135:i32 = load %i_2
        %x_121:i32 = let %135
        %137:i32 = add %x_121, 1i
        store %i_2, %137
        next_iteration  # -> $B11
      }
    }
    store %x_91, 0i
    store %x_92, 9i
    store %x_93, -1i
    %138:i32 = load %x_93
    %x_123:i32 = let %138
    %140:i32 = add %x_123, 1i
    %x_124:i32 = let %140
    store %x_93, %x_124
    %142:i32 = load %x_91
    %x_125:i32 = let %142
    %144:ptr<function, i32, read_write> = access %x_94, %x_124
    store %144, %x_125
    %145:i32 = load %x_93
    %x_127:i32 = let %145
    %147:i32 = add %x_127, 1i
    %x_128:i32 = let %147
    store %x_93, %x_128
    %149:i32 = load %x_92
    %x_129:i32 = let %149
    %151:ptr<function, i32, read_write> = access %x_94, %x_128
    store %151, %x_129
    loop [b: $B15, c: $B16] {  # loop_3
      $B15: {  # body
        %152:i32 = load %x_93
        %x_135:i32 = let %152
        %154:bool = gte %x_135, 0i
        if %154 [t: $B17, f: $B18] {  # if_5
          $B17: {  # true
            exit_if  # if_5
          }
          $B18: {  # false
            exit_loop  # loop_3
          }
        }
        %155:i32 = load %x_93
        %x_138:i32 = let %155
        %157:i32 = sub %x_138, 1i
        store %x_93, %157
        %158:ptr<function, i32, read_write> = access %x_94, %x_138
        %159:i32 = load %158
        %x_141:i32 = let %159
        store %x_92, %x_141
        %161:i32 = load %x_93
        %x_142:i32 = let %161
        %163:i32 = sub %x_142, 1i
        store %x_93, %163
        %164:ptr<function, i32, read_write> = access %x_94, %x_142
        %165:i32 = load %164
        %x_145:i32 = let %165
        store %x_91, %x_145
        %167:i32 = load %x_91
        %x_146:i32 = let %167
        store %x_96, %x_146
        %169:i32 = load %x_92
        %x_147:i32 = let %169
        store %x_97, %x_147
        %171:i32 = call %performPartition_i1_i1_, %x_96, %x_97
        %x_148:i32 = let %171
        store %x_95, %x_148
        %173:i32 = load %x_95
        %x_149:i32 = let %173
        %175:i32 = load %x_91
        %x_151:i32 = let %175
        %177:i32 = sub %x_149, 1i
        %178:bool = gt %177, %x_151
        if %178 [t: $B19] {  # if_6
          $B19: {  # true
            %179:i32 = load %x_93
            %x_155:i32 = let %179
            %181:i32 = add %x_155, 1i
            %x_156:i32 = let %181
            store %x_93, %x_156
            %183:i32 = load %x_91
            %x_157:i32 = let %183
            %185:ptr<function, i32, read_write> = access %x_94, %x_156
            store %185, %x_157
            %186:i32 = load %x_93
            %x_159:i32 = let %186
            %188:i32 = add %x_159, 1i
            %x_160:i32 = let %188
            store %x_93, %x_160
            %190:i32 = load %x_95
            %x_161:i32 = let %190
            %192:ptr<function, i32, read_write> = access %x_94, %x_160
            %193:i32 = sub %x_161, 1i
            store %192, %193
            exit_if  # if_6
          }
        }
        %194:i32 = load %x_95
        %x_164:i32 = let %194
        %196:i32 = load %x_92
        %x_166:i32 = let %196
        %198:i32 = add %x_164, 1i
        %199:bool = lt %198, %x_166
        if %199 [t: $B20] {  # if_7
          $B20: {  # true
            %200:i32 = load %x_93
            %x_170:i32 = let %200
            %202:i32 = add %x_170, 1i
            %x_171:i32 = let %202
            store %x_93, %x_171
            %204:i32 = load %x_95
            %x_172:i32 = let %204
            %206:ptr<function, i32, read_write> = access %x_94, %x_171
            %207:i32 = add %x_172, 1i
            store %206, %207
            %208:i32 = load %x_93
            %x_175:i32 = let %208
            %210:i32 = add %x_175, 1i
            %x_176:i32 = let %210
            store %x_93, %x_176
            %212:i32 = load %x_92
            %x_177:i32 = let %212
            %214:ptr<function, i32, read_write> = access %x_94, %x_176
            store %214, %x_177
            exit_if  # if_7
          }
        }
        continue  # -> $B16
      }
      $B16: {  # continuing
        next_iteration  # -> $B15
      }
    }
    %215:vec4<f32> = load %x_GLF_FragCoord
    %x_179:vec4<f32> = let %215
    %217:ptr<uniform, vec2<f32>, read> = access %x_34, 0u
    %218:vec2<f32> = load %217
    %x_182:vec2<f32> = let %218
    %220:f32 = access %x_179, 0u
    %221:f32 = access %x_179, 1u
    %222:vec2<f32> = construct %220, %221
    %223:vec2<f32> = div %222, %x_182
    store %uv, %223
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %224:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %225:i32 = load %224
    %x_185:i32 = let %225
    %227:f32 = load_vector_element %color, 0u
    %x_188:f32 = let %227
    %229:f32 = convert %x_185
    %230:f32 = add %x_188, %229
    store_vector_element %color, 0u, %230
    %231:f32 = load_vector_element %uv, 0u
    %x_192:f32 = let %231
    %233:bool = gt %x_192, 0.25f
    if %233 [t: $B21] {  # if_8
      $B21: {  # true
        %234:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %235:i32 = load %234
        %x_197:i32 = let %235
        %237:f32 = load_vector_element %color, 0u
        %x_200:f32 = let %237
        %239:f32 = convert %x_197
        %240:f32 = add %x_200, %239
        store_vector_element %color, 0u, %240
        exit_if  # if_8
      }
    }
    %241:f32 = load_vector_element %uv, 0u
    %x_204:f32 = let %241
    %243:bool = gt %x_204, 0.5f
    if %243 [t: $B22] {  # if_9
      $B22: {  # true
        %244:ptr<private, i32, read_write> = access %obj, 0u, 2i
        %245:i32 = load %244
        %x_209:i32 = let %245
        %247:f32 = load_vector_element %color, 1u
        %x_212:f32 = let %247
        %249:f32 = convert %x_209
        %250:f32 = add %x_212, %249
        store_vector_element %color, 1u, %250
        exit_if  # if_9
      }
    }
    %251:f32 = load_vector_element %uv, 0u
    %x_216:f32 = let %251
    %253:bool = gt %x_216, 0.75f
    if %253 [t: $B23] {  # if_10
      $B23: {  # true
        %254:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %255:i32 = load %254
        %x_221:i32 = let %255
        %257:f32 = load_vector_element %color, 2u
        %x_224:f32 = let %257
        %259:f32 = convert %x_221
        %260:f32 = add %x_224, %259
        store_vector_element %color, 2u, %260
        exit_if  # if_10
      }
    }
    %261:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %262:i32 = load %261
    %x_228:i32 = let %262
    %264:f32 = load_vector_element %color, 1u
    %x_231:f32 = let %264
    %266:f32 = convert %x_228
    %267:f32 = add %x_231, %266
    store_vector_element %color, 1u, %267
    %268:f32 = load_vector_element %uv, 1u
    %x_235:f32 = let %268
    %270:bool = gt %x_235, 0.25f
    if %270 [t: $B24] {  # if_11
      $B24: {  # true
        %271:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %272:i32 = load %271
        %x_240:i32 = let %272
        %274:f32 = load_vector_element %color, 0u
        %x_243:f32 = let %274
        %276:f32 = convert %x_240
        %277:f32 = add %x_243, %276
        store_vector_element %color, 0u, %277
        exit_if  # if_11
      }
    }
    %278:f32 = load_vector_element %uv, 1u
    %x_247:f32 = let %278
    %280:bool = gt %x_247, 0.5f
    if %280 [t: $B25] {  # if_12
      $B25: {  # true
        %281:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %282:i32 = load %281
        %x_252:i32 = let %282
        %284:f32 = load_vector_element %color, 1u
        %x_255:f32 = let %284
        %286:f32 = convert %x_252
        %287:f32 = add %x_255, %286
        store_vector_element %color, 1u, %287
        exit_if  # if_12
      }
    }
    %288:f32 = load_vector_element %uv, 1u
    %x_259:f32 = let %288
    %290:bool = gt %x_259, 0.75f
    if %290 [t: $B26] {  # if_13
      $B26: {  # true
        %291:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %292:i32 = load %291
        %x_264:i32 = let %292
        %294:f32 = load_vector_element %color, 2u
        %x_267:f32 = let %294
        %296:f32 = convert %x_264
        %297:f32 = add %x_267, %296
        store_vector_element %color, 2u, %297
        exit_if  # if_13
      }
    }
    %298:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %299:i32 = load %298
    %x_271:i32 = let %299
    %301:f32 = load_vector_element %color, 2u
    %x_274:f32 = let %301
    %303:f32 = convert %x_271
    %304:f32 = add %x_274, %303
    store_vector_element %color, 2u, %304
    %305:f32 = load_vector_element %uv, 0u
    %x_278:f32 = let %305
    %307:f32 = load_vector_element %uv, 1u
    %x_280:f32 = let %307
    %309:f32 = sub %x_278, %x_280
    %310:f32 = abs %309
    %311:bool = lt %310, 0.25f
    if %311 [t: $B27] {  # if_14
      $B27: {  # true
        %312:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %313:i32 = load %312
        %x_287:i32 = let %313
        %315:f32 = load_vector_element %color, 0u
        %x_290:f32 = let %315
        %317:f32 = convert %x_287
        %318:f32 = add %x_290, %317
        store_vector_element %color, 0u, %318
        exit_if  # if_14
      }
    }
    %319:vec3<f32> = load %color
    %x_293:vec3<f32> = let %319
    %321:vec3<f32> = normalize %x_293
    %x_294:vec3<f32> = let %321
    %323:f32 = access %x_294, 0u
    %324:f32 = access %x_294, 1u
    %325:f32 = access %x_294, 2u
    %326:vec4<f32> = construct %323, %324, %325, 1.0f
    store %frag_color, %326
    %327:vec4<f32> = load %x_GLF_pos
    %x_299:vec4<f32> = let %327
    store %gl_Position, %x_299
    ret
  }
}
%tint_symbol = @vertex func(%x_GLF_pos_param:vec4<f32> [@location(0)]):main_out {
  $B28: {
    store %x_GLF_pos, %x_GLF_pos_param
    %331:void = call %main_1
    %332:vec4<f32> = load %frag_color
    %333:vec4<f32> = load %gl_Position
    %334:main_out = construct %332, %333
    ret %334
  }
}
%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>):void {
  $B29: {
    %temp:ptr<function, i32, read_write> = var
    %339:i32 = load %i
    %x_302:i32 = let %339
    %341:ptr<private, i32, read_write> = access %obj, 0u, %x_302
    %342:i32 = load %341
    %x_304:i32 = let %342
    store %temp, %x_304
    %344:i32 = load %i
    %x_305:i32 = let %344
    %346:i32 = load %j
    %x_306:i32 = let %346
    %348:ptr<private, i32, read_write> = access %obj, 0u, %x_306
    %349:i32 = load %348
    %x_308:i32 = let %349
    %351:ptr<private, i32, read_write> = access %obj, 0u, %x_305
    store %351, %x_308
    %352:i32 = load %j
    %x_310:i32 = let %352
    %354:i32 = load %temp
    %x_311:i32 = let %354
    %356:ptr<private, i32, read_write> = access %obj, 0u, %x_310
    store %356, %x_311
    ret
  }
}
%quicksort_ = func():void {
  $B30: {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %365:i32 = load %top
    %x_376:i32 = let %365
    %367:i32 = add %x_376, 1i
    %x_377:i32 = let %367
    store %top, %x_377
    %369:i32 = load %l_1
    %x_378:i32 = let %369
    %371:ptr<function, i32, read_write> = access %stack, %x_377
    store %371, %x_378
    %372:i32 = load %top
    %x_380:i32 = let %372
    %374:i32 = add %x_380, 1i
    %x_381:i32 = let %374
    store %top, %x_381
    %376:i32 = load %h_1
    %x_382:i32 = let %376
    %378:ptr<function, i32, read_write> = access %stack, %x_381
    store %378, %x_382
    loop [b: $B31, c: $B32] {  # loop_4
      $B31: {  # body
        %379:i32 = load %top
        %x_388:i32 = let %379
        %381:bool = gte %x_388, 0i
        if %381 [t: $B33, f: $B34] {  # if_15
          $B33: {  # true
            exit_if  # if_15
          }
          $B34: {  # false
            exit_loop  # loop_4
          }
        }
        %382:i32 = load %top
        %x_391:i32 = let %382
        %384:i32 = sub %x_391, 1i
        store %top, %384
        %385:ptr<function, i32, read_write> = access %stack, %x_391
        %386:i32 = load %385
        %x_394:i32 = let %386
        store %h_1, %x_394
        %388:i32 = load %top
        %x_395:i32 = let %388
        %390:i32 = sub %x_395, 1i
        store %top, %390
        %391:ptr<function, i32, read_write> = access %stack, %x_395
        %392:i32 = load %391
        %x_398:i32 = let %392
        store %l_1, %x_398
        %394:i32 = load %l_1
        %x_399:i32 = let %394
        store %param_4, %x_399
        %396:i32 = load %h_1
        %x_400:i32 = let %396
        store %param_5, %x_400
        %398:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        %x_401:i32 = let %398
        store %p, %x_401
        %400:i32 = load %p
        %x_402:i32 = let %400
        %402:i32 = load %l_1
        %x_404:i32 = let %402
        %404:i32 = sub %x_402, 1i
        %405:bool = gt %404, %x_404
        if %405 [t: $B35] {  # if_16
          $B35: {  # true
            %406:i32 = load %top
            %x_408:i32 = let %406
            %408:i32 = add %x_408, 1i
            %x_409:i32 = let %408
            store %top, %x_409
            %410:i32 = load %l_1
            %x_410:i32 = let %410
            %412:ptr<function, i32, read_write> = access %stack, %x_409
            store %412, %x_410
            %413:i32 = load %top
            %x_412:i32 = let %413
            %415:i32 = add %x_412, 1i
            %x_413:i32 = let %415
            store %top, %x_413
            %417:i32 = load %p
            %x_414:i32 = let %417
            %419:ptr<function, i32, read_write> = access %stack, %x_413
            %420:i32 = sub %x_414, 1i
            store %419, %420
            exit_if  # if_16
          }
        }
        %421:i32 = load %p
        %x_417:i32 = let %421
        %423:i32 = load %h_1
        %x_419:i32 = let %423
        %425:i32 = add %x_417, 1i
        %426:bool = lt %425, %x_419
        if %426 [t: $B36] {  # if_17
          $B36: {  # true
            %427:i32 = load %top
            %x_423:i32 = let %427
            %429:i32 = add %x_423, 1i
            %x_424:i32 = let %429
            store %top, %x_424
            %431:i32 = load %p
            %x_425:i32 = let %431
            %433:ptr<function, i32, read_write> = access %stack, %x_424
            %434:i32 = add %x_425, 1i
            store %433, %434
            %435:i32 = load %top
            %x_428:i32 = let %435
            %437:i32 = add %x_428, 1i
            %x_429:i32 = let %437
            store %top, %x_429
            %439:i32 = load %h_1
            %x_430:i32 = let %439
            %441:ptr<function, i32, read_write> = access %stack, %x_429
            store %441, %x_430
            exit_if  # if_17
          }
        }
        continue  # -> $B32
      }
      $B32: {  # continuing
        next_iteration  # -> $B31
      }
    }
    ret
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
