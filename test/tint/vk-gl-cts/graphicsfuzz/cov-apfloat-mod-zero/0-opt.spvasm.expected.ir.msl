SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 3> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_6:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_8:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %undefined:ptr<function, f32, read_write> = var
    %x_51:ptr<function, bool, read_write> = var
    %x_52:ptr<function, bool, read_write> = var
    store %undefined, 0.0f
    %8:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %9:i32 = load %8
    %10:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %11:i32 = load %10
    %12:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %13:i32 = load %12
    %14:i32 = add %11, %13
    %15:bool = eq %9, %14
    %x_44:bool = let %15
    store %x_52, %x_44
    %17:bool = eq %x_44, false
    if %17 [t: $B3] {  # if_1
      $B3: {  # true
        %18:f32 = load %undefined
        %19:ptr<uniform, f32, read> = access %x_8, 0u, 0i, 0u
        %20:f32 = load %19
        %21:bool = gt %18, %20
        store %x_51, %21
        %22:bool = load %x_51
        store %x_52, %22
        exit_if  # if_1
      }
    }
    %23:bool = load %x_52
    if %23 [t: $B4, f: $B5] {  # if_2
      $B4: {  # true
        %24:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %25:i32 = load %24
        %26:f32 = convert %25
        %27:f32 = let %26
        %28:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %29:i32 = load %28
        %30:f32 = convert %29
        %31:f32 = let %30
        %32:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %33:i32 = load %32
        %34:f32 = convert %33
        %35:f32 = let %34
        %36:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %37:i32 = load %36
        %38:f32 = convert %37
        %39:vec4<f32> = construct %27, %31, %35, %38
        store %x_GLF_color, %39
        exit_if  # if_2
      }
      $B5: {  # false
        %40:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %41:i32 = load %40
        %42:f32 = convert %41
        %43:vec4<f32> = construct %42
        store %x_GLF_color, %43
        exit_if  # if_2
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B6: {
    %45:void = call %main_1
    %46:vec4<f32> = load %x_GLF_color
    %47:main_out = construct %46
    ret %47
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
