SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 3> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_8:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_12:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%f1_ = func():i32 {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    %A:ptr<function, array<i32, 10>, read_write> = var
    %a:ptr<function, i32, read_write> = var
    %9:ptr<uniform, i32, read> = access %x_8, 0u, 2i, 0u
    %10:i32 = load %9
    %x_56:i32 = let %10
    store %i, %x_56
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %12:i32 = load %i
        %x_61:i32 = let %12
        %14:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
        %15:i32 = load %14
        %x_63:i32 = let %15
        %17:bool = lt %x_61, %x_63
        if %17 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %18:i32 = load %i
        %x_66:i32 = let %18
        %20:ptr<uniform, i32, read> = access %x_8, 0u, 2i, 0u
        %21:i32 = load %20
        %x_68:i32 = let %21
        %23:ptr<function, i32, read_write> = access %A, %x_66
        store %23, %x_68
        continue  # -> $B4
      }
      $B4: {  # continuing
        %24:i32 = load %i
        %x_70:i32 = let %24
        %26:i32 = add %x_70, 1i
        store %i, %26
        next_iteration  # -> $B3
      }
    }
    store %a, -1i
    %27:f32 = load_vector_element %gl_FragCoord, 1u
    %x_73:f32 = let %27
    %29:ptr<uniform, f32, read> = access %x_12, 0u, 0i, 0u
    %30:f32 = load %29
    %x_75:f32 = let %30
    %32:bool = gte %x_73, %x_75
    if %32 [t: $B7] {  # if_2
      $B7: {  # true
        %33:i32 = load %a
        %x_79:i32 = let %33
        %35:i32 = add %x_79, 1i
        %x_80:i32 = let %35
        store %a, %x_80
        %37:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
        %38:i32 = load %37
        %x_82:i32 = let %38
        %40:ptr<function, i32, read_write> = access %A, %x_80
        store %40, %x_82
        exit_if  # if_2
      }
    }
    %41:ptr<uniform, i32, read> = access %x_8, 0u, 2i, 0u
    %42:i32 = load %41
    %x_85:i32 = let %42
    %44:ptr<function, i32, read_write> = access %A, %x_85
    %45:i32 = load %44
    %x_87:i32 = let %45
    %47:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
    %48:i32 = load %47
    %x_89:i32 = let %48
    %50:bool = eq %x_87, %x_89
    if %50 [t: $B8, f: $B9] {  # if_3
      $B8: {  # true
        %51:i32 = load %a
        %x_94:i32 = let %51
        %53:i32 = add %x_94, 1i
        %x_95:i32 = let %53
        store %a, %x_95
        %55:ptr<function, i32, read_write> = access %A, %x_95
        %56:i32 = load %55
        %x_97:i32 = let %56
        ret %x_97
      }
      $B9: {  # false
        %58:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
        %59:i32 = load %58
        %x_99:i32 = let %59
        ret %x_99
      }
    }
    unreachable
  }
}
%main_1 = func():void {
  $B10: {
    %i_1:ptr<function, i32, read_write> = var
    %63:i32 = call %f1_
    %x_42:i32 = let %63
    store %i_1, %x_42
    %65:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
    %66:i32 = load %65
    %x_44:i32 = let %66
    %68:i32 = load %i_1
    %x_46:i32 = let %68
    %70:i32 = load %i_1
    %x_48:i32 = let %70
    %72:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
    %73:i32 = load %72
    %x_51:i32 = let %73
    %75:f32 = convert %x_44
    %76:f32 = let %75
    %77:f32 = convert %x_46
    %78:f32 = let %77
    %79:f32 = convert %x_48
    %80:f32 = let %79
    %81:f32 = convert %x_51
    %82:vec4<f32> = construct %76, %78, %80, %81
    store %x_GLF_color, %82
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B11: {
    store %gl_FragCoord, %gl_FragCoord_param
    %85:void = call %main_1
    %86:vec4<f32> = load %x_GLF_color
    %87:main_out = construct %86
    ret %87
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
