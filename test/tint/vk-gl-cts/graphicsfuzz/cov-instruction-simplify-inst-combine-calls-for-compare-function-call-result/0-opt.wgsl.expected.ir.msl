SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 12> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_8:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%f_i1_ = func(%a:ptr<function, i32, read_write>):i32 {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    %6:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
    %7:i32 = load %6
    %x_16:i32 = let %7
    store %i, %x_16
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %9:i32 = load %i
        %x_17:i32 = let %9
        %11:ptr<uniform, i32, read> = access %x_8, 0u, 6i, 0u
        %12:i32 = load %11
        %x_18:i32 = let %12
        %14:bool = lt %x_17, %x_18
        if %14 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %15:i32 = load %i
        %x_19:i32 = let %15
        %17:ptr<uniform, i32, read> = access %x_8, 0u, 2i, 0u
        %18:i32 = load %17
        %x_20:i32 = let %18
        %20:bool = gt %x_19, %x_20
        if %20 [t: $B7] {  # if_2
          $B7: {  # true
            %21:i32 = load %a
            %x_21:i32 = let %21
            ret %x_21
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %23:i32 = load %i
        %x_22:i32 = let %23
        %25:i32 = add %x_22, 1i
        store %i, %25
        next_iteration  # -> $B3
      }
    }
    %26:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
    %27:i32 = load %26
    %x_24:i32 = let %27
    ret %x_24
  }
}
%main_1 = func():void {
  $B8: {
    %r:ptr<function, array<i32, 10>, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %a_1:ptr<function, array<i32, 10>, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %36:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
    %37:i32 = load %36
    %x_25:i32 = let %37
    %39:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
    %40:i32 = load %39
    %x_26:i32 = let %40
    %42:ptr<function, i32, read_write> = access %r, %x_25
    store %42, %x_26
    %43:ptr<uniform, i32, read> = access %x_8, 0u, 11i, 0u
    %44:i32 = load %43
    %x_27:i32 = let %44
    %46:ptr<uniform, i32, read> = access %x_8, 0u, 2i, 0u
    %47:i32 = load %46
    %x_28:i32 = let %47
    %49:ptr<function, i32, read_write> = access %r, %x_27
    store %49, %x_28
    %50:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
    %51:i32 = load %50
    %x_29:i32 = let %51
    %53:ptr<uniform, i32, read> = access %x_8, 0u, 3i, 0u
    %54:i32 = load %53
    %x_30:i32 = let %54
    %56:ptr<function, i32, read_write> = access %r, %x_29
    store %56, %x_30
    %57:ptr<uniform, i32, read> = access %x_8, 0u, 2i, 0u
    %58:i32 = load %57
    %x_31:i32 = let %58
    %60:ptr<uniform, i32, read> = access %x_8, 0u, 4i, 0u
    %61:i32 = load %60
    %x_32:i32 = let %61
    %63:ptr<function, i32, read_write> = access %r, %x_31
    store %63, %x_32
    %64:ptr<uniform, i32, read> = access %x_8, 0u, 3i, 0u
    %65:i32 = load %64
    %x_33:i32 = let %65
    %67:ptr<uniform, i32, read> = access %x_8, 0u, 5i, 0u
    %68:i32 = load %67
    %x_34:i32 = let %68
    %70:ptr<function, i32, read_write> = access %r, %x_33
    store %70, %x_34
    %71:ptr<uniform, i32, read> = access %x_8, 0u, 4i, 0u
    %72:i32 = load %71
    %x_35:i32 = let %72
    %74:ptr<uniform, i32, read> = access %x_8, 0u, 6i, 0u
    %75:i32 = load %74
    %x_36:i32 = let %75
    %77:ptr<function, i32, read_write> = access %r, %x_35
    store %77, %x_36
    %78:ptr<uniform, i32, read> = access %x_8, 0u, 5i, 0u
    %79:i32 = load %78
    %x_37:i32 = let %79
    %81:ptr<uniform, i32, read> = access %x_8, 0u, 7i, 0u
    %82:i32 = load %81
    %x_38:i32 = let %82
    %84:ptr<function, i32, read_write> = access %r, %x_37
    store %84, %x_38
    %85:ptr<uniform, i32, read> = access %x_8, 0u, 8i, 0u
    %86:i32 = load %85
    %x_39:i32 = let %86
    %88:ptr<uniform, i32, read> = access %x_8, 0u, 8i, 0u
    %89:i32 = load %88
    %x_40:i32 = let %89
    %91:ptr<function, i32, read_write> = access %r, %x_39
    store %91, %x_40
    %92:ptr<uniform, i32, read> = access %x_8, 0u, 9i, 0u
    %93:i32 = load %92
    %x_41:i32 = let %93
    %95:ptr<uniform, i32, read> = access %x_8, 0u, 9i, 0u
    %96:i32 = load %95
    %x_42:i32 = let %96
    %98:ptr<function, i32, read_write> = access %r, %x_41
    store %98, %x_42
    %99:ptr<uniform, i32, read> = access %x_8, 0u, 10i, 0u
    %100:i32 = load %99
    %x_43:i32 = let %100
    %102:ptr<uniform, i32, read> = access %x_8, 0u, 10i, 0u
    %103:i32 = load %102
    %x_44:i32 = let %103
    %105:ptr<function, i32, read_write> = access %r, %x_43
    store %105, %x_44
    %106:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
    %107:i32 = load %106
    %x_45:i32 = let %107
    store %i_1, %x_45
    loop [b: $B9, c: $B10] {  # loop_2
      $B9: {  # body
        %109:i32 = load %i_1
        %x_46:i32 = let %109
        %111:ptr<uniform, i32, read> = access %x_8, 0u, 6i, 0u
        %112:i32 = load %111
        %x_47:i32 = let %112
        %114:bool = lt %x_46, %x_47
        if %114 [t: $B11, f: $B12] {  # if_3
          $B11: {  # true
            exit_if  # if_3
          }
          $B12: {  # false
            exit_loop  # loop_2
          }
        }
        %115:i32 = load %i_1
        %x_48:i32 = let %115
        %117:i32 = load %i_1
        %x_49:i32 = let %117
        %119:ptr<function, i32, read_write> = access %a_1, %x_48
        store %119, %x_49
        %120:i32 = load %i_1
        %x_50:i32 = let %120
        %122:ptr<uniform, i32, read> = access %x_8, 0u, 6i, 0u
        %123:i32 = load %122
        %x_51:i32 = let %123
        %125:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
        %126:i32 = load %125
        %x_52:i32 = let %126
        %128:i32 = call %tint_div_i32, %x_51, %x_52
        %130:bool = lt %x_50, %128
        if %130 [t: $B13, f: $B14] {  # if_4
          $B13: {  # true
            %131:i32 = load %i_1
            %x_54:i32 = let %131
            %133:i32 = load %i_1
            %x_55:i32 = let %133
            %135:ptr<uniform, i32, read> = access %x_8, 0u, 1i, 0u
            %136:i32 = load %135
            %x_56:i32 = let %136
            %138:ptr<function, i32, read_write> = access %a_1, %x_54
            %139:i32 = add %x_55, %x_56
            store %138, %139
            %140:i32 = load %i_1
            %x_58:i32 = let %140
            %142:ptr<uniform, i32, read> = access %x_8, 0u, 6i, 0u
            %143:i32 = load %142
            %x_59:i32 = let %143
            %145:bool = lt %x_58, %x_59
            if %145 [t: $B15] {  # if_5
              $B15: {  # true
                continue  # -> $B10
              }
            }
            %146:i32 = load %i_1
            %x_60:i32 = let %146
            %148:i32 = load %i_1
            %x_61:i32 = let %148
            %150:ptr<uniform, i32, read> = access %x_8, 0u, 8i, 0u
            %151:i32 = load %150
            %x_62:i32 = let %151
            %153:ptr<function, i32, read_write> = access %a_1, %x_60
            %154:i32 = add %x_61, %x_62
            store %153, %154
            %155:i32 = load %i_1
            %x_64:i32 = let %155
            %157:ptr<function, i32, read_write> = access %a_1, %x_64
            %158:i32 = load %157
            %x_65:i32 = let %158
            store %param, %x_65
            %160:i32 = call %f_i1_, %param
            %x_66:i32 = let %160
            %162:ptr<uniform, i32, read> = access %x_8, 0u, 8i, 0u
            %163:i32 = load %162
            %x_67:i32 = let %163
            %165:bool = lt %x_66, %x_67
            if %165 [t: $B16] {  # if_6
              $B16: {  # true
                %166:i32 = load %i_1
                %x_68:i32 = let %166
                %x_182_save:i32 = let %x_68
                %169:ptr<function, i32, read_write> = access %a_1, %x_182_save
                %170:i32 = load %169
                %x_69:i32 = let %170
                %172:ptr<function, i32, read_write> = access %a_1, %x_182_save
                %173:i32 = sub %x_69, 1i
                store %172, %173
                exit_if  # if_6
              }
            }
            exit_if  # if_4
          }
          $B14: {  # false
            %174:i32 = load %i_1
            %x_71:i32 = let %174
            %176:ptr<function, i32, read_write> = access %a_1, %x_71
            %177:i32 = load %176
            %x_72:i32 = let %177
            store %param_1, %x_72
            %179:i32 = call %f_i1_, %param_1
            %x_73:i32 = let %179
            %181:ptr<uniform, i32, read> = access %x_8, 0u, 8i, 0u
            %182:i32 = load %181
            %x_74:i32 = let %182
            %184:bool = lt %x_73, %x_74
            if %184 [t: $B17] {  # if_7
              $B17: {  # true
                %185:i32 = load %i_1
                %x_75:i32 = let %185
                %187:ptr<uniform, i32, read> = access %x_8, 0u, 4i, 0u
                %188:i32 = load %187
                %x_76:i32 = let %188
                %190:ptr<function, i32, read_write> = access %a_1, %x_75
                %191:i32 = load %190
                %x_77:i32 = let %191
                %193:ptr<function, i32, read_write> = access %a_1, %x_75
                %194:i32 = add %x_77, %x_76
                store %193, %194
                exit_if  # if_7
              }
            }
            exit_if  # if_4
          }
        }
        continue  # -> $B10
      }
      $B10: {  # continuing
        %195:i32 = load %i_1
        %x_79:i32 = let %195
        %197:i32 = add %x_79, 1i
        store %i_1, %197
        next_iteration  # -> $B9
      }
    }
    %198:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
    %199:i32 = load %198
    %x_81:i32 = let %199
    store %i_2, %x_81
    loop [b: $B18, c: $B19] {  # loop_3
      $B18: {  # body
        %201:i32 = load %i_2
        %x_82:i32 = let %201
        %203:ptr<uniform, i32, read> = access %x_8, 0u, 6i, 0u
        %204:i32 = load %203
        %x_83:i32 = let %204
        %206:bool = lt %x_82, %x_83
        if %206 [t: $B20, f: $B21] {  # if_8
          $B20: {  # true
            exit_if  # if_8
          }
          $B21: {  # false
            exit_loop  # loop_3
          }
        }
        %207:i32 = load %i_2
        %x_84:i32 = let %207
        %209:ptr<function, i32, read_write> = access %a_1, %x_84
        %210:i32 = load %209
        %x_85:i32 = let %210
        %212:i32 = load %i_2
        %x_86:i32 = let %212
        %214:ptr<function, i32, read_write> = access %r, %x_86
        %215:i32 = load %214
        %x_87:i32 = let %215
        %217:bool = neq %x_85, %x_87
        if %217 [t: $B22] {  # if_9
          $B22: {  # true
            %218:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
            %219:i32 = load %218
            %x_88:i32 = let %219
            %221:f32 = convert %x_88
            %x_205:f32 = let %221
            %223:vec4<f32> = construct %x_205, %x_205, %x_205, %x_205
            store %x_GLF_color, %223
            ret
          }
        }
        continue  # -> $B19
      }
      $B19: {  # continuing
        %224:i32 = load %i_2
        %x_89:i32 = let %224
        %226:i32 = add %x_89, 1i
        store %i_2, %226
        next_iteration  # -> $B18
      }
    }
    %227:ptr<uniform, i32, read> = access %x_8, 0u, 11i, 0u
    %228:i32 = load %227
    %x_91:i32 = let %228
    %230:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
    %231:i32 = load %230
    %x_92:i32 = let %231
    %233:ptr<uniform, i32, read> = access %x_8, 0u, 0i, 0u
    %234:i32 = load %233
    %x_93:i32 = let %234
    %236:ptr<uniform, i32, read> = access %x_8, 0u, 11i, 0u
    %237:i32 = load %236
    %x_94:i32 = let %237
    %239:f32 = convert %x_91
    %240:f32 = let %239
    %241:f32 = convert %x_92
    %242:f32 = let %241
    %243:f32 = convert %x_93
    %244:f32 = let %243
    %245:f32 = convert %x_94
    %246:vec4<f32> = construct %240, %242, %244, %245
    store %x_GLF_color, %246
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B23: {
    %248:void = call %main_1
    %249:vec4<f32> = load %x_GLF_color
    %250:main_out = construct %249
    ret %250
  }
}
%tint_div_i32 = func(%lhs:i32, %rhs:i32):i32 {
  $B24: {
    %253:bool = eq %rhs, 0i
    %254:bool = eq %lhs, -2147483648i
    %255:bool = eq %rhs, -1i
    %256:bool = and %254, %255
    %257:bool = or %253, %256
    %258:i32 = select %rhs, 1i, %257
    %259:i32 = div %lhs, %258
    ret %259
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
