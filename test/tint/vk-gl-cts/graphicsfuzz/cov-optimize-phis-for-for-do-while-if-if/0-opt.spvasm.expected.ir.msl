SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 3> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_7:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_11:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %continue_execution:ptr<private, bool, read_write> = var, true
}

%main_1 = func():void {
  $B2: {
    %a:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %10:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
    %11:i32 = load %10
    store %a, %11
    %12:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
    %13:i32 = load %12
    store %i, %13
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %14:i32 = load %i
        %15:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
        %16:i32 = load %15
        %17:bool = lt %14, %16
        if %17 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %18:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
        %19:i32 = load %18
        store %j, %19
        loop [b: $B7, c: $B8] {  # loop_2
          $B7: {  # body
            %20:i32 = load %j
            %21:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
            %22:i32 = load %21
            %23:bool = lt %20, %22
            if %23 [t: $B9, f: $B10] {  # if_2
              $B9: {  # true
                exit_if  # if_2
              }
              $B10: {  # false
                exit_loop  # loop_2
              }
            }
            loop [b: $B11, c: $B12] {  # loop_3
              $B11: {  # body
                %24:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
                %25:i32 = load %24
                store %a, %25
                %26:f32 = load_vector_element %gl_FragCoord, 1u
                %27:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
                %28:f32 = load %27
                %29:bool = lt %26, %28
                if %29 [t: $B13] {  # if_3
                  $B13: {  # true
                    store %continue_execution, false
                    exit_if  # if_3
                  }
                }
                continue  # -> $B12
              }
              $B12: {  # continuing
                %30:i32 = load %a
                %x_72:i32 = let %30
                %32:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
                %33:i32 = load %32
                %x_74:i32 = let %33
                %35:bool = lt %x_72, %x_74
                %36:bool = eq %35, false
                break_if %36  # -> [t: exit_loop loop_3, f: $B11]
              }
            }
            %37:f32 = load_vector_element %gl_FragCoord, 1u
            %38:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
            %39:f32 = load %38
            %40:bool = lt %37, %39
            if %40 [t: $B14] {  # if_4
              $B14: {  # true
                exit_loop  # loop_2
              }
            }
            continue  # -> $B8
          }
          $B8: {  # continuing
            %41:i32 = load %j
            %42:i32 = add %41, 1i
            store %j, %42
            next_iteration  # -> $B7
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %43:i32 = load %i
        %44:i32 = add %43, 1i
        store %i, %44
        next_iteration  # -> $B3
      }
    }
    %45:i32 = load %a
    %46:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
    %47:i32 = load %46
    %48:bool = eq %45, %47
    if %48 [t: $B15, f: $B16] {  # if_5
      $B15: {  # true
        %49:i32 = load %a
        %50:f32 = convert %49
        %51:f32 = let %50
        %52:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
        %53:i32 = load %52
        %54:f32 = convert %53
        %55:f32 = let %54
        %56:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
        %57:i32 = load %56
        %58:f32 = convert %57
        %59:f32 = let %58
        %60:i32 = load %a
        %61:f32 = convert %60
        %62:vec4<f32> = construct %51, %55, %59, %61
        store %x_GLF_color, %62
        exit_if  # if_5
      }
      $B16: {  # false
        %63:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
        %64:i32 = load %63
        %65:f32 = convert %64
        %66:vec4<f32> = construct %65
        store %x_GLF_color, %66
        exit_if  # if_5
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B17: {
    store %gl_FragCoord, %gl_FragCoord_param
    %69:void = call %main_1
    %70:vec4<f32> = load %x_GLF_color
    %71:main_out = construct %70
    %72:bool = load %continue_execution
    %73:bool = eq %72, false
    if %73 [t: $B18] {  # if_6
      $B18: {  # true
        terminate_invocation
      }
    }
    ret %71
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
