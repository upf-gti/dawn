SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf2 = struct @align(4) {
  one:f32 @offset(0)
}

strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 1> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 4> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %m:ptr<private, mat4x2<f32>, read_write> = var
  %x_10:ptr<uniform, buf2, read> = var @binding_point(0, 2)
  %x_12:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_16:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%func0_i1_ = func(%x:ptr<function, i32, read_write>):void {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    %x_137:ptr<function, bool, read_write> = var
    %x_138:ptr<function, bool, read_write> = var
    %x_138_phi:ptr<function, bool, read_write> = var
    %x_139_phi:ptr<function, bool, read_write> = var
    %14:i32 = load %x
    %x_124:i32 = let %14
    %16:bool = lt %x_124, 1i
    %x_125:bool = let %16
    store %x_139_phi, %x_125
    %18:bool = eq %x_125, false
    if %18 [t: $B3] {  # if_1
      $B3: {  # true
        %19:i32 = load %x
        %x_129:i32 = let %19
        %21:bool = gt %x_129, 1i
        %x_130:bool = let %21
        store %x_138_phi, %x_130
        if %x_130 [t: $B4] {  # if_2
          $B4: {  # true
            %23:ptr<uniform, f32, read> = access %x_10, 0u
            %24:f32 = load %23
            %x_134:f32 = let %24
            %26:ptr<uniform, f32, read> = access %x_12, 0u, 0i, 0u
            %27:f32 = load %26
            %x_136:f32 = let %27
            %29:bool = gt %x_134, %x_136
            store %x_137, %29
            %30:bool = load %x_137
            store %x_138_phi, %30
            exit_if  # if_2
          }
        }
        %31:bool = load %x_138_phi
        store %x_138, %31
        %32:bool = load %x_138
        store %x_139_phi, %32
        exit_if  # if_1
      }
    }
    %33:bool = load %x_139_phi
    %x_139:bool = let %33
    if %x_139 [t: $B5] {  # if_3
      $B5: {  # true
        ret
      }
    }
    %35:ptr<uniform, f32, read> = access %x_10, 0u
    %36:f32 = load %35
    %x_143:f32 = let %36
    %38:ptr<uniform, f32, read> = access %x_12, 0u, 0i, 0u
    %39:f32 = load %38
    %x_145:f32 = let %39
    %41:bool = eq %x_143, %x_145
    if %41 [t: $B6] {  # if_4
      $B6: {  # true
        store %i, 0i
        loop [b: $B7, c: $B8] {  # loop_1
          $B7: {  # body
            %42:i32 = load %i
            %x_150:i32 = let %42
            %44:bool = lt %x_150, 2i
            if %44 [t: $B9, f: $B10] {  # if_5
              $B9: {  # true
                exit_if  # if_5
              }
              $B10: {  # false
                exit_loop  # loop_1
              }
            }
            continue  # -> $B8
          }
          $B8: {  # continuing
            %45:i32 = load %x
            %x_154:i32 = let %45
            %47:i32 = max %x_154, 0i
            %48:i32 = min %47, 3i
            %x_155:i32 = let %48
            %50:i32 = load %i
            %x_156:i32 = let %50
            %52:ptr<uniform, f32, read> = access %x_12, 0u, 0i, 0u
            %53:f32 = load %52
            %x_158:f32 = let %53
            %55:ptr<private, vec2<f32>, read_write> = access %m, %x_155
            %56:f32 = load_vector_element %55, %x_156
            %x_160:f32 = let %56
            %58:ptr<private, vec2<f32>, read_write> = access %m, %x_155
            %59:f32 = add %x_160, %x_158
            store_vector_element %58, %x_156, %59
            %60:i32 = load %i
            %x_163:i32 = let %60
            %62:i32 = add %x_163, 1i
            store %i, %62
            next_iteration  # -> $B7
          }
        }
        exit_if  # if_4
      }
    }
    ret
  }
}
%func1_ = func():void {
  $B11: {
    %param:ptr<function, i32, read_write> = var
    %65:f32 = load_vector_element %gl_FragCoord, 1u
    %x_167:f32 = let %65
    %67:bool = lt %x_167, 0.0f
    if %67 [t: $B12] {  # if_6
      $B12: {  # true
        ret
      }
    }
    store %param, 1i
    %68:void = call %func0_i1_, %param
    ret
  }
}
%main_1 = func():void {
  $B13: {
    store %m, mat4x2<f32>(vec2<f32>(0.0f))
    %70:void = call %func1_
    %71:void = call %func1_
    %72:mat4x2<f32> = load %m
    %x_54:mat4x2<f32> = let %72
    %74:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
    %75:i32 = load %74
    %x_56:i32 = let %75
    %77:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
    %78:i32 = load %77
    %x_59:i32 = let %78
    %80:ptr<uniform, i32, read> = access %x_16, 0u, 1i, 0u
    %81:i32 = load %80
    %x_62:i32 = let %81
    %83:ptr<uniform, i32, read> = access %x_16, 0u, 1i, 0u
    %84:i32 = load %83
    %x_65:i32 = let %84
    %86:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
    %87:i32 = load %86
    %x_68:i32 = let %87
    %89:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
    %90:i32 = load %89
    %x_71:i32 = let %90
    %92:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
    %93:i32 = load %92
    %x_74:i32 = let %93
    %95:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
    %96:i32 = load %95
    %x_77:i32 = let %96
    %98:f32 = convert %x_56
    %99:f32 = let %98
    %100:f32 = convert %x_59
    %101:vec2<f32> = construct %99, %100
    %102:vec2<f32> = let %101
    %103:f32 = convert %x_62
    %104:f32 = let %103
    %105:f32 = convert %x_65
    %106:vec2<f32> = construct %104, %105
    %107:vec2<f32> = let %106
    %108:f32 = convert %x_68
    %109:f32 = let %108
    %110:f32 = convert %x_71
    %111:vec2<f32> = construct %109, %110
    %112:vec2<f32> = let %111
    %113:f32 = convert %x_74
    %114:f32 = let %113
    %115:f32 = convert %x_77
    %116:vec2<f32> = construct %114, %115
    %117:mat4x2<f32> = construct %102, %107, %112, %116
    %x_83:mat4x2<f32> = let %117
    %119:vec2<f32> = access %x_54, 0u
    %120:vec2<f32> = access %x_83, 0u
    %121:vec2<bool> = eq %119, %120
    %122:bool = all %121
    %123:bool = let %122
    %124:vec2<f32> = access %x_54, 1u
    %125:vec2<f32> = access %x_83, 1u
    %126:vec2<bool> = eq %124, %125
    %127:bool = all %126
    %128:bool = and %123, %127
    %129:bool = let %128
    %130:vec2<f32> = access %x_54, 2u
    %131:vec2<f32> = access %x_83, 2u
    %132:vec2<bool> = eq %130, %131
    %133:bool = all %132
    %134:bool = and %129, %133
    %135:bool = let %134
    %136:vec2<f32> = access %x_54, 3u
    %137:vec2<f32> = access %x_83, 3u
    %138:vec2<bool> = eq %136, %137
    %139:bool = all %138
    %140:bool = and %135, %139
    if %140 [t: $B14, f: $B15] {  # if_7
      $B14: {  # true
        %141:ptr<uniform, i32, read> = access %x_16, 0u, 3i, 0u
        %142:i32 = load %141
        %x_107:i32 = let %142
        %144:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
        %145:i32 = load %144
        %x_110:i32 = let %145
        %147:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
        %148:i32 = load %147
        %x_113:i32 = let %148
        %150:ptr<uniform, i32, read> = access %x_16, 0u, 3i, 0u
        %151:i32 = load %150
        %x_116:i32 = let %151
        %153:f32 = convert %x_107
        %154:f32 = let %153
        %155:f32 = convert %x_110
        %156:f32 = let %155
        %157:f32 = convert %x_113
        %158:f32 = let %157
        %159:f32 = convert %x_116
        %160:vec4<f32> = construct %154, %156, %158, %159
        store %x_GLF_color, %160
        exit_if  # if_7
      }
      $B15: {  # false
        %161:ptr<uniform, i32, read> = access %x_16, 0u, 0i, 0u
        %162:i32 = load %161
        %x_120:i32 = let %162
        %164:f32 = convert %x_120
        %x_121:f32 = let %164
        %166:vec4<f32> = construct %x_121, %x_121, %x_121, %x_121
        store %x_GLF_color, %166
        exit_if  # if_7
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B16: {
    store %gl_FragCoord, %gl_FragCoord_param
    %169:void = call %main_1
    %170:vec4<f32> = load %x_GLF_color
    %171:main_out = construct %170
    ret %171
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
