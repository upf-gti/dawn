SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 2> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 3> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_7:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_11:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %a:ptr<function, f32, read_write> = var
    %b:ptr<function, f32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %i_3:ptr<function, i32, read_write> = var
    %i_4:ptr<function, i32, read_write> = var
    %i_5:ptr<function, i32, read_write> = var
    %i_6:ptr<function, i32, read_write> = var
    %i_7:ptr<function, i32, read_write> = var
    %i_8:ptr<function, i32, read_write> = var
    %i_9:ptr<function, i32, read_write> = var
    %i_10:ptr<function, i32, read_write> = var
    %19:ptr<uniform, f32, read> = access %x_7, 0u, 0i, 0u
    %20:f32 = load %19
    %x_104:f32 = let %20
    store %a, %x_104
    %22:ptr<uniform, f32, read> = access %x_7, 0u, 1i, 0u
    %23:f32 = load %22
    %x_106:f32 = let %23
    store %b, %x_106
    %25:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
    %26:i32 = load %25
    %x_24:i32 = let %26
    store %i, %x_24
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %28:i32 = load %i
        %x_25:i32 = let %28
        %30:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
        %31:i32 = load %30
        %x_26:i32 = let %31
        %33:bool = lt %x_25, %x_26
        if %33 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %34:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
        %35:i32 = load %34
        %x_27:i32 = let %35
        store %i_1, %x_27
        loop [b: $B7, c: $B8] {  # loop_2
          $B7: {  # body
            %37:i32 = load %i_1
            %x_28:i32 = let %37
            %39:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
            %40:i32 = load %39
            %x_29:i32 = let %40
            %42:bool = lt %x_28, %x_29
            if %42 [t: $B9, f: $B10] {  # if_2
              $B9: {  # true
                exit_if  # if_2
              }
              $B10: {  # false
                exit_loop  # loop_2
              }
            }
            %43:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
            %44:i32 = load %43
            %x_30:i32 = let %44
            store %i_2, %x_30
            loop [b: $B11, c: $B12] {  # loop_3
              $B11: {  # body
                %46:i32 = load %i_2
                %x_31:i32 = let %46
                %48:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                %49:i32 = load %48
                %x_32:i32 = let %49
                %51:bool = lt %x_31, %x_32
                if %51 [t: $B13, f: $B14] {  # if_3
                  $B13: {  # true
                    exit_if  # if_3
                  }
                  $B14: {  # false
                    exit_loop  # loop_3
                  }
                }
                %52:ptr<uniform, i32, read> = access %x_11, 0u, 2i, 0u
                %53:i32 = load %52
                %x_33:i32 = let %53
                store %i_3, %x_33
                loop [b: $B15, c: $B16] {  # loop_4
                  $B15: {  # body
                    %55:i32 = load %i_3
                    %x_34:i32 = let %55
                    %57:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                    %58:i32 = load %57
                    %x_35:i32 = let %58
                    %60:bool = lt %x_34, %x_35
                    if %60 [t: $B17, f: $B18] {  # if_4
                      $B17: {  # true
                        exit_if  # if_4
                      }
                      $B18: {  # false
                        exit_loop  # loop_4
                      }
                    }
                    %61:ptr<uniform, i32, read> = access %x_11, 0u, 2i, 0u
                    %62:i32 = load %61
                    %x_36:i32 = let %62
                    store %i_4, %x_36
                    loop [b: $B19, c: $B20] {  # loop_5
                      $B19: {  # body
                        %64:i32 = load %i_4
                        %x_37:i32 = let %64
                        %66:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                        %67:i32 = load %66
                        %x_38:i32 = let %67
                        %69:bool = lt %x_37, %x_38
                        if %69 [t: $B21, f: $B22] {  # if_5
                          $B21: {  # true
                            exit_if  # if_5
                          }
                          $B22: {  # false
                            exit_loop  # loop_5
                          }
                        }
                        %70:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
                        %71:i32 = load %70
                        %x_39:i32 = let %71
                        store %i_5, %x_39
                        loop [b: $B23, c: $B24] {  # loop_6
                          $B23: {  # body
                            %73:i32 = load %i_5
                            %x_40:i32 = let %73
                            %75:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                            %76:i32 = load %75
                            %x_41:i32 = let %76
                            %78:bool = lt %x_40, %x_41
                            if %78 [t: $B25, f: $B26] {  # if_6
                              $B25: {  # true
                                exit_if  # if_6
                              }
                              $B26: {  # false
                                exit_loop  # loop_6
                              }
                            }
                            %79:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
                            %80:i32 = load %79
                            %x_42:i32 = let %80
                            store %i_6, %x_42
                            loop [b: $B27, c: $B28] {  # loop_7
                              $B27: {  # body
                                %82:i32 = load %i_6
                                %x_43:i32 = let %82
                                %84:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                                %85:i32 = load %84
                                %x_44:i32 = let %85
                                %87:bool = lt %x_43, %x_44
                                if %87 [t: $B29, f: $B30] {  # if_7
                                  $B29: {  # true
                                    exit_if  # if_7
                                  }
                                  $B30: {  # false
                                    exit_loop  # loop_7
                                  }
                                }
                                %88:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
                                %89:i32 = load %88
                                %x_45:i32 = let %89
                                store %i_7, %x_45
                                loop [b: $B31, c: $B32] {  # loop_8
                                  $B31: {  # body
                                    %91:i32 = load %i_7
                                    %x_46:i32 = let %91
                                    %93:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                                    %94:i32 = load %93
                                    %x_47:i32 = let %94
                                    %96:bool = lt %x_46, %x_47
                                    if %96 [t: $B33, f: $B34] {  # if_8
                                      $B33: {  # true
                                        exit_if  # if_8
                                      }
                                      $B34: {  # false
                                        exit_loop  # loop_8
                                      }
                                    }
                                    %97:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
                                    %98:i32 = load %97
                                    %x_48:i32 = let %98
                                    store %i_8, %x_48
                                    loop [b: $B35, c: $B36] {  # loop_9
                                      $B35: {  # body
                                        %100:i32 = load %i_8
                                        %x_49:i32 = let %100
                                        %102:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                                        %103:i32 = load %102
                                        %x_50:i32 = let %103
                                        %105:bool = lt %x_49, %x_50
                                        if %105 [t: $B37, f: $B38] {  # if_9
                                          $B37: {  # true
                                            exit_if  # if_9
                                          }
                                          $B38: {  # false
                                            exit_loop  # loop_9
                                          }
                                        }
                                        %106:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
                                        %107:i32 = load %106
                                        %x_51:i32 = let %107
                                        store %i_9, %x_51
                                        loop [b: $B39, c: $B40] {  # loop_10
                                          $B39: {  # body
                                            %109:i32 = load %i_9
                                            %x_52:i32 = let %109
                                            %111:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                                            %112:i32 = load %111
                                            %x_53:i32 = let %112
                                            %114:bool = lt %x_52, %x_53
                                            if %114 [t: $B41, f: $B42] {  # if_10
                                              $B41: {  # true
                                                exit_if  # if_10
                                              }
                                              $B42: {  # false
                                                exit_loop  # loop_10
                                              }
                                            }
                                            %115:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
                                            %116:i32 = load %115
                                            %x_54:i32 = let %116
                                            store %i_10, %x_54
                                            loop [b: $B43, c: $B44] {  # loop_11
                                              $B43: {  # body
                                                %118:i32 = load %i_10
                                                %x_55:i32 = let %118
                                                %120:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
                                                %121:i32 = load %120
                                                %x_56:i32 = let %121
                                                %123:bool = lt %x_55, %x_56
                                                if %123 [t: $B45, f: $B46] {  # if_11
                                                  $B45: {  # true
                                                    exit_if  # if_11
                                                  }
                                                  $B46: {  # false
                                                    exit_loop  # loop_11
                                                  }
                                                }
                                                %124:ptr<uniform, f32, read> = access %x_7, 0u, 1i, 0u
                                                %125:f32 = load %124
                                                %x_196:f32 = let %125
                                                store %a, %x_196
                                                %127:f32 = load_vector_element %gl_FragCoord, 1u
                                                %x_198:f32 = let %127
                                                %129:ptr<uniform, f32, read> = access %x_7, 0u, 1i, 0u
                                                %130:f32 = load %129
                                                %x_200:f32 = let %130
                                                %132:bool = gt %x_198, %x_200
                                                if %132 [t: $B47] {  # if_12
                                                  $B47: {  # true
                                                    exit_loop  # loop_11
                                                  }
                                                }
                                                continue  # -> $B44
                                              }
                                              $B44: {  # continuing
                                                %133:i32 = load %i_10
                                                %x_57:i32 = let %133
                                                %135:i32 = add %x_57, 1i
                                                store %i_10, %135
                                                next_iteration  # -> $B43
                                              }
                                            }
                                            continue  # -> $B40
                                          }
                                          $B40: {  # continuing
                                            %136:i32 = load %i_9
                                            %x_59:i32 = let %136
                                            %138:i32 = add %x_59, 1i
                                            store %i_9, %138
                                            next_iteration  # -> $B39
                                          }
                                        }
                                        continue  # -> $B36
                                      }
                                      $B36: {  # continuing
                                        %139:i32 = load %i_8
                                        %x_61:i32 = let %139
                                        %141:i32 = add %x_61, 1i
                                        store %i_8, %141
                                        next_iteration  # -> $B35
                                      }
                                    }
                                    continue  # -> $B32
                                  }
                                  $B32: {  # continuing
                                    %142:i32 = load %i_7
                                    %x_63:i32 = let %142
                                    %144:i32 = add %x_63, 1i
                                    store %i_7, %144
                                    next_iteration  # -> $B31
                                  }
                                }
                                continue  # -> $B28
                              }
                              $B28: {  # continuing
                                %145:i32 = load %i_6
                                %x_65:i32 = let %145
                                %147:i32 = add %x_65, 1i
                                store %i_6, %147
                                next_iteration  # -> $B27
                              }
                            }
                            continue  # -> $B24
                          }
                          $B24: {  # continuing
                            %148:i32 = load %i_5
                            %x_67:i32 = let %148
                            %150:i32 = add %x_67, 1i
                            store %i_5, %150
                            next_iteration  # -> $B23
                          }
                        }
                        continue  # -> $B20
                      }
                      $B20: {  # continuing
                        %151:i32 = load %i_4
                        %x_69:i32 = let %151
                        %153:i32 = add %x_69, 1i
                        store %i_4, %153
                        next_iteration  # -> $B19
                      }
                    }
                    continue  # -> $B16
                  }
                  $B16: {  # continuing
                    %154:i32 = load %i_3
                    %x_71:i32 = let %154
                    %156:i32 = add %x_71, 1i
                    store %i_3, %156
                    next_iteration  # -> $B15
                  }
                }
                continue  # -> $B12
              }
              $B12: {  # continuing
                %157:i32 = load %i_2
                %x_73:i32 = let %157
                %159:i32 = add %x_73, 1i
                store %i_2, %159
                next_iteration  # -> $B11
              }
            }
            continue  # -> $B8
          }
          $B8: {  # continuing
            %160:i32 = load %i_1
            %x_75:i32 = let %160
            %162:i32 = add %x_75, 1i
            store %i_1, %162
            next_iteration  # -> $B7
          }
        }
        %163:f32 = load %b
        %x_204:f32 = let %163
        %165:f32 = add %x_204, 1.0f
        store %b, %165
        continue  # -> $B4
      }
      $B4: {  # continuing
        %166:i32 = load %i
        %x_77:i32 = let %166
        %168:i32 = add %x_77, 1i
        store %i, %168
        next_iteration  # -> $B3
      }
    }
    %169:f32 = load %b
    %x_206:f32 = let %169
    %171:f32 = load %a
    %x_207:f32 = let %171
    %173:f32 = load %a
    %x_208:f32 = let %173
    %175:f32 = load %b
    %x_209:f32 = let %175
    %177:vec4<f32> = construct %x_206, %x_207, %x_208, %x_209
    store %x_GLF_color, %177
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B48: {
    store %gl_FragCoord, %gl_FragCoord_param
    %180:void = call %main_1
    %181:vec4<f32> = load %x_GLF_color
    %182:main_out = construct %181
    ret %182
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
