SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 2> @offset(0)
}

buf2 = struct @align(4) {
  zero:f32 @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 2> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_5:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_7:ptr<uniform, buf2, read> = var @binding_point(0, 2)
  %x_10:ptr<uniform, buf0, read> = var @binding_point(0, 0)
}

%main_1 = func():void {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    %7:ptr<uniform, f32, read> = access %x_5, 0u, 0i, 0u
    %8:f32 = load %7
    %x_38:f32 = let %8
    %10:vec4<f32> = construct %x_38, %x_38, %x_38, %x_38
    store %x_GLF_color, %10
    %11:ptr<uniform, f32, read> = access %x_7, 0u
    %12:f32 = load %11
    %x_41:f32 = let %12
    %14:ptr<uniform, f32, read> = access %x_5, 0u, 0i, 0u
    %15:f32 = load %14
    %x_43:f32 = let %15
    %17:bool = gt %x_41, %x_43
    if %17 [t: $B3, f: $B4] {  # if_1
      $B3: {  # true
        loop [b: $B5, c: $B6] {  # loop_1
          $B5: {  # body
            %18:ptr<uniform, f32, read> = access %x_5, 0u, 1i, 0u
            %19:f32 = load %18
            %x_53:f32 = let %19
            %21:vec4<f32> = construct %x_53, %x_53, %x_53, %x_53
            store %x_GLF_color, %21
            continue  # -> $B6
          }
          $B6: {  # continuing
            break_if false  # -> [t: exit_loop loop_1, f: $B5]
          }
        }
        exit_if  # if_1
      }
      $B4: {  # false
        loop [b: $B7, c: $B8] {  # loop_2
          $B7: {  # body
            loop [b: $B9] {  # loop_3
              $B9: {  # body
                if true [t: $B10, f: $B11] {  # if_2
                  $B10: {  # true
                    exit_if  # if_2
                  }
                  $B11: {  # false
                    exit_loop  # loop_3
                  }
                }
                %22:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
                %23:i32 = load %22
                %x_13:i32 = let %23
                store %i, %x_13
                loop [b: $B12, c: $B13] {  # loop_4
                  $B12: {  # body
                    %25:i32 = load %i
                    %x_14:i32 = let %25
                    %27:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
                    %28:i32 = load %27
                    %x_15:i32 = let %28
                    %30:bool = lt %x_14, %x_15
                    if %30 [t: $B14, f: $B15] {  # if_3
                      $B14: {  # true
                        exit_if  # if_3
                      }
                      $B15: {  # false
                        exit_loop  # loop_4
                      }
                    }
                    %31:ptr<uniform, f32, read> = access %x_5, 0u, 1i, 0u
                    %32:f32 = load %31
                    %x_73:f32 = let %32
                    %34:ptr<uniform, f32, read> = access %x_5, 0u, 0i, 0u
                    %35:f32 = load %34
                    %x_75:f32 = let %35
                    %37:ptr<uniform, f32, read> = access %x_5, 0u, 0i, 0u
                    %38:f32 = load %37
                    %x_77:f32 = let %38
                    %40:ptr<uniform, f32, read> = access %x_5, 0u, 1i, 0u
                    %41:f32 = load %40
                    %x_79:f32 = let %41
                    %43:vec4<f32> = construct %x_73, %x_75, %x_77, %x_79
                    store %x_GLF_color, %43
                    continue  # -> $B13
                  }
                  $B13: {  # continuing
                    %44:i32 = load %i
                    %x_16:i32 = let %44
                    %46:i32 = add %x_16, 1i
                    store %i, %46
                    next_iteration  # -> $B12
                  }
                }
                exit_loop  # loop_3
              }
            }
            continue  # -> $B8
          }
          $B8: {  # continuing
            %47:ptr<uniform, f32, read> = access %x_7, 0u
            %48:f32 = load %47
            %x_82:f32 = let %48
            %50:ptr<uniform, f32, read> = access %x_5, 0u, 0i, 0u
            %51:f32 = load %50
            %x_84:f32 = let %51
            %53:bool = gt %x_82, %x_84
            %54:bool = eq %53, false
            break_if %54  # -> [t: exit_loop loop_2, f: $B7]
          }
        }
        exit_if  # if_1
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out {
  $B16: {
    %56:void = call %main_1
    %57:vec4<f32> = load %x_GLF_color
    %58:main_out = construct %57
    ret %58
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
