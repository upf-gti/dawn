SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_10:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%compute_value_f1_f1_ = func(%limit:ptr<function, f32, read_write>, %thirty_two:ptr<function, f32, read_write>):f32 {
  $B2: {
    %x_91:ptr<function, f32, read_write> = var
    %x_91_phi:ptr<function, f32, read_write> = var
    %x_94_phi:ptr<function, i32, read_write> = var
    store %x_91_phi, -0.5f
    store %x_94_phi, 1i
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %x_104:ptr<function, f32, read_write> = var
        %x_113:ptr<function, f32, read_write> = var
        %x_95:ptr<function, i32, read_write> = var
        %x_92_phi:ptr<function, f32, read_write> = var
        %14:f32 = load %x_91_phi
        store %x_91, %14
        %15:i32 = load %x_94_phi
        %x_94:i32 = let %15
        %17:bool = lt %x_94, 800i
        if %17 [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        %x_112:ptr<function, f32, read_write> = var
        %x_113_phi:ptr<function, f32, read_write> = var
        %20:i32 = call %tint_mod_i32, %x_94, 32i
        %22:bool = eq %20, 0i
        if %22 [t: $B7, f: $B8] {  # if_2
          $B7: {  # true
            %23:f32 = load %x_91
            %24:f32 = add %23, 0.40000000596046447754f
            store %x_104, %24
            %25:f32 = load %x_104
            store %x_92_phi, %25
            exit_if  # if_2
          }
          $B8: {  # false
            %26:f32 = load %thirty_two
            %x_106:f32 = let %26
            %28:f32 = load %x_91
            store %x_113_phi, %28
            %29:f32 = convert %x_94
            %30:f32 = let %29
            %31:f32 = round %x_106
            %32:f32 = let %31
            %33:f32 = convert %x_94
            %34:f32 = let %33
            %35:f32 = round %x_106
            %36:f32 = div %34, %35
            %37:f32 = floor %36
            %38:f32 = mul %32, %37
            %39:f32 = sub %30, %38
            %40:bool = lte %39, 0.00999999977648258209f
            if %40 [t: $B9] {  # if_3
              $B9: {  # true
                %41:f32 = load %x_91
                %42:f32 = add %41, 100.0f
                store %x_112, %42
                %43:f32 = load %x_112
                store %x_113_phi, %43
                exit_if  # if_3
              }
            }
            %44:f32 = load %x_113_phi
            store %x_113, %44
            %45:f32 = load %x_113
            store %x_92_phi, %45
            exit_if  # if_2
          }
        }
        %x_92:ptr<function, f32, read_write> = var
        %47:f32 = load %x_92_phi
        store %x_92, %47
        %48:f32 = load %limit
        %x_115:f32 = let %48
        %50:f32 = convert %x_94
        %51:bool = gte %50, %x_115
        if %51 [t: $B10] {  # if_4
          $B10: {  # true
            %52:f32 = load %x_92
            ret %52
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        %53:i32 = add %x_94, 1i
        store %x_95, %53
        %54:f32 = load %x_92
        store %x_91_phi, %54
        %55:i32 = load %x_95
        store %x_94_phi, %55
        next_iteration  # -> $B3
      }
    }
    %56:f32 = load %x_91
    ret %56
  }
}
%main_1 = func():void {
  $B11: {
    %c:ptr<function, vec3<f32>, read_write> = var
    %param:ptr<function, f32, read_write> = var
    %param_1:ptr<function, f32, read_write> = var
    %param_2:ptr<function, f32, read_write> = var
    %param_3:ptr<function, f32, read_write> = var
    %x_68_phi:ptr<function, i32, read_write> = var
    store %c, vec3<f32>(7.0f, 8.0f, 9.0f)
    %64:ptr<uniform, vec2<f32>, read> = access %x_10, 0u
    %65:f32 = load_vector_element %64, 0u
    %x_52:f32 = let %65
    %67:f32 = mul %x_52, 0.125f
    %68:f32 = round %67
    %x_54:f32 = let %68
    %70:f32 = load_vector_element %gl_FragCoord, 0u
    %x_56:f32 = let %70
    store %param, %x_56
    store %param_1, %x_54
    %72:f32 = call %compute_value_f1_f1_, %param, %param_1
    %x_57:f32 = let %72
    store_vector_element %c, 0u, %x_57
    %74:f32 = load_vector_element %gl_FragCoord, 1u
    %x_60:f32 = let %74
    store %param_2, %x_60
    store %param_3, %x_54
    %76:f32 = call %compute_value_f1_f1_, %param_2, %param_3
    %x_61:f32 = let %76
    store_vector_element %c, 1u, %x_61
    %78:f32 = load_vector_element %c, 0u
    %x_63:f32 = let %78
    %80:f32 = load_vector_element %c, 1u
    %x_64:f32 = let %80
    %82:f32 = add %x_63, %x_64
    store_vector_element %c, 2u, %82
    store %x_68_phi, 0i
    loop [b: $B12, c: $B13] {  # loop_2
      $B12: {  # body
        %x_69:ptr<function, i32, read_write> = var
        %84:i32 = load %x_68_phi
        %x_68:i32 = let %84
        %86:bool = lt %x_68, 3i
        if %86 [t: $B14, f: $B15] {  # if_5
          $B14: {  # true
            exit_if  # if_5
          }
          $B15: {  # false
            exit_loop  # loop_2
          }
        }
        %87:f32 = load_vector_element %c, %x_68
        %x_75:f32 = let %87
        %89:bool = gte %x_75, 1.0f
        if %89 [t: $B16] {  # if_6
          $B16: {  # true
            %90:f32 = load_vector_element %c, %x_68
            %x_79:f32 = let %90
            %92:f32 = load_vector_element %c, %x_68
            %x_80:f32 = let %92
            %94:f32 = mul %x_79, %x_80
            store_vector_element %c, %x_68, %94
            exit_if  # if_6
          }
        }
        continue  # -> $B13
      }
      $B13: {  # continuing
        %95:i32 = add %x_68, 1i
        store %x_69, %95
        %96:i32 = load %x_69
        store %x_68_phi, %96
        next_iteration  # -> $B12
      }
    }
    %97:vec3<f32> = load %c
    %x_82:vec3<f32> = let %97
    %99:vec3<f32> = abs %x_82
    %100:vec3<f32> = normalize %99
    %x_84:vec3<f32> = let %100
    %102:f32 = access %x_84, 0u
    %103:f32 = access %x_84, 1u
    %104:f32 = access %x_84, 2u
    %105:vec4<f32> = construct %102, %103, %104, 1.0f
    store %x_GLF_color, %105
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B17: {
    store %gl_FragCoord, %gl_FragCoord_param
    %108:void = call %main_1
    %109:vec4<f32> = load %x_GLF_color
    %110:main_out = construct %109
    ret %110
  }
}
%tint_mod_i32 = func(%lhs:i32, %rhs:i32):i32 {
  $B18: {
    %113:bool = eq %rhs, 0i
    %114:bool = eq %lhs, -2147483648i
    %115:bool = eq %rhs, -1i
    %116:bool = and %114, %115
    %117:bool = or %113, %116
    %118:i32 = select %rhs, 1i, %117
    %119:i32 = let %118
    %120:i32 = div %lhs, %119
    %121:i32 = mul %120, %119
    %122:i32 = sub %lhs, %121
    ret %122
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
