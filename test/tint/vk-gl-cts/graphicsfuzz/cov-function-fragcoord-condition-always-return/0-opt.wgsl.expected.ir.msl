SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 4> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 2> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_8:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_11:ptr<uniform, buf0, read> = var @binding_point(0, 0)
}

%func_f1_ = func(%x:ptr<function, f32, read_write>):f32 {
  $B2: {
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        if true [t: $B5, f: $B6] {  # if_1
          $B5: {  # true
            exit_if  # if_1
          }
          $B6: {  # false
            exit_loop  # loop_1
          }
        }
        loop [b: $B7, c: $B8] {  # loop_2
          $B7: {  # body
            %7:f32 = load_vector_element %gl_FragCoord, 1u
            %x_77:f32 = let %7
            %9:ptr<uniform, f32, read> = access %x_8, 0u, 2i, 0u
            %10:f32 = load %9
            %x_79:f32 = let %10
            %12:bool = lt %x_77, %x_79
            if %12 [t: $B9] {  # if_2
              $B9: {  # true
                loop [b: $B10, c: $B11] {  # loop_3
                  $B10: {  # body
                    continue  # -> $B11
                  }
                  $B11: {  # continuing
                    %13:f32 = load_vector_element %gl_FragCoord, 0u
                    %x_88:f32 = let %13
                    %15:ptr<uniform, f32, read> = access %x_8, 0u, 2i, 0u
                    %16:f32 = load %15
                    %x_90:f32 = let %16
                    %18:bool = lt %x_88, %x_90
                    %19:bool = eq %18, false
                    break_if %19  # -> [t: exit_loop loop_3, f: $B10]
                  }
                }
                exit_if  # if_2
              }
            }
            %20:f32 = load %x
            %x_92:f32 = let %20
            %22:ptr<uniform, f32, read> = access %x_8, 0u, 3i, 0u
            %23:f32 = load %22
            %x_94:f32 = let %23
            %25:bool = lt %x_92, %x_94
            if %25 [t: $B12] {  # if_3
              $B12: {  # true
                %26:ptr<uniform, f32, read> = access %x_8, 0u, 1i, 0u
                %27:f32 = load %26
                %x_99:f32 = let %27
                ret %x_99
              }
            }
            continue  # -> $B8
          }
          $B8: {  # continuing
            %29:f32 = load_vector_element %gl_FragCoord, 1u
            %x_101:f32 = let %29
            %31:ptr<uniform, f32, read> = access %x_8, 0u, 2i, 0u
            %32:f32 = load %31
            %x_103:f32 = let %32
            %34:bool = lt %x_101, %x_103
            %35:bool = eq %34, false
            break_if %35  # -> [t: exit_loop loop_2, f: $B7]
          }
        }
        continue  # -> $B4
      }
      $B4: {  # continuing
        next_iteration  # -> $B3
      }
    }
    %36:ptr<uniform, f32, read> = access %x_8, 0u, 0i, 0u
    %37:f32 = load %36
    %x_106:f32 = let %37
    ret %x_106
  }
}
%main_1 = func():void {
  $B13: {
    %param:ptr<function, f32, read_write> = var
    %41:f32 = load_vector_element %gl_FragCoord, 0u
    %x_41:f32 = let %41
    store %param, %x_41
    %43:f32 = call %func_f1_, %param
    %x_42:f32 = let %43
    %45:ptr<uniform, f32, read> = access %x_8, 0u, 1i, 0u
    %46:f32 = load %45
    %x_44:f32 = let %46
    %48:bool = eq %x_42, %x_44
    if %48 [t: $B14, f: $B15] {  # if_4
      $B14: {  # true
        %49:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
        %50:i32 = load %49
        %x_50:i32 = let %50
        %52:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
        %53:i32 = load %52
        %x_53:i32 = let %53
        %55:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
        %56:i32 = load %55
        %x_56:i32 = let %56
        %58:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
        %59:i32 = load %58
        %x_59:i32 = let %59
        %61:f32 = convert %x_50
        %62:f32 = let %61
        %63:f32 = convert %x_53
        %64:f32 = let %63
        %65:f32 = convert %x_56
        %66:f32 = let %65
        %67:f32 = convert %x_59
        %68:vec4<f32> = construct %62, %64, %66, %67
        store %x_GLF_color, %68
        exit_if  # if_4
      }
      $B15: {  # false
        %69:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
        %70:i32 = load %69
        %x_63:i32 = let %70
        %72:f32 = convert %x_63
        %x_64:f32 = let %72
        %74:vec4<f32> = construct %x_64, %x_64, %x_64, %x_64
        store %x_GLF_color, %74
        exit_if  # if_4
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B16: {
    store %gl_FragCoord, %gl_FragCoord_param
    %77:void = call %main_1
    %78:vec4<f32> = load %x_GLF_color
    %79:main_out = construct %78
    ret %79
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
