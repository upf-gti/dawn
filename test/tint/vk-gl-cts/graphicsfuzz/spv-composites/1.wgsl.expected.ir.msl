SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %x_195:ptr<function, array<i32, 256>, read_write> = var
    %x_196:ptr<function, array<i32, 256>, read_write> = var
    %x_197:ptr<function, array<i32, 256>, read_write> = var
    %x_208:ptr<function, vec2<f32>, read_write> = var
    %x_214:ptr<function, vec2<i32>, read_write> = var
    %x_249:ptr<function, vec4<f32>, read_write> = var
    %x_251:ptr<function, vec4<f32>, read_write> = var
    %x_218_phi:ptr<function, vec2<i32>, read_write> = var
    %x_251_phi:ptr<function, vec4<f32>, read_write> = var
    %x_252_phi:ptr<function, bool, read_write> = var
    %x_254_phi:ptr<function, vec4<f32>, read_write> = var
    %16:vec4<f32> = load %gl_FragCoord
    %x_198:vec4<f32> = let %16
    %18:ptr<uniform, vec2<f32>, read> = access %x_6, 0u
    %19:vec2<f32> = load %18
    %x_201:vec2<f32> = let %19
    %21:f32 = access %x_198, 0u
    %22:f32 = access %x_198, 1u
    %23:vec2<f32> = construct %21, %22
    %24:vec2<f32> = div %23, %x_201
    %x_202:vec2<f32> = let %24
    %x_204:i32 = let -82i
    %27:vec4<f32> = construct %x_201, 15.0f, 15.0f
    %28:f32 = access %27, 2u
    %29:vec2<f32> = construct 0.0f, %28
    store %x_208, %29
    %x_209:i32 = let 120i
    %31:f32 = access %x_202, 0u
    %32:f32 = mul %31, 256.0f
    %33:i32 = call %tint_f32_to_i32, %32
    %35:i32 = let %33
    %36:f32 = access %x_202, 1u
    %37:f32 = mul %36, 256.0f
    %38:i32 = call %tint_f32_to_i32, %37
    %39:vec2<i32> = construct %35, %38
    store %x_214, %39
    switch 0u [c: (default, $B3)] {  # switch_1
      $B3: {  # case
        %40:vec2<i32> = load %x_214
        store %x_218_phi, %40
        loop [b: $B4, c: $B5] {  # loop_1
          $B4: {  # body
            %x_235:ptr<function, bool, read_write> = var
            %x_236_phi:ptr<function, bool, read_write> = var
            %43:vec2<i32> = load %x_218_phi
            %x_218:vec2<i32> = let %43
            %45:i32 = access %x_218, 1u
            %x_221:i32 = let %45
            store %x_251_phi, vec4<f32>(0.0f)
            store %x_252_phi, false
            %47:bool = neq %x_221, 256i
            if %47 [t: $B6, f: $B7] {  # if_1
              $B6: {  # true
                exit_if  # if_1
              }
              $B7: {  # false
                exit_loop  # loop_1
              }
            }
            %48:i32 = access %x_218, 0u
            %x_225:i32 = let %48
            store %x_195, array<i32, 256>(115i, 133i, 150i, 164i, 176i, 184i, 190i, 192i, 191i, 187i, 181i, 172i, 163i, 153i, 143i, 134i, 126i, 120i, 116i, 114i, 114i, 117i, 121i, 127i, 134i, 141i, 148i, 154i, 159i, 162i, 163i, 161i, 157i, 151i, 143i, 134i, 124i, 113i, 103i, 94i, 87i, 82i, 79i, 80i, 84i, 91i, 101i, 114i, 130i, 146i, 164i, 182i, 199i, 215i, 229i, 240i, 249i, 254i, 256i, 254i, 250i, 243i, 233i, 223i, 212i, 200i, 190i, 180i, 172i, 166i, 163i, 161i, 162i, 164i, 169i, 174i, 179i, 185i, 190i, 193i, 195i, 195i, 192i, 188i, 180i, 171i, 161i, 149i, 137i, 125i, 114i, 105i, 97i, 93i, 91i, 93i, 98i, 106i, 117i, 130i, 145i, 161i, 177i, 193i, 208i, 221i, 231i, 239i, 243i, 244i, 242i, 236i, 228i, 218i, 207i, 194i, 181i, 169i, 158i, 148i, 141i, 135i, 132i, 131i, 132i, 135i, 138i, 143i, 147i, 151i, 154i, 155i, 155i, 152i, 146i, 139i, 129i, 118i, 106i, 93i, 80i, 68i, 58i, 49i, 43i, 40i, 41i, 44i, 51i, 61i, 73i, 87i, 103i, 119i, 134i, 149i, 162i, 173i, 181i, 186i, 188i, 186i, 181i, 174i, 164i, 153i, 141i, 128i, 116i, 104i, 94i, 86i, 81i, 77i, 76i, 77i, 80i, 84i, 89i, 94i, 98i, 102i, 104i, 104i, 102i, 98i, 92i, 83i, 73i, 62i, 50i, 38i, 26i, 16i, 8i, 2i, 0i, 0i, 4i, 11i, 21i, 33i, 48i, 64i, 81i, 98i, 114i, 129i, 141i, 151i, 158i, 161i, 161i, 158i, 152i, 144i, 134i, 123i, 112i, 100i, 90i, 81i, 73i, 68i, 65i, 65i, 67i, 70i, 75i, 81i, 87i, 92i, 97i, 101i, 103i, 102i, 100i, 95i, 88i, 79i, 69i, 58i, 47i, 36i, 26i, 18i, 13i, 11i, 11i, 15i, 22i, 32i, 45i, 60i, 77i, 94i)
            %50:ptr<function, i32, read_write> = access %x_195, %x_221
            %51:i32 = load %50
            %x_227:i32 = let %51
            %53:i32 = add %x_227, 15i
            %54:bool = lt %x_225, %53
            %x_229:bool = let %54
            store %x_236_phi, %x_229
            if %x_229 [t: $B8] {  # if_2
              $B8: {  # true
                store %x_196, array<i32, 256>(115i, 133i, 150i, 164i, 176i, 184i, 190i, 192i, 191i, 187i, 181i, 172i, 163i, 153i, 143i, 134i, 126i, 120i, 116i, 114i, 114i, 117i, 121i, 127i, 134i, 141i, 148i, 154i, 159i, 162i, 163i, 161i, 157i, 151i, 143i, 134i, 124i, 113i, 103i, 94i, 87i, 82i, 79i, 80i, 84i, 91i, 101i, 114i, 130i, 146i, 164i, 182i, 199i, 215i, 229i, 240i, 249i, 254i, 256i, 254i, 250i, 243i, 233i, 223i, 212i, 200i, 190i, 180i, 172i, 166i, 163i, 161i, 162i, 164i, 169i, 174i, 179i, 185i, 190i, 193i, 195i, 195i, 192i, 188i, 180i, 171i, 161i, 149i, 137i, 125i, 114i, 105i, 97i, 93i, 91i, 93i, 98i, 106i, 117i, 130i, 145i, 161i, 177i, 193i, 208i, 221i, 231i, 239i, 243i, 244i, 242i, 236i, 228i, 218i, 207i, 194i, 181i, 169i, 158i, 148i, 141i, 135i, 132i, 131i, 132i, 135i, 138i, 143i, 147i, 151i, 154i, 155i, 155i, 152i, 146i, 139i, 129i, 118i, 106i, 93i, 80i, 68i, 58i, 49i, 43i, 40i, 41i, 44i, 51i, 61i, 73i, 87i, 103i, 119i, 134i, 149i, 162i, 173i, 181i, 186i, 188i, 186i, 181i, 174i, 164i, 153i, 141i, 128i, 116i, 104i, 94i, 86i, 81i, 77i, 76i, 77i, 80i, 84i, 89i, 94i, 98i, 102i, 104i, 104i, 102i, 98i, 92i, 83i, 73i, 62i, 50i, 38i, 26i, 16i, 8i, 2i, 0i, 0i, 4i, 11i, 21i, 33i, 48i, 64i, 81i, 98i, 114i, 129i, 141i, 151i, 158i, 161i, 161i, 158i, 152i, 144i, 134i, 123i, 112i, 100i, 90i, 81i, 73i, 68i, 65i, 65i, 67i, 70i, 75i, 81i, 87i, 92i, 97i, 101i, 103i, 102i, 100i, 95i, 88i, 79i, 69i, 58i, 47i, 36i, 26i, 18i, 13i, 11i, 11i, 15i, 22i, 32i, 45i, 60i, 77i, 94i)
                %56:ptr<function, i32, read_write> = access %x_196, %x_221
                %57:i32 = load %56
                %x_233:i32 = let %57
                %59:i32 = sub %x_233, 15i
                %60:bool = gt %x_225, %59
                store %x_235, %60
                %61:bool = load %x_235
                store %x_236_phi, %61
                exit_if  # if_2
              }
            }
            %62:bool = load %x_236_phi
            %x_236:bool = let %62
            if %x_236 [t: $B9] {  # if_3
              $B9: {  # true
                store %x_197, array<i32, 256>(115i, 133i, 150i, 164i, 176i, 184i, 190i, 192i, 191i, 187i, 181i, 172i, 163i, 153i, 143i, 134i, 126i, 120i, 116i, 114i, 114i, 117i, 121i, 127i, 134i, 141i, 148i, 154i, 159i, 162i, 163i, 161i, 157i, 151i, 143i, 134i, 124i, 113i, 103i, 94i, 87i, 82i, 79i, 80i, 84i, 91i, 101i, 114i, 130i, 146i, 164i, 182i, 199i, 215i, 229i, 240i, 249i, 254i, 256i, 254i, 250i, 243i, 233i, 223i, 212i, 200i, 190i, 180i, 172i, 166i, 163i, 161i, 162i, 164i, 169i, 174i, 179i, 185i, 190i, 193i, 195i, 195i, 192i, 188i, 180i, 171i, 161i, 149i, 137i, 125i, 114i, 105i, 97i, 93i, 91i, 93i, 98i, 106i, 117i, 130i, 145i, 161i, 177i, 193i, 208i, 221i, 231i, 239i, 243i, 244i, 242i, 236i, 228i, 218i, 207i, 194i, 181i, 169i, 158i, 148i, 141i, 135i, 132i, 131i, 132i, 135i, 138i, 143i, 147i, 151i, 154i, 155i, 155i, 152i, 146i, 139i, 129i, 118i, 106i, 93i, 80i, 68i, 58i, 49i, 43i, 40i, 41i, 44i, 51i, 61i, 73i, 87i, 103i, 119i, 134i, 149i, 162i, 173i, 181i, 186i, 188i, 186i, 181i, 174i, 164i, 153i, 141i, 128i, 116i, 104i, 94i, 86i, 81i, 77i, 76i, 77i, 80i, 84i, 89i, 94i, 98i, 102i, 104i, 104i, 102i, 98i, 92i, 83i, 73i, 62i, 50i, 38i, 26i, 16i, 8i, 2i, 0i, 0i, 4i, 11i, 21i, 33i, 48i, 64i, 81i, 98i, 114i, 129i, 141i, 151i, 158i, 161i, 161i, 158i, 152i, 144i, 134i, 123i, 112i, 100i, 90i, 81i, 73i, 68i, 65i, 65i, 67i, 70i, 75i, 81i, 87i, 92i, 97i, 101i, 103i, 102i, 100i, 95i, 88i, 79i, 69i, 58i, 47i, 36i, 26i, 18i, 13i, 11i, 11i, 15i, 22i, 32i, 45i, 60i, 77i, 94i)
                %64:ptr<function, i32, read_write> = access %x_197, %x_221
                %65:i32 = load %64
                %x_240:i32 = let %65
                %x_244:i32 = let 335i
                %68:vec2<f32> = load %x_208
                %69:buf0 = construct %68
                %70:f32 = access %69, 0u, 1u
                %71:f32 = let %70
                %72:i32 = sub %x_225, %x_240
                %73:f32 = convert %72
                %74:f32 = abs %73
                %75:f32 = sub %71, %74
                %76:f32 = mul %75, 0.06666667014360427856f
                %x_248:f32 = let %76
                %78:vec4<f32> = construct %x_248, %x_248, %x_248, 1.0f
                store %x_249, %78
                %79:vec4<f32> = load %x_249
                store %x_251_phi, %79
                store %x_252_phi, true
                exit_loop  # loop_1
              }
            }
            %x_219_1:ptr<function, vec2<i32>, read_write> = var, %x_218
            %81:i32 = add %x_221, 1i
            store_vector_element %x_219_1, 1u, %81
            %82:vec2<i32> = load %x_219_1
            %x_219:vec2<i32> = let %82
            continue  # -> $B5
          }
          $B5: {  # continuing
            store %x_218_phi, %x_219
            next_iteration  # -> $B4
          }
        }
        %84:vec4<f32> = load %x_251_phi
        store %x_251, %84
        %85:bool = load %x_252_phi
        %x_252:bool = let %85
        %87:vec4<f32> = load %x_251
        store %x_254_phi, %87
        if %x_252 [t: $B10] {  # if_4
          $B10: {  # true
            exit_switch  # switch_1
          }
        }
        store %x_254_phi, vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f)
        exit_switch  # switch_1
      }
    }
    %88:vec4<f32> = load %x_254_phi
    %x_254:vec4<f32> = let %88
    store %x_GLF_color, %x_254
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B11: {
    store %gl_FragCoord, %gl_FragCoord_param
    %92:void = call %main_1
    %93:vec4<f32> = load %x_GLF_color
    %94:main_out = construct %93
    ret %94
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B12: {
    %96:i32 = convert %value
    %97:bool = gte %value, -2147483648.0f
    %98:i32 = select -2147483648i, %96, %97
    %99:bool = lte %value, 2147483520.0f
    %100:i32 = select 2147483647i, %98, %99
    ret %100
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
