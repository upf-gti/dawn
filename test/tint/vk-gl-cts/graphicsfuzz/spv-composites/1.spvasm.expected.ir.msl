SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %x_195:ptr<function, array<i32, 256>, read_write> = var
    %x_196:ptr<function, array<i32, 256>, read_write> = var
    %x_197:ptr<function, array<i32, 256>, read_write> = var
    %x_208:ptr<function, vec2<f32>, read_write> = var
    %x_214:ptr<function, vec2<i32>, read_write> = var
    %x_218:ptr<function, vec2<i32>, read_write> = var
    %x_249:ptr<function, vec4<f32>, read_write> = var
    %x_251:ptr<function, vec4<f32>, read_write> = var
    %x_252:ptr<function, bool, read_write> = var
    %x_254:ptr<function, vec4<f32>, read_write> = var
    %15:ptr<uniform, vec2<f32>, read> = access %x_6, 0u
    %16:vec2<f32> = load %15
    %x_201:vec2<f32> = let %16
    %18:vec4<f32> = load %gl_FragCoord
    %19:vec2<f32> = swizzle %18, xy
    %20:vec2<f32> = div %19, %x_201
    %x_202:vec2<f32> = let %20
    %x_204:i32 = let -82i
    %23:vec4<f32> = construct %x_201, 15.0f, 15.0f
    %24:f32 = access %23, 2u
    %25:vec2<f32> = construct 0.0f, %24
    store %x_208, %25
    %x_209:i32 = let 120i
    %27:f32 = access %x_202, 0u
    %28:f32 = mul %27, 256.0f
    %29:i32 = call %tint_f32_to_i32, %28
    %31:i32 = let %29
    %32:f32 = access %x_202, 1u
    %33:f32 = mul %32, 256.0f
    %34:i32 = call %tint_f32_to_i32, %33
    %35:vec2<i32> = construct %31, %34
    store %x_214, %35
    switch 0u [c: (default, $B3)] {  # switch_1
      $B3: {  # case
        %36:vec2<i32> = load %x_214
        store %x_218, %36
        loop [b: $B4, c: $B5] {  # loop_1
          $B4: {  # body
            %x_235:ptr<function, bool, read_write> = var
            %x_236:ptr<function, bool, read_write> = var
            %39:i32 = load_vector_element %x_218, 1u
            %x_221:i32 = let %39
            store %x_251, vec4<f32>(0.0f)
            store %x_252, false
            %41:bool = neq %x_221, 256i
            if %41 [t: $B6, f: $B7] {  # if_1
              $B6: {  # true
                exit_if  # if_1
              }
              $B7: {  # false
                exit_loop  # loop_1
              }
            }
            %42:i32 = load_vector_element %x_218, 0u
            %x_225:i32 = let %42
            store %x_195, array<i32, 256>(115i, 133i, 150i, 164i, 176i, 184i, 190i, 192i, 191i, 187i, 181i, 172i, 163i, 153i, 143i, 134i, 126i, 120i, 116i, 114i, 114i, 117i, 121i, 127i, 134i, 141i, 148i, 154i, 159i, 162i, 163i, 161i, 157i, 151i, 143i, 134i, 124i, 113i, 103i, 94i, 87i, 82i, 79i, 80i, 84i, 91i, 101i, 114i, 130i, 146i, 164i, 182i, 199i, 215i, 229i, 240i, 249i, 254i, 256i, 254i, 250i, 243i, 233i, 223i, 212i, 200i, 190i, 180i, 172i, 166i, 163i, 161i, 162i, 164i, 169i, 174i, 179i, 185i, 190i, 193i, 195i, 195i, 192i, 188i, 180i, 171i, 161i, 149i, 137i, 125i, 114i, 105i, 97i, 93i, 91i, 93i, 98i, 106i, 117i, 130i, 145i, 161i, 177i, 193i, 208i, 221i, 231i, 239i, 243i, 244i, 242i, 236i, 228i, 218i, 207i, 194i, 181i, 169i, 158i, 148i, 141i, 135i, 132i, 131i, 132i, 135i, 138i, 143i, 147i, 151i, 154i, 155i, 155i, 152i, 146i, 139i, 129i, 118i, 106i, 93i, 80i, 68i, 58i, 49i, 43i, 40i, 41i, 44i, 51i, 61i, 73i, 87i, 103i, 119i, 134i, 149i, 162i, 173i, 181i, 186i, 188i, 186i, 181i, 174i, 164i, 153i, 141i, 128i, 116i, 104i, 94i, 86i, 81i, 77i, 76i, 77i, 80i, 84i, 89i, 94i, 98i, 102i, 104i, 104i, 102i, 98i, 92i, 83i, 73i, 62i, 50i, 38i, 26i, 16i, 8i, 2i, 0i, 0i, 4i, 11i, 21i, 33i, 48i, 64i, 81i, 98i, 114i, 129i, 141i, 151i, 158i, 161i, 161i, 158i, 152i, 144i, 134i, 123i, 112i, 100i, 90i, 81i, 73i, 68i, 65i, 65i, 67i, 70i, 75i, 81i, 87i, 92i, 97i, 101i, 103i, 102i, 100i, 95i, 88i, 79i, 69i, 58i, 47i, 36i, 26i, 18i, 13i, 11i, 11i, 15i, 22i, 32i, 45i, 60i, 77i, 94i)
            %44:ptr<function, i32, read_write> = access %x_195, %x_221
            %45:i32 = load %44
            %46:i32 = add %45, 15i
            %47:bool = lt %x_225, %46
            %x_229:bool = let %47
            store %x_236, %x_229
            if %x_229 [t: $B8] {  # if_2
              $B8: {  # true
                store %x_196, array<i32, 256>(115i, 133i, 150i, 164i, 176i, 184i, 190i, 192i, 191i, 187i, 181i, 172i, 163i, 153i, 143i, 134i, 126i, 120i, 116i, 114i, 114i, 117i, 121i, 127i, 134i, 141i, 148i, 154i, 159i, 162i, 163i, 161i, 157i, 151i, 143i, 134i, 124i, 113i, 103i, 94i, 87i, 82i, 79i, 80i, 84i, 91i, 101i, 114i, 130i, 146i, 164i, 182i, 199i, 215i, 229i, 240i, 249i, 254i, 256i, 254i, 250i, 243i, 233i, 223i, 212i, 200i, 190i, 180i, 172i, 166i, 163i, 161i, 162i, 164i, 169i, 174i, 179i, 185i, 190i, 193i, 195i, 195i, 192i, 188i, 180i, 171i, 161i, 149i, 137i, 125i, 114i, 105i, 97i, 93i, 91i, 93i, 98i, 106i, 117i, 130i, 145i, 161i, 177i, 193i, 208i, 221i, 231i, 239i, 243i, 244i, 242i, 236i, 228i, 218i, 207i, 194i, 181i, 169i, 158i, 148i, 141i, 135i, 132i, 131i, 132i, 135i, 138i, 143i, 147i, 151i, 154i, 155i, 155i, 152i, 146i, 139i, 129i, 118i, 106i, 93i, 80i, 68i, 58i, 49i, 43i, 40i, 41i, 44i, 51i, 61i, 73i, 87i, 103i, 119i, 134i, 149i, 162i, 173i, 181i, 186i, 188i, 186i, 181i, 174i, 164i, 153i, 141i, 128i, 116i, 104i, 94i, 86i, 81i, 77i, 76i, 77i, 80i, 84i, 89i, 94i, 98i, 102i, 104i, 104i, 102i, 98i, 92i, 83i, 73i, 62i, 50i, 38i, 26i, 16i, 8i, 2i, 0i, 0i, 4i, 11i, 21i, 33i, 48i, 64i, 81i, 98i, 114i, 129i, 141i, 151i, 158i, 161i, 161i, 158i, 152i, 144i, 134i, 123i, 112i, 100i, 90i, 81i, 73i, 68i, 65i, 65i, 67i, 70i, 75i, 81i, 87i, 92i, 97i, 101i, 103i, 102i, 100i, 95i, 88i, 79i, 69i, 58i, 47i, 36i, 26i, 18i, 13i, 11i, 11i, 15i, 22i, 32i, 45i, 60i, 77i, 94i)
                %49:ptr<function, i32, read_write> = access %x_196, %x_221
                %50:i32 = load %49
                %51:i32 = sub %50, 15i
                %52:bool = gt %x_225, %51
                store %x_235, %52
                %53:bool = load %x_235
                store %x_236, %53
                exit_if  # if_2
              }
            }
            %54:bool = load %x_236
            if %54 [t: $B9] {  # if_3
              $B9: {  # true
                store %x_197, array<i32, 256>(115i, 133i, 150i, 164i, 176i, 184i, 190i, 192i, 191i, 187i, 181i, 172i, 163i, 153i, 143i, 134i, 126i, 120i, 116i, 114i, 114i, 117i, 121i, 127i, 134i, 141i, 148i, 154i, 159i, 162i, 163i, 161i, 157i, 151i, 143i, 134i, 124i, 113i, 103i, 94i, 87i, 82i, 79i, 80i, 84i, 91i, 101i, 114i, 130i, 146i, 164i, 182i, 199i, 215i, 229i, 240i, 249i, 254i, 256i, 254i, 250i, 243i, 233i, 223i, 212i, 200i, 190i, 180i, 172i, 166i, 163i, 161i, 162i, 164i, 169i, 174i, 179i, 185i, 190i, 193i, 195i, 195i, 192i, 188i, 180i, 171i, 161i, 149i, 137i, 125i, 114i, 105i, 97i, 93i, 91i, 93i, 98i, 106i, 117i, 130i, 145i, 161i, 177i, 193i, 208i, 221i, 231i, 239i, 243i, 244i, 242i, 236i, 228i, 218i, 207i, 194i, 181i, 169i, 158i, 148i, 141i, 135i, 132i, 131i, 132i, 135i, 138i, 143i, 147i, 151i, 154i, 155i, 155i, 152i, 146i, 139i, 129i, 118i, 106i, 93i, 80i, 68i, 58i, 49i, 43i, 40i, 41i, 44i, 51i, 61i, 73i, 87i, 103i, 119i, 134i, 149i, 162i, 173i, 181i, 186i, 188i, 186i, 181i, 174i, 164i, 153i, 141i, 128i, 116i, 104i, 94i, 86i, 81i, 77i, 76i, 77i, 80i, 84i, 89i, 94i, 98i, 102i, 104i, 104i, 102i, 98i, 92i, 83i, 73i, 62i, 50i, 38i, 26i, 16i, 8i, 2i, 0i, 0i, 4i, 11i, 21i, 33i, 48i, 64i, 81i, 98i, 114i, 129i, 141i, 151i, 158i, 161i, 161i, 158i, 152i, 144i, 134i, 123i, 112i, 100i, 90i, 81i, 73i, 68i, 65i, 65i, 67i, 70i, 75i, 81i, 87i, 92i, 97i, 101i, 103i, 102i, 100i, 95i, 88i, 79i, 69i, 58i, 47i, 36i, 26i, 18i, 13i, 11i, 11i, 15i, 22i, 32i, 45i, 60i, 77i, 94i)
                %x_244:i32 = let 335i
                %56:vec2<f32> = load %x_208
                %57:buf0 = construct %56
                %58:f32 = access %57, 0u, 1u
                %59:f32 = let %58
                %60:ptr<function, i32, read_write> = access %x_197, %x_221
                %61:i32 = load %60
                %62:i32 = sub %x_225, %61
                %63:f32 = convert %62
                %64:f32 = abs %63
                %65:f32 = sub %59, %64
                %66:f32 = mul %65, 0.06666667014360427856f
                %x_248:f32 = let %66
                %68:vec4<f32> = construct %x_248, %x_248, %x_248, 1.0f
                store %x_249, %68
                %69:vec4<f32> = load %x_249
                store %x_251, %69
                store %x_252, true
                exit_loop  # loop_1
              }
            }
            %70:vec2<i32> = load %x_218
            %x_219_1:ptr<function, vec2<i32>, read_write> = var, %70
            %72:i32 = add %x_221, 1i
            store_vector_element %x_219_1, 1u, %72
            %73:vec2<i32> = load %x_219_1
            %x_219:vec2<i32> = let %73
            continue  # -> $B5
          }
          $B5: {  # continuing
            store %x_218, %x_219
            next_iteration  # -> $B4
          }
        }
        %75:vec4<f32> = load %x_251
        store %x_254, %75
        %76:bool = load %x_252
        if %76 [t: $B10] {  # if_4
          $B10: {  # true
            exit_switch  # switch_1
          }
        }
        store %x_254, vec4<f32>(0.0f, 0.0f, 0.0f, 1.0f)
        exit_switch  # switch_1
      }
    }
    %77:vec4<f32> = load %x_254
    store %x_GLF_color, %77
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B11: {
    store %gl_FragCoord, %gl_FragCoord_param
    %80:void = call %main_1
    %81:vec4<f32> = load %x_GLF_color
    %82:main_out = construct %81
    ret %82
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B12: {
    %84:i32 = convert %value
    %85:bool = gte %value, -2147483648.0f
    %86:i32 = select -2147483648i, %84, %85
    %87:bool = lte %value, 2147483520.0f
    %88:i32 = select 2147483647i, %86, %87
    ret %88
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
