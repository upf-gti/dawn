SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 3> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void {
  $B2: {
    %i:ptr<function, i32, read_write> = var
    %6:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %7:i32 = load %6
    %x_31:i32 = let %7
    %9:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %10:i32 = load %9
    %x_34:i32 = let %10
    %12:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %13:i32 = load %12
    %x_37:i32 = let %13
    %15:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %16:i32 = load %15
    %x_40:i32 = let %16
    %18:f32 = convert %x_31
    %19:f32 = let %18
    %20:f32 = convert %x_34
    %21:f32 = let %20
    %22:f32 = convert %x_37
    %23:f32 = let %22
    %24:f32 = convert %x_40
    %25:vec4<f32> = construct %19, %21, %23, %24
    store %x_GLF_color, %25
    %26:f32 = load_vector_element %gl_FragCoord, 1u
    %x_44:f32 = let %26
    %28:bool = lt %x_44, 0.0f
    if %28 [t: $B3] {  # if_1
      $B3: {  # true
        %29:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
        %30:i32 = load %29
        %x_49:i32 = let %30
        %32:f32 = convert %x_49
        %x_50:f32 = let %32
        %34:vec4<f32> = construct %x_50, %x_50, %x_50, %x_50
        store %x_GLF_color, %34
        exit_if  # if_1
      }
    }
    %35:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %36:i32 = load %35
    %x_53:i32 = let %36
    store %i, %x_53
    loop [b: $B4, c: $B5] {  # loop_1
      $B4: {  # body
        %38:i32 = load %i
        %x_58:i32 = let %38
        %40:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
        %41:i32 = load %40
        %x_60:i32 = let %41
        %43:bool = lt %x_58, %x_60
        if %43 [t: $B6, f: $B7] {  # if_2
          $B6: {  # true
            exit_if  # if_2
          }
          $B7: {  # false
            exit_loop  # loop_1
          }
        }
        %44:f32 = load_vector_element %gl_FragCoord, 0u
        %x_64:f32 = let %44
        %46:bool = gt %x_64, 0.0f
        if %46 [t: $B8] {  # if_3
          $B8: {  # true
            %47:f32 = load_vector_element %gl_FragCoord, 1u
            %x_69:f32 = let %47
            %49:bool = lt %x_69, 0.0f
            if %49 [t: $B9] {  # if_4
              $B9: {  # true
                %50:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
                %51:i32 = load %50
                %x_74:i32 = let %51
                %53:f32 = convert %x_74
                %x_75:f32 = let %53
                %55:vec4<f32> = construct %x_75, %x_75, %x_75, %x_75
                store %x_GLF_color, %55
                exit_loop  # loop_1
              }
            }
            exit_if  # if_3
          }
        }
        %56:f32 = load_vector_element %gl_FragCoord, 0u
        %x_78:f32 = let %56
        %58:bool = gt %x_78, 0.0f
        if %58 [t: $B10] {  # if_5
          $B10: {  # true
            %59:f32 = load_vector_element %gl_FragCoord, 1u
            %x_83:f32 = let %59
            %61:bool = lt %x_83, 0.0f
            if %61 [t: $B11] {  # if_6
              $B11: {  # true
                %62:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
                %63:i32 = load %62
                %x_88:i32 = let %63
                %65:f32 = convert %x_88
                %x_89:f32 = let %65
                %67:vec4<f32> = construct %x_89, %x_89, %x_89, %x_89
                store %x_GLF_color, %67
                exit_if  # if_6
              }
            }
            exit_if  # if_5
          }
        }
        continue  # -> $B5
      }
      $B5: {  # continuing
        %68:i32 = load %i
        %x_91:i32 = let %68
        %70:i32 = add %x_91, 1i
        store %i, %70
        next_iteration  # -> $B4
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B12: {
    store %gl_FragCoord, %gl_FragCoord_param
    %73:void = call %main_1
    %74:vec4<f32> = load %x_GLF_color
    %75:main_out = construct %74
    ret %75
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
