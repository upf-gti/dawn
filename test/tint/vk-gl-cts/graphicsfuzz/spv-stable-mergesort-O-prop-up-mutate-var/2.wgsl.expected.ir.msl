SKIP: FAILED

../../src/tint/lang/msl/writer/printer/printer.cc:500 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

$B1: {  # root
  %x_8:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %continue_execution:ptr<private, bool, read_write> = var, true
}

%main_1 = func():void {
  $B2: {
    %temp:ptr<function, array<i32, 10>, read_write> = var
    %data:ptr<function, array<i32, 10>, read_write> = var
    %x_189:ptr<function, f32, read_write> = var
    %x_261:ptr<function, f32, read_write> = var
    %x_63_phi:ptr<function, i32, read_write> = var
    %x_102_phi:ptr<function, i32, read_write> = var
    %x_111_phi:ptr<function, i32, read_write> = var
    %x_262_phi:ptr<function, f32, read_write> = var
    %14:ptr<uniform, vec2<f32>, read> = access %x_8, 0u
    %15:f32 = load_vector_element %14, 0u
    %x_60:f32 = let %15
    %17:i32 = call %tint_f32_to_i32, %x_60
    %x_61:i32 = let %17
    store %x_63_phi, %x_61
    loop [b: $B3, c: $B4] {  # loop_1
      $B3: {  # body
        %x_99:ptr<function, i32, read_write> = var
        %x_97:ptr<function, i32, read_write> = var
        %x_95:ptr<function, i32, read_write> = var
        %x_93:ptr<function, i32, read_write> = var
        %x_91:ptr<function, i32, read_write> = var
        %x_89:ptr<function, i32, read_write> = var
        %x_87:ptr<function, i32, read_write> = var
        %x_85:ptr<function, i32, read_write> = var
        %x_83:ptr<function, i32, read_write> = var
        %x_81:ptr<function, i32, read_write> = var
        %x_64_phi:ptr<function, i32, read_write> = var
        %31:i32 = load %x_63_phi
        %x_63:i32 = let %31
        %33:i32 = add %x_63, 1i
        %x_68:i32 = let %33
        store %x_64_phi, %x_68
        switch %x_63 [c: (9i, $B5), c: (8i, $B6), c: (7i, $B7), c: (6i, $B8), c: (5i, $B9), c: (4i, $B10), c: (3i, $B11), c: (2i, $B12), c: (1i, $B13), c: (0i, $B14), c: (default, $B15)] {  # switch_1
          $B5: {  # case
            %35:ptr<function, i32, read_write> = access %data, %x_63
            store %35, -5i
            %36:i32 = add %x_63, 1i
            store %x_99, %36
            %37:i32 = load %x_99
            store %x_64_phi, %37
            exit_switch  # switch_1
          }
          $B6: {  # case
            %38:ptr<function, i32, read_write> = access %data, %x_63
            store %38, -4i
            %39:i32 = add %x_63, 1i
            store %x_97, %39
            %40:i32 = load %x_97
            store %x_64_phi, %40
            exit_switch  # switch_1
          }
          $B7: {  # case
            %41:ptr<function, i32, read_write> = access %data, %x_63
            store %41, -3i
            %42:i32 = add %x_63, 1i
            store %x_95, %42
            %43:i32 = load %x_95
            store %x_64_phi, %43
            exit_switch  # switch_1
          }
          $B8: {  # case
            %44:ptr<function, i32, read_write> = access %data, %x_63
            store %44, -2i
            %45:i32 = add %x_63, 1i
            store %x_93, %45
            %46:i32 = load %x_93
            store %x_64_phi, %46
            exit_switch  # switch_1
          }
          $B9: {  # case
            %47:ptr<function, i32, read_write> = access %data, %x_63
            store %47, -1i
            %48:i32 = add %x_63, 1i
            store %x_91, %48
            %49:i32 = load %x_91
            store %x_64_phi, %49
            exit_switch  # switch_1
          }
          $B10: {  # case
            %50:ptr<function, i32, read_write> = access %data, %x_63
            store %50, 0i
            %51:i32 = add %x_63, 1i
            store %x_89, %51
            %52:i32 = load %x_89
            store %x_64_phi, %52
            exit_switch  # switch_1
          }
          $B11: {  # case
            %53:ptr<function, i32, read_write> = access %data, %x_63
            store %53, 1i
            %54:i32 = add %x_63, 1i
            store %x_87, %54
            %55:i32 = load %x_87
            store %x_64_phi, %55
            exit_switch  # switch_1
          }
          $B12: {  # case
            %56:ptr<function, i32, read_write> = access %data, %x_63
            store %56, 2i
            %57:i32 = add %x_63, 1i
            store %x_85, %57
            %58:i32 = load %x_85
            store %x_64_phi, %58
            exit_switch  # switch_1
          }
          $B13: {  # case
            %59:ptr<function, i32, read_write> = access %data, %x_63
            store %59, 3i
            %60:i32 = add %x_63, 1i
            store %x_83, %60
            %61:i32 = load %x_83
            store %x_64_phi, %61
            exit_switch  # switch_1
          }
          $B14: {  # case
            %62:ptr<function, i32, read_write> = access %data, %x_63
            store %62, 4i
            %63:i32 = add %x_63, 1i
            store %x_81, %63
            %64:i32 = load %x_81
            store %x_64_phi, %64
            exit_switch  # switch_1
          }
          $B15: {  # case
            exit_switch  # switch_1
          }
        }
        %65:i32 = load %x_64_phi
        %x_64:i32 = let %65
        continue  # -> $B4
      }
      $B4: {  # continuing
        store %x_63_phi, %x_64
        %67:bool = lt %x_64, 10i
        %68:bool = eq %67, false
        break_if %68  # -> [t: exit_loop loop_1, f: $B3]
      }
    }
    store %x_102_phi, 0i
    loop [b: $B16, c: $B17] {  # loop_2
      $B16: {  # body
        %x_103:ptr<function, i32, read_write> = var
        %70:i32 = load %x_102_phi
        %x_102:i32 = let %70
        %72:bool = lt %x_102, 10i
        if %72 [t: $B18, f: $B19] {  # if_1
          $B18: {  # true
            exit_if  # if_1
          }
          $B19: {  # false
            exit_loop  # loop_2
          }
        }
        continue  # -> $B17
      }
      $B17: {  # continuing
        %73:ptr<function, i32, read_write> = access %data, %x_102
        %74:i32 = load %73
        %x_108:i32 = let %74
        %76:ptr<function, i32, read_write> = access %temp, %x_102
        store %76, %x_108
        %77:i32 = add %x_102, 1i
        store %x_103, %77
        %78:i32 = load %x_103
        store %x_102_phi, %78
        next_iteration  # -> $B16
      }
    }
    store %x_111_phi, 1i
    loop [b: $B20, c: $B21] {  # loop_3
      $B20: {  # body
        %x_112:ptr<function, i32, read_write> = var
        %x_118_phi:ptr<function, i32, read_write> = var
        %81:i32 = load %x_111_phi
        %x_111:i32 = let %81
        %83:bool = lte %x_111, 9i
        if %83 [t: $B22, f: $B23] {  # if_2
          $B22: {  # true
            exit_if  # if_2
          }
          $B23: {  # false
            exit_loop  # loop_3
          }
        }
        store %x_118_phi, 0i
        loop [b: $B24, c: $B25] {  # loop_4
          $B24: {  # body
            %x_130:ptr<function, i32, read_write> = var
            %x_135:ptr<function, i32, read_write> = var
            %x_130_phi:ptr<function, i32, read_write> = var
            %x_133_phi:ptr<function, i32, read_write> = var
            %x_135_phi:ptr<function, i32, read_write> = var
            %x_157_phi:ptr<function, i32, read_write> = var
            %x_160_phi:ptr<function, i32, read_write> = var
            %x_170_phi:ptr<function, i32, read_write> = var
            %92:i32 = load %x_118_phi
            %x_118:i32 = let %92
            %94:bool = lt %x_118, 9i
            if %94 [t: $B26, f: $B27] {  # if_3
              $B26: {  # true
                exit_if  # if_3
              }
              $B27: {  # false
                exit_loop  # loop_4
              }
            }
            %95:i32 = add %x_118, %x_111
            %x_124:i32 = let %95
            %97:i32 = sub %x_124, 1i
            %x_125:i32 = let %97
            %99:i32 = mul 2i, %x_111
            %100:i32 = add %x_118, %99
            %x_119:i32 = let %100
            %102:i32 = sub %x_119, 1i
            %103:i32 = min %102, 9i
            %x_128:i32 = let %103
            store %x_130_phi, %x_118
            store %x_133_phi, %x_124
            store %x_135_phi, %x_118
            loop [b: $B28, c: $B29] {  # loop_5
              $B28: {  # body
                %x_150:ptr<function, i32, read_write> = var
                %x_153:ptr<function, i32, read_write> = var
                %x_134_phi:ptr<function, i32, read_write> = var
                %x_136_phi:ptr<function, i32, read_write> = var
                %109:i32 = load %x_130_phi
                store %x_130, %109
                %110:i32 = load %x_133_phi
                %x_133:i32 = let %110
                %112:i32 = load %x_135_phi
                store %x_135, %112
                %113:i32 = load %x_135
                %114:bool = lte %113, %x_125
                %115:bool = lte %x_133, %x_128
                %116:bool = and %114, %115
                if %116 [t: $B30, f: $B31] {  # if_4
                  $B30: {  # true
                    exit_if  # if_4
                  }
                  $B31: {  # false
                    exit_loop  # loop_5
                  }
                }
                %117:i32 = load %x_135
                %x_142_save:i32 = let %117
                %119:ptr<function, i32, read_write> = access %data, %x_142_save
                %120:i32 = load %119
                %x_143:i32 = let %120
                %x_144_save:i32 = let %x_133
                %123:ptr<function, i32, read_write> = access %data, %x_144_save
                %124:i32 = load %123
                %x_145:i32 = let %124
                %126:i32 = load %x_130
                %127:i32 = add %126, 1i
                %128:i32 = bitcast %127
                %x_131:i32 = let %128
                %130:bool = lt %x_143, %x_145
                if %130 [t: $B32, f: $B33] {  # if_5
                  $B32: {  # true
                    %131:i32 = load %x_135
                    %132:i32 = add %131, 1i
                    %133:i32 = bitcast %132
                    store %x_150, %133
                    %134:ptr<function, i32, read_write> = access %data, %x_142_save
                    %135:i32 = load %134
                    %x_151:i32 = let %135
                    %137:i32 = load %x_130
                    %138:ptr<function, i32, read_write> = access %temp, %137
                    store %138, %x_151
                    store %x_134_phi, %x_133
                    %139:i32 = load %x_150
                    store %x_136_phi, %139
                    exit_if  # if_5
                  }
                  $B33: {  # false
                    %140:i32 = add %x_133, 1i
                    store %x_153, %140
                    %141:ptr<function, i32, read_write> = access %data, %x_144_save
                    %142:i32 = load %141
                    %x_154:i32 = let %142
                    %144:i32 = load %x_130
                    %145:ptr<function, i32, read_write> = access %temp, %144
                    store %145, %x_154
                    %146:i32 = load %x_153
                    store %x_134_phi, %146
                    %147:i32 = load %x_135
                    store %x_136_phi, %147
                    exit_if  # if_5
                  }
                }
                %148:i32 = load %x_134_phi
                %x_134:i32 = let %148
                %150:i32 = load %x_136_phi
                %x_136:i32 = let %150
                continue  # -> $B29
              }
              $B29: {  # continuing
                store %x_130_phi, %x_131
                store %x_133_phi, %x_134
                store %x_135_phi, %x_136
                next_iteration  # -> $B28
              }
            }
            %152:i32 = load %x_130
            store %x_157_phi, %152
            %153:i32 = load %x_135
            store %x_160_phi, %153
            loop [b: $B34, c: $B35] {  # loop_6
              $B34: {  # body
                %x_158:ptr<function, i32, read_write> = var
                %x_161:ptr<function, i32, read_write> = var
                %156:i32 = load %x_157_phi
                %x_157:i32 = let %156
                %158:i32 = load %x_160_phi
                %x_160:i32 = let %158
                %160:bool = lt %x_160, 10i
                %161:bool = lte %x_160, %x_125
                %162:bool = and %160, %161
                if %162 [t: $B36, f: $B37] {  # if_6
                  $B36: {  # true
                    exit_if  # if_6
                  }
                  $B37: {  # false
                    exit_loop  # loop_6
                  }
                }
                continue  # -> $B35
              }
              $B35: {  # continuing
                %163:i32 = add %x_157, 1i
                store %x_158, %163
                %164:i32 = add %x_160, 1i
                store %x_161, %164
                %165:ptr<function, i32, read_write> = access %data, %x_160
                %166:i32 = load %165
                %x_167:i32 = let %166
                %168:ptr<function, i32, read_write> = access %temp, %x_157
                store %168, %x_167
                %169:i32 = load %x_158
                store %x_157_phi, %169
                %170:i32 = load %x_161
                store %x_160_phi, %170
                next_iteration  # -> $B34
              }
            }
            store %x_170_phi, %x_118
            loop [b: $B38, c: $B39] {  # loop_7
              $B38: {  # body
                %x_171:ptr<function, i32, read_write> = var
                %172:i32 = load %x_170_phi
                %x_170:i32 = let %172
                %174:bool = lte %x_170, %x_128
                if %174 [t: $B40, f: $B41] {  # if_7
                  $B40: {  # true
                    exit_if  # if_7
                  }
                  $B41: {  # false
                    exit_loop  # loop_7
                  }
                }
                continue  # -> $B39
              }
              $B39: {  # continuing
                %175:ptr<function, i32, read_write> = access %temp, %x_170
                %176:i32 = load %175
                %x_176:i32 = let %176
                %178:ptr<function, i32, read_write> = access %data, %x_170
                store %178, %x_176
                %179:i32 = add %x_170, 1i
                store %x_171, %179
                %180:i32 = load %x_171
                store %x_170_phi, %180
                next_iteration  # -> $B38
              }
            }
            continue  # -> $B25
          }
          $B25: {  # continuing
            store %x_118_phi, %x_119
            next_iteration  # -> $B24
          }
        }
        continue  # -> $B21
      }
      $B21: {  # continuing
        %181:i32 = mul 2i, %x_111
        store %x_112, %181
        %182:i32 = load %x_112
        store %x_111_phi, %182
        next_iteration  # -> $B20
      }
    }
    %x_180:ptr<function, i32, read_write> = var
    %x_198:ptr<function, f32, read_write> = var
    %x_260:ptr<function, f32, read_write> = var
    %x_261_phi:ptr<function, f32, read_write> = var
    %187:f32 = load_vector_element %gl_FragCoord, 1u
    %x_179:f32 = let %187
    %189:i32 = call %tint_f32_to_i32, %x_179
    store %x_180, %189
    %190:i32 = load %x_180
    %191:bool = lt %190, 30i
    if %191 [t: $B42, f: $B43] {  # if_8
      $B42: {  # true
        %192:ptr<function, i32, read_write> = access %data, 0i
        %193:i32 = load %192
        %x_186:i32 = let %193
        %195:f32 = convert %x_186
        %196:f32 = mul %195, 0.10000000149011611938f
        %197:f32 = add 0.5f, %196
        store %x_189, %197
        %198:f32 = load %x_189
        store %x_262_phi, %198
        exit_if  # if_8
      }
      $B43: {  # false
        %x_207:ptr<function, f32, read_write> = var
        %x_259:ptr<function, f32, read_write> = var
        %x_260_phi:ptr<function, f32, read_write> = var
        %202:i32 = load %x_180
        %203:bool = lt %202, 60i
        if %203 [t: $B44, f: $B45] {  # if_9
          $B44: {  # true
            %204:ptr<function, i32, read_write> = access %data, 1i
            %205:i32 = load %204
            %x_195:i32 = let %205
            %207:f32 = convert %x_195
            %208:f32 = mul %207, 0.10000000149011611938f
            %209:f32 = add 0.5f, %208
            store %x_198, %209
            %210:f32 = load %x_198
            store %x_261_phi, %210
            exit_if  # if_9
          }
          $B45: {  # false
            %x_216:ptr<function, f32, read_write> = var
            %x_258:ptr<function, f32, read_write> = var
            %x_259_phi:ptr<function, f32, read_write> = var
            %214:i32 = load %x_180
            %215:bool = lt %214, 90i
            if %215 [t: $B46, f: $B47] {  # if_10
              $B46: {  # true
                %216:ptr<function, i32, read_write> = access %data, 2i
                %217:i32 = load %216
                %x_204:i32 = let %217
                %219:f32 = convert %x_204
                %220:f32 = mul %219, 0.10000000149011611938f
                %221:f32 = add 0.5f, %220
                store %x_207, %221
                %222:f32 = load %x_207
                store %x_260_phi, %222
                exit_if  # if_10
              }
              $B47: {  # false
                %223:i32 = load %x_180
                %224:bool = lt %223, 120i
                if %224 [t: $B48, f: $B49] {  # if_11
                  $B48: {  # true
                    %225:ptr<function, i32, read_write> = access %data, 3i
                    %226:i32 = load %225
                    %x_213:i32 = let %226
                    %228:f32 = convert %x_213
                    %229:f32 = mul %228, 0.10000000149011611938f
                    %230:f32 = add 0.5f, %229
                    store %x_216, %230
                    %231:f32 = load %x_216
                    store %x_259_phi, %231
                    exit_if  # if_11
                  }
                  $B49: {  # false
                    %x_229:ptr<function, f32, read_write> = var
                    %x_257:ptr<function, f32, read_write> = var
                    %x_258_phi:ptr<function, f32, read_write> = var
                    %235:i32 = load %x_180
                    %236:bool = lt %235, 150i
                    if %236 [t: $B50, f: $B51] {  # if_12
                      $B50: {  # true
                        store %continue_execution, false
                        exit_if  # if_12
                      }
                      $B51: {  # false
                        %x_238:ptr<function, f32, read_write> = var
                        %x_256:ptr<function, f32, read_write> = var
                        %x_257_phi:ptr<function, f32, read_write> = var
                        %240:i32 = load %x_180
                        %241:bool = lt %240, 180i
                        if %241 [t: $B52, f: $B53] {  # if_13
                          $B52: {  # true
                            %242:ptr<function, i32, read_write> = access %data, 5i
                            %243:i32 = load %242
                            %x_226:i32 = let %243
                            %245:f32 = convert %x_226
                            %246:f32 = mul %245, 0.10000000149011611938f
                            %247:f32 = add 0.5f, %246
                            store %x_229, %247
                            %248:f32 = load %x_229
                            store %x_258_phi, %248
                            exit_if  # if_13
                          }
                          $B53: {  # false
                            %x_247:ptr<function, f32, read_write> = var
                            %x_255:ptr<function, f32, read_write> = var
                            %x_256_phi:ptr<function, f32, read_write> = var
                            %252:i32 = load %x_180
                            %253:bool = lt %252, 210i
                            if %253 [t: $B54, f: $B55] {  # if_14
                              $B54: {  # true
                                %254:ptr<function, i32, read_write> = access %data, 6i
                                %255:i32 = load %254
                                %x_235:i32 = let %255
                                %257:f32 = convert %x_235
                                %258:f32 = mul %257, 0.10000000149011611938f
                                %259:f32 = add 0.5f, %258
                                store %x_238, %259
                                %260:f32 = load %x_238
                                store %x_257_phi, %260
                                exit_if  # if_14
                              }
                              $B55: {  # false
                                %261:i32 = load %x_180
                                %262:bool = lt %261, 240i
                                if %262 [t: $B56, f: $B57] {  # if_15
                                  $B56: {  # true
                                    %263:ptr<function, i32, read_write> = access %data, 7i
                                    %264:i32 = load %263
                                    %x_244:i32 = let %264
                                    %266:f32 = convert %x_244
                                    %267:f32 = mul %266, 0.10000000149011611938f
                                    %268:f32 = add 0.5f, %267
                                    store %x_247, %268
                                    %269:f32 = load %x_247
                                    store %x_256_phi, %269
                                    exit_if  # if_15
                                  }
                                  $B57: {  # false
                                    %270:i32 = load %x_180
                                    %271:bool = lt %270, 270i
                                    if %271 [t: $B58, f: $B59] {  # if_16
                                      $B58: {  # true
                                        exit_if  # if_16
                                      }
                                      $B59: {  # false
                                        store %continue_execution, false
                                        exit_if  # if_16
                                      }
                                    }
                                    %272:ptr<function, i32, read_write> = access %data, 8i
                                    %273:i32 = load %272
                                    %x_252:i32 = let %273
                                    %275:f32 = convert %x_252
                                    %276:f32 = mul %275, 0.10000000149011611938f
                                    %277:f32 = add 0.5f, %276
                                    store %x_255, %277
                                    %278:f32 = load %x_255
                                    store %x_256_phi, %278
                                    exit_if  # if_15
                                  }
                                }
                                %279:f32 = load %x_256_phi
                                store %x_256, %279
                                %280:f32 = load %x_256
                                store %x_257_phi, %280
                                exit_if  # if_14
                              }
                            }
                            %281:f32 = load %x_257_phi
                            store %x_257, %281
                            %282:f32 = load %x_257
                            store %x_258_phi, %282
                            exit_if  # if_13
                          }
                        }
                        %283:f32 = load %x_258_phi
                        store %x_258, %283
                        exit_if  # if_12
                      }
                    }
                    %284:f32 = load %x_258
                    store %x_259_phi, %284
                    exit_if  # if_11
                  }
                }
                %285:f32 = load %x_259_phi
                store %x_259, %285
                %286:f32 = load %x_259
                store %x_260_phi, %286
                exit_if  # if_10
              }
            }
            %287:f32 = load %x_260_phi
            store %x_260, %287
            %288:f32 = load %x_260
            store %x_261_phi, %288
            exit_if  # if_9
          }
        }
        %289:f32 = load %x_261_phi
        store %x_261, %289
        %290:f32 = load %x_261
        store %x_262_phi, %290
        exit_if  # if_8
      }
    }
    %291:f32 = load %x_262_phi
    %x_262:f32 = let %291
    %293:vec4<f32> = construct %x_262, %x_262, %x_262, 1.0f
    store %x_GLF_color, %293
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out {
  $B60: {
    store %gl_FragCoord, %gl_FragCoord_param
    %296:void = call %main_1
    %297:vec4<f32> = load %x_GLF_color
    %298:main_out = construct %297
    %299:bool = load %continue_execution
    %300:bool = eq %299, false
    if %300 [t: $B61] {  # if_17
      $B61: {  # true
        terminate_invocation
      }
    }
    ret %298
  }
}
%tint_f32_to_i32 = func(%value:f32):i32 {
  $B62: {
    %302:i32 = convert %value
    %303:bool = gte %value, -2147483648.0f
    %304:i32 = select -2147483648i, %302, %303
    %305:bool = lte %value, 2147483520.0f
    %306:i32 = select 2147483647i, %304, %305
    ret %306
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
